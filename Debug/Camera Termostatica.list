
Camera Termostatica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d830  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800da00  0800da00  0001da00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0a4  0800e0a4  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0a4  0800e0a4  0001e0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0ac  0800e0ac  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0ac  0800e0ac  0001e0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0b0  0800e0b0  0001e0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800e0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  200001f8  0800e2ac  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800e2ac  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b66  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002467  00000000  00000000  00032d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  000351f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  000363d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248e0  00000000  00000000  000374e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c09  00000000  00000000  0005bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1ae9  00000000  00000000  000719d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001534ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006214  00000000  00000000  0015350c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d9e8 	.word	0x0800d9e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800d9e8 	.word	0x0800d9e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001042:	4a38      	ldr	r2, [pc, #224]	; (8001124 <HD44780_Init+0xec>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HD44780_Init+0xf0>)
 800104a:	2208      	movs	r2, #8
 800104c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <HD44780_Init+0xf4>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HD44780_Init+0xec>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d907      	bls.n	800106c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800105c:	4b33      	ldr	r3, [pc, #204]	; (800112c <HD44780_Init+0xf4>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HD44780_Init+0xf4>)
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e006      	b.n	800107a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HD44780_Init+0xf4>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HD44780_Init+0xf4>)
 8001078:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800107a:	f000 f985 	bl	8001388 <DelayInit>
  HAL_Delay(50);
 800107e:	2032      	movs	r0, #50	; 0x32
 8001080:	f004 fc88 	bl	8005994 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <HD44780_Init+0xf0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 f943 	bl	8001314 <ExpanderWrite>
  HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001092:	f004 fc7f 	bl	8005994 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8001096:	2030      	movs	r0, #48	; 0x30
 8001098:	f000 f92b 	bl	80012f2 <Write4Bits>
  DelayUS(4500);
 800109c:	f241 1094 	movw	r0, #4500	; 0x1194
 80010a0:	f000 f99c 	bl	80013dc <DelayUS>

  Write4Bits(0x03 << 4);
 80010a4:	2030      	movs	r0, #48	; 0x30
 80010a6:	f000 f924 	bl	80012f2 <Write4Bits>
  DelayUS(4500);
 80010aa:	f241 1094 	movw	r0, #4500	; 0x1194
 80010ae:	f000 f995 	bl	80013dc <DelayUS>

  Write4Bits(0x03 << 4);
 80010b2:	2030      	movs	r0, #48	; 0x30
 80010b4:	f000 f91d 	bl	80012f2 <Write4Bits>
  DelayUS(4500);
 80010b8:	f241 1094 	movw	r0, #4500	; 0x1194
 80010bc:	f000 f98e 	bl	80013dc <DelayUS>

  Write4Bits(0x02 << 4);
 80010c0:	2020      	movs	r0, #32
 80010c2:	f000 f916 	bl	80012f2 <Write4Bits>
  DelayUS(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f000 f988 	bl	80013dc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <HD44780_Init+0xf4>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f8ce 	bl	8001278 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HD44780_Init+0xf8>)
 80010de:	2204      	movs	r2, #4
 80010e0:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010e2:	f000 f875 	bl	80011d0 <HD44780_Display>
  HD44780_Clear();
 80010e6:	f000 f82b 	bl	8001140 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HD44780_Init+0xfc>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HD44780_Init+0xfc>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f8bc 	bl	8001278 <SendCommand>
  DelayUS(4500);
 8001100:	f241 1094 	movw	r0, #4500	; 0x1194
 8001104:	f000 f96a 	bl	80013dc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001108:	490b      	ldr	r1, [pc, #44]	; (8001138 <HD44780_Init+0x100>)
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f876 	bl	80011fc <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001110:	490a      	ldr	r1, [pc, #40]	; (800113c <HD44780_Init+0x104>)
 8001112:	2001      	movs	r0, #1
 8001114:	f000 f872 	bl	80011fc <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001118:	f000 f81d 	bl	8001156 <HD44780_Home>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000217 	.word	0x20000217
 8001128:	20000218 	.word	0x20000218
 800112c:	20000214 	.word	0x20000214
 8001130:	20000215 	.word	0x20000215
 8001134:	20000216 	.word	0x20000216
 8001138:	20000000 	.word	0x20000000
 800113c:	20000008 	.word	0x20000008

08001140 <HD44780_Clear>:

void HD44780_Clear()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001144:	2001      	movs	r0, #1
 8001146:	f000 f897 	bl	8001278 <SendCommand>
  DelayUS(2000);
 800114a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800114e:	f000 f945 	bl	80013dc <DelayUS>
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}

08001156 <HD44780_Home>:

void HD44780_Home()
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800115a:	2002      	movs	r0, #2
 800115c:	f000 f88c 	bl	8001278 <SendCommand>
  DelayUS(2000);
 8001160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001164:	f000 f93a 	bl	80013dc <DelayUS>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}

0800116c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	71fb      	strb	r3, [r7, #7]
 8001178:	4613      	mov	r3, r2
 800117a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HD44780_SetCursor+0x5c>)
 800117e:	f107 0408 	add.w	r4, r7, #8
 8001182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HD44780_SetCursor+0x60>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	79ba      	ldrb	r2, [r7, #6]
 800118e:	429a      	cmp	r2, r3
 8001190:	d303      	bcc.n	800119a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HD44780_SetCursor+0x60>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	3b01      	subs	r3, #1
 8001198:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	3318      	adds	r3, #24
 80011a0:	443b      	add	r3, r7
 80011a2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4413      	add	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 f85d 	bl	8001278 <SendCommand>
}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	0800da00 	.word	0x0800da00
 80011cc:	20000217 	.word	0x20000217

080011d0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HD44780_Display+0x28>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HD44780_Display+0x28>)
 80011e0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HD44780_Display+0x28>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 f843 	bl	8001278 <SendCommand>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000215 	.word	0x20000215

080011fc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	b25b      	sxtb	r3, r3
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	b25b      	sxtb	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f82a 	bl	8001278 <SendCommand>
  for (int i=0; i<8; i++)
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e009      	b.n	800123e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4413      	add	r3, r2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f82e 	bl	8001294 <SendChar>
  for (int i=0; i<8; i++)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b07      	cmp	r3, #7
 8001242:	ddf2      	ble.n	800122a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001256:	e006      	b.n	8001266 <HD44780_PrintStr+0x18>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f817 	bl	8001294 <SendChar>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f4      	bne.n	8001258 <HD44780_PrintStr+0xa>
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f812 	bl	80012b0 <Send>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <SendChar>:

static void SendChar(uint8_t ch)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2101      	movs	r1, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f804 	bl	80012b0 <Send>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f023 030f 	bic.w	r3, r3, #15
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f80b 	bl	80012f2 <Write4Bits>
  Write4Bits((lownib)|mode);
 80012dc:	7bba      	ldrb	r2, [r7, #14]
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f804 	bl	80012f2 <Write4Bits>
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f808 	bl	8001314 <ExpanderWrite>
  PulseEnable(value);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f820 	bl	800134c <PulseEnable>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af02      	add	r7, sp, #8
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <ExpanderWrite+0x30>)
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4313      	orrs	r3, r2
 8001326:	b2db      	uxtb	r3, r3
 8001328:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800132a:	f107 020f 	add.w	r2, r7, #15
 800132e:	230a      	movs	r3, #10
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2301      	movs	r3, #1
 8001334:	214e      	movs	r1, #78	; 0x4e
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <ExpanderWrite+0x34>)
 8001338:	f005 fb1c 	bl	8006974 <HAL_I2C_Master_Transmit>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000218 	.word	0x20000218
 8001348:	20000300 	.word	0x20000300

0800134c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ffd8 	bl	8001314 <ExpanderWrite>
  DelayUS(20);
 8001364:	2014      	movs	r0, #20
 8001366:	f000 f839 	bl	80013dc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f023 0304 	bic.w	r3, r3, #4
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ffce 	bl	8001314 <ExpanderWrite>
  DelayUS(20);
 8001378:	2014      	movs	r0, #20
 800137a:	f000 f82f 	bl	80013dc <DelayUS>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <DelayInit>:

static void DelayInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <DelayInit+0x4c>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <DelayInit+0x4c>)
 8001392:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001396:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <DelayInit+0x4c>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <DelayInit+0x4c>)
 800139e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <DelayInit+0x50>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <DelayInit+0x50>)
 80013aa:	f023 0301 	bic.w	r3, r3, #1
 80013ae:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <DelayInit+0x50>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <DelayInit+0x50>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <DelayInit+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80013c2:	bf00      	nop
  __ASM volatile ("NOP");
 80013c4:	bf00      	nop
  __ASM volatile ("NOP");
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000edf0 	.word	0xe000edf0
 80013d8:	e0001000 	.word	0xe0001000

080013dc <DelayUS>:

static void DelayUS(uint32_t us) {
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <DelayUS+0x44>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <DelayUS+0x48>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	0c9a      	lsrs	r2, r3, #18
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	fb02 f303 	mul.w	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <DelayUS+0x4c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <DelayUS+0x4c>)
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f6      	bhi.n	80013fe <DelayUS+0x22>
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000018 	.word	0x20000018
 8001424:	431bde83 	.word	0x431bde83
 8001428:	e0001000 	.word	0xe0001000

0800142c <microDelay>:
							/******************* FUNZIONE DELAY *******************/

// delay in microsecondi per il sensore DHT22

void microDelay (uint16_t delay)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <microDelay+0x30>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 800143e:	bf00      	nop
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <microDelay+0x30>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001446:	88fb      	ldrh	r3, [r7, #6]
 8001448:	429a      	cmp	r2, r3
 800144a:	d3f9      	bcc.n	8001440 <microDelay+0x14>
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000354 	.word	0x20000354

08001460 <DHT22_Start>:
  Tutte le informazioni sono rimandate al link https://www.micropeta.com/video48
 */


uint8_t DHT22_Start (uint32_t Pin,	GPIO_TypeDef *Port)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint8_t Response = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = Pin;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Port, &GPIO_InitStructPrivate); 			// set the pin as output
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f004 ff63 	bl	8006360 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (Port, Pin, 0);   				// pull the pin low
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	b29b      	uxth	r3, r3
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	6838      	ldr	r0, [r7, #0]
 80014a4:	f005 f908 	bl	80066b8 <HAL_GPIO_WritePin>
  microDelay (1300);   // wait for 1300us
 80014a8:	f240 5014 	movw	r0, #1300	; 0x514
 80014ac:	f7ff ffbe 	bl	800142c <microDelay>
  HAL_GPIO_WritePin (Port, Pin, 1);   				// pull the pin high
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f005 f8fd 	bl	80066b8 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 80014be:	201e      	movs	r0, #30
 80014c0:	f7ff ffb4 	bl	800142c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Port, &GPIO_InitStructPrivate); 			// set the pin as input
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f004 ff44 	bl	8006360 <HAL_GPIO_Init>
  microDelay (40);
 80014d8:	2028      	movs	r0, #40	; 0x28
 80014da:	f7ff ffa7 	bl	800142c <microDelay>
  if (!(HAL_GPIO_ReadPin (Port, Pin)))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	6838      	ldr	r0, [r7, #0]
 80014e6:	f005 f8cf 	bl	8006688 <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10d      	bne.n	800150c <DHT22_Start+0xac>
  {
    microDelay (80);
 80014f0:	2050      	movs	r0, #80	; 0x50
 80014f2:	f7ff ff9b 	bl	800142c <microDelay>
    if ((HAL_GPIO_ReadPin (Port, Pin))) Response = 1;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f005 f8c3 	bl	8006688 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <DHT22_Start+0xac>
 8001508:	2301      	movs	r3, #1
 800150a:	77fb      	strb	r3, [r7, #31]
  }
  pMillis = HAL_GetTick();
 800150c:	f004 fa36 	bl	800597c <HAL_GetTick>
 8001510:	4603      	mov	r3, r0
 8001512:	4a11      	ldr	r2, [pc, #68]	; (8001558 <DHT22_Start+0xf8>)
 8001514:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001516:	f004 fa31 	bl	800597c <HAL_GetTick>
 800151a:	4603      	mov	r3, r0
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <DHT22_Start+0xfc>)
 800151e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (Port, Pin)) && pMillis + 2 > cMillis)
 8001520:	e004      	b.n	800152c <DHT22_Start+0xcc>
  {
    cMillis = HAL_GetTick();
 8001522:	f004 fa2b 	bl	800597c <HAL_GetTick>
 8001526:	4603      	mov	r3, r0
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <DHT22_Start+0xfc>)
 800152a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (Port, Pin)) && pMillis + 2 > cMillis)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f005 f8a8 	bl	8006688 <HAL_GPIO_ReadPin>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <DHT22_Start+0xec>
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <DHT22_Start+0xf8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1c9a      	adds	r2, r3, #2
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <DHT22_Start+0xfc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8ea      	bhi.n	8001522 <DHT22_Start+0xc2>
  }
  return Response;
 800154c:	7ffb      	ldrb	r3, [r7, #31]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000508 	.word	0x20000508
 800155c:	2000050c 	.word	0x2000050c

08001560 <DHT22_Read>:

uint8_t DHT22_Read (uint32_t Pin,	GPIO_TypeDef *Port)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint8_t a,b;
  for (a=0;a<8;a++)
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
 800156e:	e069      	b.n	8001644 <DHT22_Read+0xe4>
  {
    pMillis = HAL_GetTick();
 8001570:	f004 fa04 	bl	800597c <HAL_GetTick>
 8001574:	4603      	mov	r3, r0
 8001576:	4a37      	ldr	r2, [pc, #220]	; (8001654 <DHT22_Read+0xf4>)
 8001578:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800157a:	f004 f9ff 	bl	800597c <HAL_GetTick>
 800157e:	4603      	mov	r3, r0
 8001580:	4a35      	ldr	r2, [pc, #212]	; (8001658 <DHT22_Read+0xf8>)
 8001582:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (Port, Pin)) && pMillis + 2 > cMillis)
 8001584:	e004      	b.n	8001590 <DHT22_Read+0x30>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001586:	f004 f9f9 	bl	800597c <HAL_GetTick>
 800158a:	4603      	mov	r3, r0
 800158c:	4a32      	ldr	r2, [pc, #200]	; (8001658 <DHT22_Read+0xf8>)
 800158e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (Port, Pin)) && pMillis + 2 > cMillis)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4619      	mov	r1, r3
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f005 f876 	bl	8006688 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d106      	bne.n	80015b0 <DHT22_Read+0x50>
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <DHT22_Read+0xf4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	1c9a      	adds	r2, r3, #2
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <DHT22_Read+0xf8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d8ea      	bhi.n	8001586 <DHT22_Read+0x26>
    }
    microDelay (40);   // wait for 40 us
 80015b0:	2028      	movs	r0, #40	; 0x28
 80015b2:	f7ff ff3b 	bl	800142c <microDelay>
    if (!(HAL_GPIO_ReadPin (Port, Pin)))   // if the pin is low
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f005 f863 	bl	8006688 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10e      	bne.n	80015e6 <DHT22_Read+0x86>
      b&= ~(1<<(7-a));
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2201      	movs	r2, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015de:	4013      	ands	r3, r2
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	73bb      	strb	r3, [r7, #14]
 80015e4:	e00b      	b.n	80015fe <DHT22_Read+0x9e>
    else
      b|= (1<<(7-a));
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	f1c3 0307 	rsb	r3, r3, #7
 80015ec:	2201      	movs	r2, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	b25a      	sxtb	r2, r3
 80015f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	73bb      	strb	r3, [r7, #14]
    pMillis = HAL_GetTick();
 80015fe:	f004 f9bd 	bl	800597c <HAL_GetTick>
 8001602:	4603      	mov	r3, r0
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <DHT22_Read+0xf4>)
 8001606:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001608:	f004 f9b8 	bl	800597c <HAL_GetTick>
 800160c:	4603      	mov	r3, r0
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <DHT22_Read+0xf8>)
 8001610:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (Port, Pin)) && pMillis + 2 > cMillis)
 8001612:	e004      	b.n	800161e <DHT22_Read+0xbe>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001614:	f004 f9b2 	bl	800597c <HAL_GetTick>
 8001618:	4603      	mov	r3, r0
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <DHT22_Read+0xf8>)
 800161c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (Port, Pin)) && pMillis + 2 > cMillis)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4619      	mov	r1, r3
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f005 f82f 	bl	8006688 <HAL_GPIO_ReadPin>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <DHT22_Read+0xde>
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <DHT22_Read+0xf4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1c9a      	adds	r2, r3, #2
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <DHT22_Read+0xf8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d8ea      	bhi.n	8001614 <DHT22_Read+0xb4>
  for (a=0;a<8;a++)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	3301      	adds	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	2b07      	cmp	r3, #7
 8001648:	d992      	bls.n	8001570 <DHT22_Read+0x10>
    }
  }
  return b;
 800164a:	7bbb      	ldrb	r3, [r7, #14]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000508 	.word	0x20000508
 8001658:	2000050c 	.word	0x2000050c

0800165c <Display_Temp>:
									/******************* DISPLAY LCD *******************/

// Questa funzione permette di mostrare sul display LCD i valori di temperatura e umidità

void Display_Temp (float Temp, float Rh)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b092      	sub	sp, #72	; 0x48
 8001660:	af00      	add	r7, sp, #0
 8001662:	ed87 0a01 	vstr	s0, [r7, #4]
 8001666:	edc7 0a00 	vstr	s1, [r7]
	char str[20] = {0};
 800166a:	2300      	movs	r3, #0
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
 800166e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
	char str1[20] = {0};
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]

	char str_esp[20] = {0};
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]

		HD44780_Init(2);
 80016a0:	2002      	movs	r0, #2
 80016a2:	f7ff fcc9 	bl	8001038 <HD44780_Init>
	    HD44780_Clear();
 80016a6:	f7ff fd4b 	bl	8001140 <HD44780_Clear>




	    HD44780_SetCursor(0,0);
 80016aa:	2100      	movs	r1, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff fd5d 	bl	800116c <HD44780_SetCursor>
	    HAL_Delay(20);
 80016b2:	2014      	movs	r0, #20
 80016b4:	f004 f96e 	bl	8005994 <HAL_Delay>
	    sprintf (str, "TempINT: %.1f gradi", Temp); 			//stampa temperatura
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7fe ff65 	bl	8000588 <__aeabi_f2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <Display_Temp+0xd8>)
 80016c8:	f008 fb9e 	bl	8009e08 <siprintf>
	    HD44780_PrintStr(str);
 80016cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fdbc 	bl	800124e <HD44780_PrintStr>

	    HD44780_SetCursor(0,1);
 80016d6:	2101      	movs	r1, #1
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff fd47 	bl	800116c <HD44780_SetCursor>
	    HAL_Delay(20);
 80016de:	2014      	movs	r0, #20
 80016e0:	f004 f958 	bl	8005994 <HAL_Delay>
	    sprintf (str1, "Umidita'INT: %.1f ", Rh); 				//stampa umidità
 80016e4:	6838      	ldr	r0, [r7, #0]
 80016e6:	f7fe ff4f 	bl	8000588 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	f107 0020 	add.w	r0, r7, #32
 80016f2:	4911      	ldr	r1, [pc, #68]	; (8001738 <Display_Temp+0xdc>)
 80016f4:	f008 fb88 	bl	8009e08 <siprintf>
	    HD44780_PrintStr(str1);
 80016f8:	f107 0320 	add.w	r3, r7, #32
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fda6 	bl	800124e <HD44780_PrintStr>
	    HD44780_PrintStr("%");
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <Display_Temp+0xe0>)
 8001704:	f7ff fda3 	bl	800124e <HD44780_PrintStr>

	    sprintf (str_esp,"%.1f", Temp);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7fe ff3d 	bl	8000588 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	f107 000c 	add.w	r0, r7, #12
 8001716:	490a      	ldr	r1, [pc, #40]	; (8001740 <Display_Temp+0xe4>)
 8001718:	f008 fb76 	bl	8009e08 <siprintf>
	    HAL_UART_Transmit(&huart3, str_esp, sizeof(str_esp), 100);		// trasmissione alla ESP
 800171c:	f107 010c 	add.w	r1, r7, #12
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	2214      	movs	r2, #20
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <Display_Temp+0xe8>)
 8001726:	f007 f948 	bl	80089ba <HAL_UART_Transmit>


}
 800172a:	bf00      	nop
 800172c:	3748      	adds	r7, #72	; 0x48
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0800da10 	.word	0x0800da10
 8001738:	0800da24 	.word	0x0800da24
 800173c:	0800da38 	.word	0x0800da38
 8001740:	0800da3c 	.word	0x0800da3c
 8001744:	200004bc 	.word	0x200004bc

08001748 <Display_Temp_EXT>:

void Display_Temp_EXT (float Temp_EXT, float Rh_EXT)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0
 800174e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001752:	edc7 0a00 	vstr	s1, [r7]
	char str[20] = {0};
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
	char str1[20] = {0};
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]


	HD44780_Init(2);
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fc5c 	bl	8001038 <HD44780_Init>
	HD44780_Clear();
 8001780:	f7ff fcde 	bl	8001140 <HD44780_Clear>




	HD44780_SetCursor(0,0);
 8001784:	2100      	movs	r1, #0
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fcf0 	bl	800116c <HD44780_SetCursor>
	HAL_Delay(20);
 800178c:	2014      	movs	r0, #20
 800178e:	f004 f901 	bl	8005994 <HAL_Delay>
	sprintf (str, "TempEXT:%.1f gradi", Temp_EXT); 				//stampa temperatura
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7fe fef8 	bl	8000588 <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	f107 001c 	add.w	r0, r7, #28
 80017a0:	4912      	ldr	r1, [pc, #72]	; (80017ec <Display_Temp_EXT+0xa4>)
 80017a2:	f008 fb31 	bl	8009e08 <siprintf>
	HD44780_PrintStr(str);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fd4f 	bl	800124e <HD44780_PrintStr>

	HD44780_SetCursor(0,1);
 80017b0:	2101      	movs	r1, #1
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fcda 	bl	800116c <HD44780_SetCursor>
	HAL_Delay(20);
 80017b8:	2014      	movs	r0, #20
 80017ba:	f004 f8eb 	bl	8005994 <HAL_Delay>
	sprintf (str1, "Umidita'EXT: %.1f ", Rh_EXT); 				//stampa umidità
 80017be:	6838      	ldr	r0, [r7, #0]
 80017c0:	f7fe fee2 	bl	8000588 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	f107 0008 	add.w	r0, r7, #8
 80017cc:	4908      	ldr	r1, [pc, #32]	; (80017f0 <Display_Temp_EXT+0xa8>)
 80017ce:	f008 fb1b 	bl	8009e08 <siprintf>
	HD44780_PrintStr(str1);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fd39 	bl	800124e <HD44780_PrintStr>
	HD44780_PrintStr("%");
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <Display_Temp_EXT+0xac>)
 80017de:	f7ff fd36 	bl	800124e <HD44780_PrintStr>


}
 80017e2:	bf00      	nop
 80017e4:	3730      	adds	r7, #48	; 0x30
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	0800da44 	.word	0x0800da44
 80017f0:	0800da58 	.word	0x0800da58
 80017f4:	0800da38 	.word	0x0800da38

080017f8 <FireExit>:
 * La Funzione FireExit() serve a definire quali eventi possono far scattare una procedura di emergenza, che permetta di poter gestire
 * il possibile problema senza interrompere il corretto funzionamento della Camera. I due eventi sono il doppio click del joystick e
 * la rilevazione dell'apertura della porta durante il ciclo di lavoro.
 */

void FireExit(){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0


	if(HAL_GPIO_ReadPin(TASTO_JOYSTICK_GPIO_Port, TASTO_JOYSTICK_Pin)==GPIO_PIN_RESET) // primo click
 80017fc:	2110      	movs	r1, #16
 80017fe:	4849      	ldr	r0, [pc, #292]	; (8001924 <FireExit+0x12c>)
 8001800:	f004 ff42 	bl	8006688 <HAL_GPIO_ReadPin>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d145      	bne.n	8001896 <FireExit+0x9e>
	{
		HAL_Delay(2000);
 800180a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800180e:	f004 f8c1 	bl	8005994 <HAL_Delay>
		if(HAL_GPIO_ReadPin(TASTO_JOYSTICK_GPIO_Port, TASTO_JOYSTICK_Pin)==GPIO_PIN_RESET) // secondo click da TENERE PREMUTO
 8001812:	2110      	movs	r1, #16
 8001814:	4843      	ldr	r0, [pc, #268]	; (8001924 <FireExit+0x12c>)
 8001816:	f004 ff37 	bl	8006688 <HAL_GPIO_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d13a      	bne.n	8001896 <FireExit+0x9e>
		{
			fire = 1;
 8001820:	4b41      	ldr	r3, [pc, #260]	; (8001928 <FireExit+0x130>)
 8001822:	2201      	movs	r2, #1
 8001824:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10); 	// PELTIER SPENTA
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <FireExit+0x134>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	220a      	movs	r2, #10
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 1000); 	// PELTIER HOT FAN  ACCESA
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <FireExit+0x134>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001836:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1000); 	// PELTIER COLD FAN ACCESA
 8001838:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <FireExit+0x138>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001840:	635a      	str	r2, [r3, #52]	; 0x34

			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000); 	// PTC FAN ACCESA
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <FireExit+0x138>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); 	// PTC SPENTA
 800184c:	4b39      	ldr	r3, [pc, #228]	; (8001934 <FireExit+0x13c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	220a      	movs	r2, #10
 8001852:	635a      	str	r2, [r3, #52]	; 0x34

			HD44780_Init(2);
 8001854:	2002      	movs	r0, #2
 8001856:	f7ff fbef 	bl	8001038 <HD44780_Init>
			HD44780_Clear();
 800185a:	f7ff fc71 	bl	8001140 <HD44780_Clear>
			HD44780_SetCursor(0,1);
 800185e:	2101      	movs	r1, #1
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fc83 	bl	800116c <HD44780_SetCursor>
			HAL_Delay(20);
 8001866:	2014      	movs	r0, #20
 8001868:	f004 f894 	bl	8005994 <HAL_Delay>
			HD44780_PrintStr("INTERRUZIONE! ");
 800186c:	4832      	ldr	r0, [pc, #200]	; (8001938 <FireExit+0x140>)
 800186e:	f7ff fcee 	bl	800124e <HD44780_PrintStr>
			HAL_Delay(500);
 8001872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001876:	f004 f88d 	bl	8005994 <HAL_Delay>

			scelta = 0;								//imposto scelta = 0 per non uscire dal menù
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <FireExit+0x144>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
			HAL_Delay(300);
 8001880:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001884:	f004 f886 	bl	8005994 <HAL_Delay>
			mode = 0;								//imposto mode = 0 per uscire dalla modalità  in esecuzione
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <FireExit+0x148>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
			HAL_Delay(300);
 800188e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001892:	f004 f87f 	bl	8005994 <HAL_Delay>


		}
	}

	if(HAL_GPIO_ReadPin(STATO_PORTA_GPIO_Port, STATO_PORTA_Pin)==GPIO_PIN_SET) //Porta Aperta
 8001896:	2110      	movs	r1, #16
 8001898:	482a      	ldr	r0, [pc, #168]	; (8001944 <FireExit+0x14c>)
 800189a:	f004 fef5 	bl	8006688 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d13d      	bne.n	8001920 <FireExit+0x128>
	{
		fire = 1;
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <FireExit+0x130>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10); 	// PELTIER SPENTA
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <FireExit+0x134>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	220a      	movs	r2, #10
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 1000); 	// PELTIER HOT FAN  ACCESA
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <FireExit+0x134>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1000); 	// PELTIER COLD FAN ACCESA
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <FireExit+0x138>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018c4:	635a      	str	r2, [r3, #52]	; 0x34

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000); 	// PTC FAN	ACCESA
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <FireExit+0x138>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); 	// PTC	SPENTA
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <FireExit+0x13c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	220a      	movs	r2, #10
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_Delay(200);
 80018d8:	20c8      	movs	r0, #200	; 0xc8
 80018da:	f004 f85b 	bl	8005994 <HAL_Delay>
		HD44780_Init(2);
 80018de:	2002      	movs	r0, #2
 80018e0:	f7ff fbaa 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 80018e4:	f7ff fc2c 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,1);
 80018e8:	2101      	movs	r1, #1
 80018ea:	2000      	movs	r0, #0
 80018ec:	f7ff fc3e 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 80018f0:	2014      	movs	r0, #20
 80018f2:	f004 f84f 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("INTERRUZIONE! ");
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <FireExit+0x140>)
 80018f8:	f7ff fca9 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 80018fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001900:	f004 f848 	bl	8005994 <HAL_Delay>

		scelta = 0;							//imposto scelta = 0 per non uscire dal menù
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <FireExit+0x144>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
		HAL_Delay(300);
 800190a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800190e:	f004 f841 	bl	8005994 <HAL_Delay>
		mode = 0;							//imposto mode = 0 per uscire dalla modalità in esecuzione
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <FireExit+0x148>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
		HAL_Delay(300);
 8001918:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800191c:	f004 f83a 	bl	8005994 <HAL_Delay>

	}
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020800 	.word	0x40020800
 8001928:	200005b4 	.word	0x200005b4
 800192c:	2000039c 	.word	0x2000039c
 8001930:	200003e4 	.word	0x200003e4
 8001934:	20000474 	.word	0x20000474
 8001938:	0800da6c 	.word	0x0800da6c
 800193c:	200005bc 	.word	0x200005bc
 8001940:	20000534 	.word	0x20000534
 8001944:	40020400 	.word	0x40020400

08001948 <Modalita>:



										/******************* MODALITÀ *******************/

void Modalita (int mode,float tCelsius, float RH){
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	ed87 0a02 	vstr	s0, [r7, #8]
 8001954:	edc7 0a01 	vstr	s1, [r7, #4]

	tExt = tCelsius_EXT;
 8001958:	4b82      	ldr	r3, [pc, #520]	; (8001b64 <Modalita+0x21c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a82      	ldr	r2, [pc, #520]	; (8001b68 <Modalita+0x220>)
 800195e:	6013      	str	r3, [r2, #0]

	while(HAL_GPIO_ReadPin(STATO_PORTA_GPIO_Port, STATO_PORTA_Pin)==GPIO_PIN_SET) //Porta Aperta
 8001960:	e015      	b.n	800198e <Modalita+0x46>
	{
		HAL_Delay(200);
 8001962:	20c8      	movs	r0, #200	; 0xc8
 8001964:	f004 f816 	bl	8005994 <HAL_Delay>
		HD44780_Init(2);
 8001968:	2002      	movs	r0, #2
 800196a:	f7ff fb65 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 800196e:	f7ff fbe7 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8001972:	2100      	movs	r1, #0
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fbf9 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 800197a:	2014      	movs	r0, #20
 800197c:	f004 f80a 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("Chiudere la porta! ");
 8001980:	487a      	ldr	r0, [pc, #488]	; (8001b6c <Modalita+0x224>)
 8001982:	f7ff fc64 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 8001986:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800198a:	f004 f803 	bl	8005994 <HAL_Delay>
	while(HAL_GPIO_ReadPin(STATO_PORTA_GPIO_Port, STATO_PORTA_Pin)==GPIO_PIN_SET) //Porta Aperta
 800198e:	2110      	movs	r1, #16
 8001990:	4877      	ldr	r0, [pc, #476]	; (8001b70 <Modalita+0x228>)
 8001992:	f004 fe79 	bl	8006688 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b01      	cmp	r3, #1
 800199a:	d0e2      	beq.n	8001962 <Modalita+0x1a>

	}

	while(mode==1)			 //modalità raggiungimento temperatura minima
 800199c:	e30f      	b.n	8001fbe <Modalita+0x676>
	{
		while(tCelsius>T_Cold) //comparo la temperatura interna della camera con quella da raggiungere. Se la prima è maggiore --> bisogna raffreddare --> accendo le Peltier
		{
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 1000); // PELTIER ACCESA, valore del compare alto (1000)
 800199e:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <Modalita+0x22c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a6:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 1000); // PELTIER HOT FAN  ACCESA
 80019a8:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <Modalita+0x22c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1000); // PELTIER COLD FAN ACCESA
 80019b2:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <Modalita+0x230>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019ba:	635a      	str	r2, [r3, #52]	; 0x34

			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 10); // PTC FAN	SPENTA
 80019bc:	4b6e      	ldr	r3, [pc, #440]	; (8001b78 <Modalita+0x230>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	220a      	movs	r2, #10
 80019c2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); // PTC	SPENTA
 80019c4:	4b6d      	ldr	r3, [pc, #436]	; (8001b7c <Modalita+0x234>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	220a      	movs	r2, #10
 80019ca:	635a      	str	r2, [r3, #52]	; 0x34


			HD44780_Init(2);
 80019cc:	2002      	movs	r0, #2
 80019ce:	f7ff fb33 	bl	8001038 <HD44780_Init>
			HD44780_Clear();
 80019d2:	f7ff fbb5 	bl	8001140 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 80019d6:	2100      	movs	r1, #0
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff fbc7 	bl	800116c <HD44780_SetCursor>
			HAL_Delay(20);
 80019de:	2014      	movs	r0, #20
 80019e0:	f003 ffd8 	bl	8005994 <HAL_Delay>
			HD44780_PrintStr("Peltier Accesa ");
 80019e4:	4866      	ldr	r0, [pc, #408]	; (8001b80 <Modalita+0x238>)
 80019e6:	f7ff fc32 	bl	800124e <HD44780_PrintStr>
			HAL_Delay(500);
 80019ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ee:	f003 ffd1 	bl	8005994 <HAL_Delay>


			/********************************* LETTURA TEMPERATURA ***************************/

			if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 80019f2:	4964      	ldr	r1, [pc, #400]	; (8001b84 <Modalita+0x23c>)
 80019f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019f8:	f7ff fd32 	bl	8001460 <DHT22_Start>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8088 	beq.w	8001b14 <Modalita+0x1cc>
			{
				RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8001a04:	495f      	ldr	r1, [pc, #380]	; (8001b84 <Modalita+0x23c>)
 8001a06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a0a:	f7ff fda9 	bl	8001560 <DHT22_Read>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <Modalita+0x240>)
 8001a14:	701a      	strb	r2, [r3, #0]
				RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8001a16:	495b      	ldr	r1, [pc, #364]	; (8001b84 <Modalita+0x23c>)
 8001a18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a1c:	f7ff fda0 	bl	8001560 <DHT22_Read>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <Modalita+0x244>)
 8001a26:	701a      	strb	r2, [r3, #0]
				TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8001a28:	4956      	ldr	r1, [pc, #344]	; (8001b84 <Modalita+0x23c>)
 8001a2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a2e:	f7ff fd97 	bl	8001560 <DHT22_Read>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b56      	ldr	r3, [pc, #344]	; (8001b90 <Modalita+0x248>)
 8001a38:	701a      	strb	r2, [r3, #0]
				TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8001a3a:	4952      	ldr	r1, [pc, #328]	; (8001b84 <Modalita+0x23c>)
 8001a3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a40:	f7ff fd8e 	bl	8001560 <DHT22_Read>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <Modalita+0x24c>)
 8001a4a:	701a      	strb	r2, [r3, #0]
				SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8001a4c:	494d      	ldr	r1, [pc, #308]	; (8001b84 <Modalita+0x23c>)
 8001a4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a52:	f7ff fd85 	bl	8001560 <DHT22_Read>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b4f      	ldr	r3, [pc, #316]	; (8001b98 <Modalita+0x250>)
 8001a5c:	701a      	strb	r2, [r3, #0]
				CHECK = RH1 + RH2 + TC1 + TC2;
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <Modalita+0x240>)
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <Modalita+0x244>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <Modalita+0x248>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b48      	ldr	r3, [pc, #288]	; (8001b94 <Modalita+0x24c>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <Modalita+0x254>)
 8001a7c:	701a      	strb	r2, [r3, #0]
				if (CHECK == SUM)
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <Modalita+0x254>)
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	4b45      	ldr	r3, [pc, #276]	; (8001b98 <Modalita+0x250>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d144      	bne.n	8001b14 <Modalita+0x1cc>
				{
					if (TC1>127) // If TC1=10000000, negative temperature
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <Modalita+0x248>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da0e      	bge.n	8001ab2 <Modalita+0x16a>
					{
						tCelsius = (float)TC2/10*(-1);
 8001a94:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <Modalita+0x24c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa8:	eef1 7a67 	vneg.f32	s15, s15
 8001aac:	edc7 7a02 	vstr	s15, [r7, #8]
 8001ab0:	e00f      	b.n	8001ad2 <Modalita+0x18a>
					}
					else
					{
						tCelsius = (float)((TC1<<8)|TC2)/10;
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <Modalita+0x248>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <Modalita+0x24c>)
 8001aba:	7812      	ldrb	r2, [r2, #0]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ace:	edc7 7a02 	vstr	s15, [r7, #8]
					}
					tFahrenheit = tCelsius * 9/5 + 32;
 8001ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ad6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001ada:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ade:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ba0 <Modalita+0x258>
 8001aea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <Modalita+0x25c>)
 8001af0:	edc3 7a00 	vstr	s15, [r3]
					RH = (float) ((RH1<<8)|RH2)/10;
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <Modalita+0x240>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <Modalita+0x244>)
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b10:	edc7 7a01 	vstr	s15, [r7, #4]


			/********************************* END LETTURA TEMPERATURA ***************************/


			HAL_Delay(200);
 8001b14:	20c8      	movs	r0, #200	; 0xc8
 8001b16:	f003 ff3d 	bl	8005994 <HAL_Delay>
			Display_Temp(tCelsius, RH);				// stampo temperatura e umidità interne su LCD
 8001b1a:	edd7 0a01 	vldr	s1, [r7, #4]
 8001b1e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001b22:	f7ff fd9b 	bl	800165c <Display_Temp>
			HAL_Delay(1000);
 8001b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b2a:	f003 ff33 	bl	8005994 <HAL_Delay>
			Display_Temp_EXT(tExt, RH_EXT);			// stampo temperatura e umidità esterne su LCD
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <Modalita+0x220>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <Modalita+0x260>)
 8001b36:	ed93 7a00 	vldr	s14, [r3]
 8001b3a:	eef0 0a47 	vmov.f32	s1, s14
 8001b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b42:	f7ff fe01 	bl	8001748 <Display_Temp_EXT>
			HAL_Delay(1000);
 8001b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b4a:	f003 ff23 	bl	8005994 <HAL_Delay>


					/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/


			FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 8001b4e:	f7ff fe53 	bl	80017f8 <FireExit>


			if(fire==1)
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <Modalita+0x264>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	f040 8102 	bne.w	8001d60 <Modalita+0x418>
			{
				fire = 0; 			// ripristino il flag
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <Modalita+0x264>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
				break; 				// torno nel menu
 8001b62:	e127      	b.n	8001db4 <Modalita+0x46c>
 8001b64:	20000524 	.word	0x20000524
 8001b68:	20000538 	.word	0x20000538
 8001b6c:	0800da7c 	.word	0x0800da7c
 8001b70:	40020400 	.word	0x40020400
 8001b74:	2000039c 	.word	0x2000039c
 8001b78:	200003e4 	.word	0x200003e4
 8001b7c:	20000474 	.word	0x20000474
 8001b80:	0800da90 	.word	0x0800da90
 8001b84:	40020000 	.word	0x40020000
 8001b88:	20000500 	.word	0x20000500
 8001b8c:	20000501 	.word	0x20000501
 8001b90:	20000502 	.word	0x20000502
 8001b94:	20000503 	.word	0x20000503
 8001b98:	20000504 	.word	0x20000504
 8001b9c:	20000505 	.word	0x20000505
 8001ba0:	42000000 	.word	0x42000000
 8001ba4:	20000514 	.word	0x20000514
 8001ba8:	2000052c 	.word	0x2000052c
 8001bac:	200005b4 	.word	0x200005b4
			{

				/****************** COMANDI APERTURA SERVO *********************************/


				HAL_Delay(500);
 8001bb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bb4:	f003 feee 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 230); 			//SERVO 1 ALTO
 8001bb8:	4bbd      	ldr	r3, [pc, #756]	; (8001eb0 <Modalita+0x568>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	22e6      	movs	r2, #230	; 0xe6
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 8001bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bc4:	f003 fee6 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 230);			// SERVO 2 BASSO
 8001bc8:	4bb9      	ldr	r3, [pc, #740]	; (8001eb0 <Modalita+0x568>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	22e6      	movs	r2, #230	; 0xe6
 8001bce:	639a      	str	r2, [r3, #56]	; 0x38



				/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

				FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 8001bd0:	f7ff fe12 	bl	80017f8 <FireExit>


				if(fire==1)
 8001bd4:	4bb7      	ldr	r3, [pc, #732]	; (8001eb4 <Modalita+0x56c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	f000 80cd 	beq.w	8001d78 <Modalita+0x430>



						/******************* END USCITA CON DOPPIO CLICK ***************/

				HD44780_Init(2);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7ff fa2a 	bl	8001038 <HD44780_Init>
				HD44780_Clear();
 8001be4:	f7ff faac 	bl	8001140 <HD44780_Clear>
				HD44780_SetCursor(0,0);
 8001be8:	2100      	movs	r1, #0
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fabe 	bl	800116c <HD44780_SetCursor>
				HAL_Delay(20);
 8001bf0:	2014      	movs	r0, #20
 8001bf2:	f003 fecf 	bl	8005994 <HAL_Delay>
				HD44780_PrintStr("Peltier Accesa ");
 8001bf6:	48b0      	ldr	r0, [pc, #704]	; (8001eb8 <Modalita+0x570>)
 8001bf8:	f7ff fb29 	bl	800124e <HD44780_PrintStr>
				HAL_Delay(500);
 8001bfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c00:	f003 fec8 	bl	8005994 <HAL_Delay>

				/********************************* LETTURA TEMPERATURA ***************************/

				if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8001c04:	49ad      	ldr	r1, [pc, #692]	; (8001ebc <Modalita+0x574>)
 8001c06:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c0a:	f7ff fc29 	bl	8001460 <DHT22_Start>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8088 	beq.w	8001d26 <Modalita+0x3de>
				{
					RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8001c16:	49a9      	ldr	r1, [pc, #676]	; (8001ebc <Modalita+0x574>)
 8001c18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c1c:	f7ff fca0 	bl	8001560 <DHT22_Read>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461a      	mov	r2, r3
 8001c24:	4ba6      	ldr	r3, [pc, #664]	; (8001ec0 <Modalita+0x578>)
 8001c26:	701a      	strb	r2, [r3, #0]
					RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8001c28:	49a4      	ldr	r1, [pc, #656]	; (8001ebc <Modalita+0x574>)
 8001c2a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c2e:	f7ff fc97 	bl	8001560 <DHT22_Read>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	4ba3      	ldr	r3, [pc, #652]	; (8001ec4 <Modalita+0x57c>)
 8001c38:	701a      	strb	r2, [r3, #0]
					TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8001c3a:	49a0      	ldr	r1, [pc, #640]	; (8001ebc <Modalita+0x574>)
 8001c3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c40:	f7ff fc8e 	bl	8001560 <DHT22_Read>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b9f      	ldr	r3, [pc, #636]	; (8001ec8 <Modalita+0x580>)
 8001c4a:	701a      	strb	r2, [r3, #0]
					TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8001c4c:	499b      	ldr	r1, [pc, #620]	; (8001ebc <Modalita+0x574>)
 8001c4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c52:	f7ff fc85 	bl	8001560 <DHT22_Read>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b9c      	ldr	r3, [pc, #624]	; (8001ecc <Modalita+0x584>)
 8001c5c:	701a      	strb	r2, [r3, #0]
					SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8001c5e:	4997      	ldr	r1, [pc, #604]	; (8001ebc <Modalita+0x574>)
 8001c60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c64:	f7ff fc7c 	bl	8001560 <DHT22_Read>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b98      	ldr	r3, [pc, #608]	; (8001ed0 <Modalita+0x588>)
 8001c6e:	701a      	strb	r2, [r3, #0]
					CHECK = RH1 + RH2 + TC1 + TC2;
 8001c70:	4b93      	ldr	r3, [pc, #588]	; (8001ec0 <Modalita+0x578>)
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	4b93      	ldr	r3, [pc, #588]	; (8001ec4 <Modalita+0x57c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <Modalita+0x580>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b91      	ldr	r3, [pc, #580]	; (8001ecc <Modalita+0x584>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <Modalita+0x58c>)
 8001c8e:	701a      	strb	r2, [r3, #0]
					if (CHECK == SUM)
 8001c90:	4b90      	ldr	r3, [pc, #576]	; (8001ed4 <Modalita+0x58c>)
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	4b8e      	ldr	r3, [pc, #568]	; (8001ed0 <Modalita+0x588>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d144      	bne.n	8001d26 <Modalita+0x3de>
					{
						if (TC1>127) // If TC1=10000000, negative temperature
 8001c9c:	4b8a      	ldr	r3, [pc, #552]	; (8001ec8 <Modalita+0x580>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	da0e      	bge.n	8001cc4 <Modalita+0x37c>
						{
							tCelsius = (float)TC2/10*(-1);
 8001ca6:	4b89      	ldr	r3, [pc, #548]	; (8001ecc <Modalita+0x584>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cb2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cba:	eef1 7a67 	vneg.f32	s15, s15
 8001cbe:	edc7 7a02 	vstr	s15, [r7, #8]
 8001cc2:	e00f      	b.n	8001ce4 <Modalita+0x39c>
						}
						else
						{
							tCelsius = (float)((TC1<<8)|TC2)/10;
 8001cc4:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <Modalita+0x580>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	4a80      	ldr	r2, [pc, #512]	; (8001ecc <Modalita+0x584>)
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ce0:	edc7 7a02 	vstr	s15, [r7, #8]
						}
						tFahrenheit = tCelsius * 9/5 + 32;
 8001ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001cec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cf0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cf8:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001ed8 <Modalita+0x590>
 8001cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d00:	4b76      	ldr	r3, [pc, #472]	; (8001edc <Modalita+0x594>)
 8001d02:	edc3 7a00 	vstr	s15, [r3]
						RH = (float) ((RH1<<8)|RH2)/10;
 8001d06:	4b6e      	ldr	r3, [pc, #440]	; (8001ec0 <Modalita+0x578>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	4a6d      	ldr	r2, [pc, #436]	; (8001ec4 <Modalita+0x57c>)
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	ee07 3a90 	vmov	s15, r3
 8001d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d22:	edc7 7a01 	vstr	s15, [r7, #4]


				/********************************* END LETTURA TEMPERATURA ***************************/


				HAL_Delay(200);
 8001d26:	20c8      	movs	r0, #200	; 0xc8
 8001d28:	f003 fe34 	bl	8005994 <HAL_Delay>
				Display_Temp(tCelsius, RH);		// stampo temperatura e umidità interne su LCD
 8001d2c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d30:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d34:	f7ff fc92 	bl	800165c <Display_Temp>
				HAL_Delay(1000);
 8001d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d3c:	f003 fe2a 	bl	8005994 <HAL_Delay>
				Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 8001d40:	4b67      	ldr	r3, [pc, #412]	; (8001ee0 <Modalita+0x598>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <Modalita+0x59c>)
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	eef0 0a47 	vmov.f32	s1, s14
 8001d50:	eeb0 0a67 	vmov.f32	s0, s15
 8001d54:	f7ff fcf8 	bl	8001748 <Display_Temp_EXT>
				HAL_Delay(1000);
 8001d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5c:	f003 fe1a 	bl	8005994 <HAL_Delay>
			while(tCelsius>tExt)	// finché la temperatura interna è maggiore di quella esterna mantengo gli sportellini aperti per velocizzare il raffreddamento
 8001d60:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <Modalita+0x598>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	f73f af1d 	bgt.w	8001bb0 <Modalita+0x268>
 8001d76:	e000      	b.n	8001d7a <Modalita+0x432>
					break; 			// torno nel menu
 8001d78:	bf00      	nop

			}

			HAL_Delay(500);
 8001d7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7e:	f003 fe09 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 700); 		//SERVO 1 ALTO
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <Modalita+0x568>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(500);
 8001d8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d90:	f003 fe00 	bl	8005994 <HAL_Delay>
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 700);		// SERVO 2 BASSO
 8001d94:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <Modalita+0x568>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
		while(tCelsius>T_Cold) //comparo la temperatura interna della camera con quella da raggiungere. Se la prima è maggiore --> bisogna raffreddare --> accendo le Peltier
 8001d9e:	4b52      	ldr	r3, [pc, #328]	; (8001ee8 <Modalita+0x5a0>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001da8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	f73f adf5 	bgt.w	800199e <Modalita+0x56>
		}

		//esco dall'IF non appena la temperatura interna sarà uguale alla temperatura da raggiungere
		//a questo punto spengo le peltier e lascio accese solo le ventole

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10);	//SPENGO PELTIER: valore compare basso = 10 (NON ZERO PERCHÈ VIENE ELABORATO COME ALTRO ESTREMO E QUINDI RIMANGONO ACCESE)
 8001db4:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <Modalita+0x5a4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	220a      	movs	r2, #10
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34


		HD44780_Init(2);
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f7ff f93b 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8001dc2:	f7ff f9bd 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7ff f9cf 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 8001dce:	2014      	movs	r0, #20
 8001dd0:	f003 fde0 	bl	8005994 <HAL_Delay>
		sprintf (strc, "%.1f gradi raggiunti", T_Cold); 			//stampa temperatura
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <Modalita+0x5a0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbd5 	bl	8000588 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4943      	ldr	r1, [pc, #268]	; (8001ef0 <Modalita+0x5a8>)
 8001de4:	4843      	ldr	r0, [pc, #268]	; (8001ef4 <Modalita+0x5ac>)
 8001de6:	f008 f80f 	bl	8009e08 <siprintf>
		HD44780_PrintStr(strc);
 8001dea:	4842      	ldr	r0, [pc, #264]	; (8001ef4 <Modalita+0x5ac>)
 8001dec:	f7ff fa2f 	bl	800124e <HD44780_PrintStr>

		/********************************* LETTURA TEMPERATURA ***************************/

		if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8001df0:	4932      	ldr	r1, [pc, #200]	; (8001ebc <Modalita+0x574>)
 8001df2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001df6:	f7ff fb33 	bl	8001460 <DHT22_Start>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80ac 	beq.w	8001f5a <Modalita+0x612>
		{
			RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8001e02:	492e      	ldr	r1, [pc, #184]	; (8001ebc <Modalita+0x574>)
 8001e04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e08:	f7ff fbaa 	bl	8001560 <DHT22_Read>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <Modalita+0x578>)
 8001e12:	701a      	strb	r2, [r3, #0]
			RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8001e14:	4929      	ldr	r1, [pc, #164]	; (8001ebc <Modalita+0x574>)
 8001e16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e1a:	f7ff fba1 	bl	8001560 <DHT22_Read>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <Modalita+0x57c>)
 8001e24:	701a      	strb	r2, [r3, #0]
			TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8001e26:	4925      	ldr	r1, [pc, #148]	; (8001ebc <Modalita+0x574>)
 8001e28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e2c:	f7ff fb98 	bl	8001560 <DHT22_Read>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <Modalita+0x580>)
 8001e36:	701a      	strb	r2, [r3, #0]
			TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8001e38:	4920      	ldr	r1, [pc, #128]	; (8001ebc <Modalita+0x574>)
 8001e3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e3e:	f7ff fb8f 	bl	8001560 <DHT22_Read>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <Modalita+0x584>)
 8001e48:	701a      	strb	r2, [r3, #0]
			SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8001e4a:	491c      	ldr	r1, [pc, #112]	; (8001ebc <Modalita+0x574>)
 8001e4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e50:	f7ff fb86 	bl	8001560 <DHT22_Read>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <Modalita+0x588>)
 8001e5a:	701a      	strb	r2, [r3, #0]
			CHECK = RH1 + RH2 + TC1 + TC2;
 8001e5c:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <Modalita+0x578>)
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <Modalita+0x57c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <Modalita+0x580>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <Modalita+0x584>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4413      	add	r3, r2
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <Modalita+0x58c>)
 8001e7a:	701a      	strb	r2, [r3, #0]
			if (CHECK == SUM)
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <Modalita+0x58c>)
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <Modalita+0x588>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d168      	bne.n	8001f5a <Modalita+0x612>
			{
				if (TC1>127) // If TC1=10000000, negative temperature
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <Modalita+0x580>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da32      	bge.n	8001ef8 <Modalita+0x5b0>
				{
					tCelsius = (float)TC2/10*(-1);
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <Modalita+0x584>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e9e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ea6:	eef1 7a67 	vneg.f32	s15, s15
 8001eaa:	edc7 7a02 	vstr	s15, [r7, #8]
 8001eae:	e033      	b.n	8001f18 <Modalita+0x5d0>
 8001eb0:	2000042c 	.word	0x2000042c
 8001eb4:	200005b4 	.word	0x200005b4
 8001eb8:	0800da90 	.word	0x0800da90
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	20000500 	.word	0x20000500
 8001ec4:	20000501 	.word	0x20000501
 8001ec8:	20000502 	.word	0x20000502
 8001ecc:	20000503 	.word	0x20000503
 8001ed0:	20000504 	.word	0x20000504
 8001ed4:	20000505 	.word	0x20000505
 8001ed8:	42000000 	.word	0x42000000
 8001edc:	20000514 	.word	0x20000514
 8001ee0:	20000538 	.word	0x20000538
 8001ee4:	2000052c 	.word	0x2000052c
 8001ee8:	20000010 	.word	0x20000010
 8001eec:	2000039c 	.word	0x2000039c
 8001ef0:	0800daa0 	.word	0x0800daa0
 8001ef4:	2000053c 	.word	0x2000053c
				}
				else
				{
					tCelsius = (float)((TC1<<8)|TC2)/10;
 8001ef8:	4ba4      	ldr	r3, [pc, #656]	; (800218c <Modalita+0x844>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	4aa4      	ldr	r2, [pc, #656]	; (8002190 <Modalita+0x848>)
 8001f00:	7812      	ldrb	r2, [r2, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f14:	edc7 7a02 	vstr	s15, [r7, #8]
				}
				tFahrenheit = tCelsius * 9/5 + 32;
 8001f18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f1c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001f20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f24:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2c:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8002194 <Modalita+0x84c>
 8001f30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f34:	4b98      	ldr	r3, [pc, #608]	; (8002198 <Modalita+0x850>)
 8001f36:	edc3 7a00 	vstr	s15, [r3]
				RH = (float) ((RH1<<8)|RH2)/10;
 8001f3a:	4b98      	ldr	r3, [pc, #608]	; (800219c <Modalita+0x854>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	4a97      	ldr	r2, [pc, #604]	; (80021a0 <Modalita+0x858>)
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f4e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f56:	edc7 7a01 	vstr	s15, [r7, #4]


		/********************************* END LETTURA TEMPERATURA ***************************/


		HAL_Delay(200);
 8001f5a:	20c8      	movs	r0, #200	; 0xc8
 8001f5c:	f003 fd1a 	bl	8005994 <HAL_Delay>
		Display_Temp(tCelsius, RH);		// stampo temperatura e umidità interne su LCD
 8001f60:	edd7 0a01 	vldr	s1, [r7, #4]
 8001f64:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f68:	f7ff fb78 	bl	800165c <Display_Temp>
		HAL_Delay(1000);
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f003 fd10 	bl	8005994 <HAL_Delay>
		Display_Temp_EXT(tExt, RH_EXT);	// stampo temperatura e umidità esterne su LCD
 8001f74:	4b8b      	ldr	r3, [pc, #556]	; (80021a4 <Modalita+0x85c>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <Modalita+0x860>)
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	eef0 0a47 	vmov.f32	s1, s14
 8001f84:	eeb0 0a67 	vmov.f32	s0, s15
 8001f88:	f7ff fbde 	bl	8001748 <Display_Temp_EXT>
		HAL_Delay(1000);
 8001f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f90:	f003 fd00 	bl	8005994 <HAL_Delay>


		HD44780_Init(2);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f7ff f84f 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8001f9a:	f7ff f8d1 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,1);
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff f8e3 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 8001fa6:	2014      	movs	r0, #20
 8001fa8:	f003 fcf4 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("Peltier Spenta ");
 8001fac:	487f      	ldr	r0, [pc, #508]	; (80021ac <Modalita+0x864>)
 8001fae:	f7ff f94e 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 8001fb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fb6:	f003 fced 	bl	8005994 <HAL_Delay>

		mode = 0; 						//si esce dal while: terminata la modalità 1
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
	while(mode==1)			 //modalità raggiungimento temperatura minima
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f43f aeec 	beq.w	8001d9e <Modalita+0x456>
	}

	while(mode==2) 					//modalità raggiungimento temperatura massima
 8001fc6:	e30e      	b.n	80025e6 <Modalita+0xc9e>
	{
		while(tCelsius<T_Hot) //comparo la temperatura interna della camera con quella da raggiungere
		{
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 1000); // PTC ACCESA: bisogna riscaldare l'interno della camera
 8001fc8:	4b79      	ldr	r3, [pc, #484]	; (80021b0 <Modalita+0x868>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000); // PTC FAN ACCESA
 8001fd2:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <Modalita+0x86c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fda:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10); // PELTIER SPENTA
 8001fdc:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <Modalita+0x870>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	220a      	movs	r2, #10
 8001fe2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 10); // PELTIER HOT FAN  SPENTA
 8001fe4:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <Modalita+0x870>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	220a      	movs	r2, #10
 8001fea:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 10); // PELTIER COLD FAN SPENTA
 8001fec:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <Modalita+0x86c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	220a      	movs	r2, #10
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34


			HD44780_Init(2);
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f7ff f81f 	bl	8001038 <HD44780_Init>
			HD44780_Clear();
 8001ffa:	f7ff f8a1 	bl	8001140 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8001ffe:	2100      	movs	r1, #0
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff f8b3 	bl	800116c <HD44780_SetCursor>
			HAL_Delay(20);
 8002006:	2014      	movs	r0, #20
 8002008:	f003 fcc4 	bl	8005994 <HAL_Delay>
			HD44780_PrintStr("PTC Accesa ");
 800200c:	486b      	ldr	r0, [pc, #428]	; (80021bc <Modalita+0x874>)
 800200e:	f7ff f91e 	bl	800124e <HD44780_PrintStr>
			HAL_Delay(500);
 8002012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002016:	f003 fcbd 	bl	8005994 <HAL_Delay>

			/********************************* LETTURA TEMPERATURA ***************************/

			if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 800201a:	4969      	ldr	r1, [pc, #420]	; (80021c0 <Modalita+0x878>)
 800201c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002020:	f7ff fa1e 	bl	8001460 <DHT22_Start>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8088 	beq.w	800213c <Modalita+0x7f4>
			{
				RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 800202c:	4964      	ldr	r1, [pc, #400]	; (80021c0 <Modalita+0x878>)
 800202e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002032:	f7ff fa95 	bl	8001560 <DHT22_Read>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b58      	ldr	r3, [pc, #352]	; (800219c <Modalita+0x854>)
 800203c:	701a      	strb	r2, [r3, #0]
				RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 800203e:	4960      	ldr	r1, [pc, #384]	; (80021c0 <Modalita+0x878>)
 8002040:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002044:	f7ff fa8c 	bl	8001560 <DHT22_Read>
 8002048:	4603      	mov	r3, r0
 800204a:	461a      	mov	r2, r3
 800204c:	4b54      	ldr	r3, [pc, #336]	; (80021a0 <Modalita+0x858>)
 800204e:	701a      	strb	r2, [r3, #0]
				TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8002050:	495b      	ldr	r1, [pc, #364]	; (80021c0 <Modalita+0x878>)
 8002052:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002056:	f7ff fa83 	bl	8001560 <DHT22_Read>
 800205a:	4603      	mov	r3, r0
 800205c:	461a      	mov	r2, r3
 800205e:	4b4b      	ldr	r3, [pc, #300]	; (800218c <Modalita+0x844>)
 8002060:	701a      	strb	r2, [r3, #0]
				TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8002062:	4957      	ldr	r1, [pc, #348]	; (80021c0 <Modalita+0x878>)
 8002064:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002068:	f7ff fa7a 	bl	8001560 <DHT22_Read>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	4b47      	ldr	r3, [pc, #284]	; (8002190 <Modalita+0x848>)
 8002072:	701a      	strb	r2, [r3, #0]
				SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8002074:	4952      	ldr	r1, [pc, #328]	; (80021c0 <Modalita+0x878>)
 8002076:	f44f 7080 	mov.w	r0, #256	; 0x100
 800207a:	f7ff fa71 	bl	8001560 <DHT22_Read>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <Modalita+0x87c>)
 8002084:	701a      	strb	r2, [r3, #0]
				CHECK = RH1 + RH2 + TC1 + TC2;
 8002086:	4b45      	ldr	r3, [pc, #276]	; (800219c <Modalita+0x854>)
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <Modalita+0x858>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <Modalita+0x844>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <Modalita+0x848>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <Modalita+0x880>)
 80020a4:	701a      	strb	r2, [r3, #0]
				if (CHECK == SUM)
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <Modalita+0x880>)
 80020a8:	781a      	ldrb	r2, [r3, #0]
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <Modalita+0x87c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d144      	bne.n	800213c <Modalita+0x7f4>
				{
					if (TC1>127) // If TC1=10000000, negative temperature
 80020b2:	4b36      	ldr	r3, [pc, #216]	; (800218c <Modalita+0x844>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	b25b      	sxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da0e      	bge.n	80020da <Modalita+0x792>
					{
						tCelsius = (float)TC2/10*(-1);
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <Modalita+0x848>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020d0:	eef1 7a67 	vneg.f32	s15, s15
 80020d4:	edc7 7a02 	vstr	s15, [r7, #8]
 80020d8:	e00f      	b.n	80020fa <Modalita+0x7b2>
					}
					else
					{
						tCelsius = (float)((TC1<<8)|TC2)/10;
 80020da:	4b2c      	ldr	r3, [pc, #176]	; (800218c <Modalita+0x844>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	4a2b      	ldr	r2, [pc, #172]	; (8002190 <Modalita+0x848>)
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80020f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f6:	edc7 7a02 	vstr	s15, [r7, #8]
					}
					tFahrenheit = tCelsius * 9/5 + 32;
 80020fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80020fe:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002102:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002106:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800210a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800210e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002194 <Modalita+0x84c>
 8002112:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <Modalita+0x850>)
 8002118:	edc3 7a00 	vstr	s15, [r3]
					RH = (float) ((RH1<<8)|RH2)/10;
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <Modalita+0x854>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <Modalita+0x858>)
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002130:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002138:	edc7 7a01 	vstr	s15, [r7, #4]


			/********************************* END LETTURA TEMPERATURA ***************************/


			HAL_Delay(200);
 800213c:	20c8      	movs	r0, #200	; 0xc8
 800213e:	f003 fc29 	bl	8005994 <HAL_Delay>
			Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 8002142:	edd7 0a01 	vldr	s1, [r7, #4]
 8002146:	ed97 0a02 	vldr	s0, [r7, #8]
 800214a:	f7ff fa87 	bl	800165c <Display_Temp>
			HAL_Delay(1000);
 800214e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002152:	f003 fc1f 	bl	8005994 <HAL_Delay>
			Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <Modalita+0x85c>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <Modalita+0x860>)
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	eef0 0a47 	vmov.f32	s1, s14
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	f7ff faed 	bl	8001748 <Display_Temp_EXT>
			HAL_Delay(1000);
 800216e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002172:	f003 fc0f 	bl	8005994 <HAL_Delay>


			/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

			FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 8002176:	f7ff fb3f 	bl	80017f8 <FireExit>


			if(fire==1)
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <Modalita+0x884>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 80fe 	bne.w	8002380 <Modalita+0xa38>
			{
				fire = 0; 			//ripristino il flag
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <Modalita+0x884>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
				break;				 //torno nel menu
 800218a:	e123      	b.n	80023d4 <Modalita+0xa8c>
 800218c:	20000502 	.word	0x20000502
 8002190:	20000503 	.word	0x20000503
 8002194:	42000000 	.word	0x42000000
 8002198:	20000514 	.word	0x20000514
 800219c:	20000500 	.word	0x20000500
 80021a0:	20000501 	.word	0x20000501
 80021a4:	20000538 	.word	0x20000538
 80021a8:	2000052c 	.word	0x2000052c
 80021ac:	0800dab8 	.word	0x0800dab8
 80021b0:	20000474 	.word	0x20000474
 80021b4:	200003e4 	.word	0x200003e4
 80021b8:	2000039c 	.word	0x2000039c
 80021bc:	0800dac8 	.word	0x0800dac8
 80021c0:	40020000 	.word	0x40020000
 80021c4:	20000504 	.word	0x20000504
 80021c8:	20000505 	.word	0x20000505
 80021cc:	200005b4 	.word	0x200005b4
			while(tCelsius<tExt) //se la temperatura interna è minore di quella esterna apro gli sportellini per velocizzare il riscaldamento
			{

				/****************** COMANDI APERTURA SERVO *********************************/

				HAL_Delay(500);
 80021d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021d4:	f003 fbde 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 230); 		//SERVO 1 ALTO
 80021d8:	4bbf      	ldr	r3, [pc, #764]	; (80024d8 <Modalita+0xb90>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	22e6      	movs	r2, #230	; 0xe6
 80021de:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 80021e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021e4:	f003 fbd6 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 230);		// SERVO 2 BASSO
 80021e8:	4bbb      	ldr	r3, [pc, #748]	; (80024d8 <Modalita+0xb90>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	22e6      	movs	r2, #230	; 0xe6
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38



				/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

				FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 80021f0:	f7ff fb02 	bl	80017f8 <FireExit>


				if(fire==1)
 80021f4:	4bb9      	ldr	r3, [pc, #740]	; (80024dc <Modalita+0xb94>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f000 80cd 	beq.w	8002398 <Modalita+0xa50>
					break; 		//torno nel menu
				}

				/******************* END USCITA CON DOPPIO CLICK ***************/

				HD44780_Init(2);
 80021fe:	2002      	movs	r0, #2
 8002200:	f7fe ff1a 	bl	8001038 <HD44780_Init>
				HD44780_Clear();
 8002204:	f7fe ff9c 	bl	8001140 <HD44780_Clear>
				HD44780_SetCursor(0,0);
 8002208:	2100      	movs	r1, #0
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe ffae 	bl	800116c <HD44780_SetCursor>
				HAL_Delay(20);
 8002210:	2014      	movs	r0, #20
 8002212:	f003 fbbf 	bl	8005994 <HAL_Delay>
				HD44780_PrintStr("PTC Accesa ");
 8002216:	48b2      	ldr	r0, [pc, #712]	; (80024e0 <Modalita+0xb98>)
 8002218:	f7ff f819 	bl	800124e <HD44780_PrintStr>
				HAL_Delay(500);
 800221c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002220:	f003 fbb8 	bl	8005994 <HAL_Delay>

				/********************************* LETTURA TEMPERATURA ***************************/

				if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8002224:	49af      	ldr	r1, [pc, #700]	; (80024e4 <Modalita+0xb9c>)
 8002226:	f44f 7080 	mov.w	r0, #256	; 0x100
 800222a:	f7ff f919 	bl	8001460 <DHT22_Start>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8088 	beq.w	8002346 <Modalita+0x9fe>
				{
					RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8002236:	49ab      	ldr	r1, [pc, #684]	; (80024e4 <Modalita+0xb9c>)
 8002238:	f44f 7080 	mov.w	r0, #256	; 0x100
 800223c:	f7ff f990 	bl	8001560 <DHT22_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	4ba8      	ldr	r3, [pc, #672]	; (80024e8 <Modalita+0xba0>)
 8002246:	701a      	strb	r2, [r3, #0]
					RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8002248:	49a6      	ldr	r1, [pc, #664]	; (80024e4 <Modalita+0xb9c>)
 800224a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800224e:	f7ff f987 	bl	8001560 <DHT22_Read>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	4ba5      	ldr	r3, [pc, #660]	; (80024ec <Modalita+0xba4>)
 8002258:	701a      	strb	r2, [r3, #0]
					TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 800225a:	49a2      	ldr	r1, [pc, #648]	; (80024e4 <Modalita+0xb9c>)
 800225c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002260:	f7ff f97e 	bl	8001560 <DHT22_Read>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	4ba1      	ldr	r3, [pc, #644]	; (80024f0 <Modalita+0xba8>)
 800226a:	701a      	strb	r2, [r3, #0]
					TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 800226c:	499d      	ldr	r1, [pc, #628]	; (80024e4 <Modalita+0xb9c>)
 800226e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002272:	f7ff f975 	bl	8001560 <DHT22_Read>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b9e      	ldr	r3, [pc, #632]	; (80024f4 <Modalita+0xbac>)
 800227c:	701a      	strb	r2, [r3, #0]
					SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 800227e:	4999      	ldr	r1, [pc, #612]	; (80024e4 <Modalita+0xb9c>)
 8002280:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002284:	f7ff f96c 	bl	8001560 <DHT22_Read>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b9a      	ldr	r3, [pc, #616]	; (80024f8 <Modalita+0xbb0>)
 800228e:	701a      	strb	r2, [r3, #0]
					CHECK = RH1 + RH2 + TC1 + TC2;
 8002290:	4b95      	ldr	r3, [pc, #596]	; (80024e8 <Modalita+0xba0>)
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	4b95      	ldr	r3, [pc, #596]	; (80024ec <Modalita+0xba4>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4413      	add	r3, r2
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b94      	ldr	r3, [pc, #592]	; (80024f0 <Modalita+0xba8>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b93      	ldr	r3, [pc, #588]	; (80024f4 <Modalita+0xbac>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b93      	ldr	r3, [pc, #588]	; (80024fc <Modalita+0xbb4>)
 80022ae:	701a      	strb	r2, [r3, #0]
					if (CHECK == SUM)
 80022b0:	4b92      	ldr	r3, [pc, #584]	; (80024fc <Modalita+0xbb4>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b90      	ldr	r3, [pc, #576]	; (80024f8 <Modalita+0xbb0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d144      	bne.n	8002346 <Modalita+0x9fe>
					{
						if (TC1>127) // If TC1=10000000, negative temperature
 80022bc:	4b8c      	ldr	r3, [pc, #560]	; (80024f0 <Modalita+0xba8>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da0e      	bge.n	80022e4 <Modalita+0x99c>
						{
							tCelsius = (float)TC2/10*(-1);
 80022c6:	4b8b      	ldr	r3, [pc, #556]	; (80024f4 <Modalita+0xbac>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022da:	eef1 7a67 	vneg.f32	s15, s15
 80022de:	edc7 7a02 	vstr	s15, [r7, #8]
 80022e2:	e00f      	b.n	8002304 <Modalita+0x9bc>
						}
						else
						{
							tCelsius = (float)((TC1<<8)|TC2)/10;
 80022e4:	4b82      	ldr	r3, [pc, #520]	; (80024f0 <Modalita+0xba8>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4a82      	ldr	r2, [pc, #520]	; (80024f4 <Modalita+0xbac>)
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002300:	edc7 7a02 	vstr	s15, [r7, #8]
						}
						tFahrenheit = tCelsius * 9/5 + 32;
 8002304:	edd7 7a02 	vldr	s15, [r7, #8]
 8002308:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800230c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002310:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002314:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002318:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002500 <Modalita+0xbb8>
 800231c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002320:	4b78      	ldr	r3, [pc, #480]	; (8002504 <Modalita+0xbbc>)
 8002322:	edc3 7a00 	vstr	s15, [r3]
						RH = (float) ((RH1<<8)|RH2)/10;
 8002326:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <Modalita+0xba0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	4a6f      	ldr	r2, [pc, #444]	; (80024ec <Modalita+0xba4>)
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	4313      	orrs	r3, r2
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800233e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002342:	edc7 7a01 	vstr	s15, [r7, #4]


				/********************************* END LETTURA TEMPERATURA ***************************/


				HAL_Delay(200);
 8002346:	20c8      	movs	r0, #200	; 0xc8
 8002348:	f003 fb24 	bl	8005994 <HAL_Delay>
				Display_Temp(tCelsius, RH);		// stampo temperatura e umidità interne su LCD
 800234c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002350:	ed97 0a02 	vldr	s0, [r7, #8]
 8002354:	f7ff f982 	bl	800165c <Display_Temp>
				HAL_Delay(1000);
 8002358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235c:	f003 fb1a 	bl	8005994 <HAL_Delay>
				Display_Temp_EXT(tExt, RH_EXT);	// stampo temperatura e umidità esterne su LCD
 8002360:	4b69      	ldr	r3, [pc, #420]	; (8002508 <Modalita+0xbc0>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	4b69      	ldr	r3, [pc, #420]	; (800250c <Modalita+0xbc4>)
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	eef0 0a47 	vmov.f32	s1, s14
 8002370:	eeb0 0a67 	vmov.f32	s0, s15
 8002374:	f7ff f9e8 	bl	8001748 <Display_Temp_EXT>
				HAL_Delay(1000);
 8002378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800237c:	f003 fb0a 	bl	8005994 <HAL_Delay>
			while(tCelsius<tExt) //se la temperatura interna è minore di quella esterna apro gli sportellini per velocizzare il riscaldamento
 8002380:	4b61      	ldr	r3, [pc, #388]	; (8002508 <Modalita+0xbc0>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ed97 7a02 	vldr	s14, [r7, #8]
 800238a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	f53f af1d 	bmi.w	80021d0 <Modalita+0x888>
 8002396:	e000      	b.n	800239a <Modalita+0xa52>
					break; 		//torno nel menu
 8002398:	bf00      	nop


			}

				//bisogna chiudere gli sportelli: si è raggiunta la temperatura ambiente
				HAL_Delay(500);
 800239a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800239e:	f003 faf9 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 700); 		//SERVO 1 ALTO
 80023a2:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <Modalita+0xb90>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 80023ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b0:	f003 faf0 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 700);		// SERVO 2 BASSO
 80023b4:	4b48      	ldr	r3, [pc, #288]	; (80024d8 <Modalita+0xb90>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
		while(tCelsius<T_Hot) //comparo la temperatura interna della camera con quella da raggiungere
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <Modalita+0xbc8>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80023c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	f53f adfa 	bmi.w	8001fc8 <Modalita+0x680>


		//esco dall'IF non appena la temperatura interna sarà uguale alla temperatura da raggiungere
		//a questo punto spengo la PTC e lascio accese solo le ventole

		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); // PTC SPENTA
 80023d4:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <Modalita+0xbcc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	220a      	movs	r2, #10
 80023da:	635a      	str	r2, [r3, #52]	; 0x34

		HD44780_Init(2);
 80023dc:	2002      	movs	r0, #2
 80023de:	f7fe fe2b 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 80023e2:	f7fe fead 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 80023e6:	2100      	movs	r1, #0
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe febf 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 80023ee:	2014      	movs	r0, #20
 80023f0:	f003 fad0 	bl	8005994 <HAL_Delay>
		sprintf (strh, "%.1f gradi raggiunti", T_Hot); 			//stampa temperatura
 80023f4:	4b46      	ldr	r3, [pc, #280]	; (8002510 <Modalita+0xbc8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f8c5 	bl	8000588 <__aeabi_f2d>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4945      	ldr	r1, [pc, #276]	; (8002518 <Modalita+0xbd0>)
 8002404:	4845      	ldr	r0, [pc, #276]	; (800251c <Modalita+0xbd4>)
 8002406:	f007 fcff 	bl	8009e08 <siprintf>
		HD44780_PrintStr(strh);
 800240a:	4844      	ldr	r0, [pc, #272]	; (800251c <Modalita+0xbd4>)
 800240c:	f7fe ff1f 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 8002410:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002414:	f003 fabe 	bl	8005994 <HAL_Delay>



		/********************************* LETTURA TEMPERATURA ***************************/
		if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8002418:	4932      	ldr	r1, [pc, #200]	; (80024e4 <Modalita+0xb9c>)
 800241a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800241e:	f7ff f81f 	bl	8001460 <DHT22_Start>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80ac 	beq.w	8002582 <Modalita+0xc3a>
		{
			RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 800242a:	492e      	ldr	r1, [pc, #184]	; (80024e4 <Modalita+0xb9c>)
 800242c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002430:	f7ff f896 	bl	8001560 <DHT22_Read>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <Modalita+0xba0>)
 800243a:	701a      	strb	r2, [r3, #0]
			RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 800243c:	4929      	ldr	r1, [pc, #164]	; (80024e4 <Modalita+0xb9c>)
 800243e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002442:	f7ff f88d 	bl	8001560 <DHT22_Read>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <Modalita+0xba4>)
 800244c:	701a      	strb	r2, [r3, #0]
			TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 800244e:	4925      	ldr	r1, [pc, #148]	; (80024e4 <Modalita+0xb9c>)
 8002450:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002454:	f7ff f884 	bl	8001560 <DHT22_Read>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <Modalita+0xba8>)
 800245e:	701a      	strb	r2, [r3, #0]
			TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8002460:	4920      	ldr	r1, [pc, #128]	; (80024e4 <Modalita+0xb9c>)
 8002462:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002466:	f7ff f87b 	bl	8001560 <DHT22_Read>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <Modalita+0xbac>)
 8002470:	701a      	strb	r2, [r3, #0]
			SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8002472:	491c      	ldr	r1, [pc, #112]	; (80024e4 <Modalita+0xb9c>)
 8002474:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002478:	f7ff f872 	bl	8001560 <DHT22_Read>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <Modalita+0xbb0>)
 8002482:	701a      	strb	r2, [r3, #0]
			CHECK = RH1 + RH2 + TC1 + TC2;
 8002484:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <Modalita+0xba0>)
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <Modalita+0xba4>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4413      	add	r3, r2
 800248e:	b2da      	uxtb	r2, r3
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <Modalita+0xba8>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4413      	add	r3, r2
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <Modalita+0xbac>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4413      	add	r3, r2
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <Modalita+0xbb4>)
 80024a2:	701a      	strb	r2, [r3, #0]
			if (CHECK == SUM)
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <Modalita+0xbb4>)
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <Modalita+0xbb0>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d168      	bne.n	8002582 <Modalita+0xc3a>
			{
				if (TC1>127) // If TC1=10000000, negative temperature
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <Modalita+0xba8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	b25b      	sxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	da32      	bge.n	8002520 <Modalita+0xbd8>
				{
					tCelsius = (float)TC2/10*(-1);
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <Modalita+0xbac>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80024ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ce:	eef1 7a67 	vneg.f32	s15, s15
 80024d2:	edc7 7a02 	vstr	s15, [r7, #8]
 80024d6:	e033      	b.n	8002540 <Modalita+0xbf8>
 80024d8:	2000042c 	.word	0x2000042c
 80024dc:	200005b4 	.word	0x200005b4
 80024e0:	0800dac8 	.word	0x0800dac8
 80024e4:	40020000 	.word	0x40020000
 80024e8:	20000500 	.word	0x20000500
 80024ec:	20000501 	.word	0x20000501
 80024f0:	20000502 	.word	0x20000502
 80024f4:	20000503 	.word	0x20000503
 80024f8:	20000504 	.word	0x20000504
 80024fc:	20000505 	.word	0x20000505
 8002500:	42000000 	.word	0x42000000
 8002504:	20000514 	.word	0x20000514
 8002508:	20000538 	.word	0x20000538
 800250c:	2000052c 	.word	0x2000052c
 8002510:	20000014 	.word	0x20000014
 8002514:	20000474 	.word	0x20000474
 8002518:	0800daa0 	.word	0x0800daa0
 800251c:	20000550 	.word	0x20000550
				}
				else
				{
					tCelsius = (float)((TC1<<8)|TC2)/10;
 8002520:	4ba4      	ldr	r3, [pc, #656]	; (80027b4 <Modalita+0xe6c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	4aa4      	ldr	r2, [pc, #656]	; (80027b8 <Modalita+0xe70>)
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002534:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800253c:	edc7 7a02 	vstr	s15, [r7, #8]
				}
				tFahrenheit = tCelsius * 9/5 + 32;
 8002540:	edd7 7a02 	vldr	s15, [r7, #8]
 8002544:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002548:	ee27 7a87 	vmul.f32	s14, s15, s14
 800254c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002554:	ed9f 7a99 	vldr	s14, [pc, #612]	; 80027bc <Modalita+0xe74>
 8002558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800255c:	4b98      	ldr	r3, [pc, #608]	; (80027c0 <Modalita+0xe78>)
 800255e:	edc3 7a00 	vstr	s15, [r3]
				RH = (float) ((RH1<<8)|RH2)/10;
 8002562:	4b98      	ldr	r3, [pc, #608]	; (80027c4 <Modalita+0xe7c>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4a97      	ldr	r2, [pc, #604]	; (80027c8 <Modalita+0xe80>)
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	4313      	orrs	r3, r2
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002576:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800257a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800257e:	edc7 7a01 	vstr	s15, [r7, #4]


		/********************************* END LETTURA TEMPERATURA ***************************/


		HAL_Delay(200);
 8002582:	20c8      	movs	r0, #200	; 0xc8
 8002584:	f003 fa06 	bl	8005994 <HAL_Delay>
		Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 8002588:	edd7 0a01 	vldr	s1, [r7, #4]
 800258c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002590:	f7ff f864 	bl	800165c <Display_Temp>
		HAL_Delay(1000);
 8002594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002598:	f003 f9fc 	bl	8005994 <HAL_Delay>
		Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 800259c:	4b8b      	ldr	r3, [pc, #556]	; (80027cc <Modalita+0xe84>)
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	4b8b      	ldr	r3, [pc, #556]	; (80027d0 <Modalita+0xe88>)
 80025a4:	ed93 7a00 	vldr	s14, [r3]
 80025a8:	eef0 0a47 	vmov.f32	s1, s14
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	f7ff f8ca 	bl	8001748 <Display_Temp_EXT>
		HAL_Delay(1000);
 80025b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025b8:	f003 f9ec 	bl	8005994 <HAL_Delay>

		HD44780_Init(2);
 80025bc:	2002      	movs	r0, #2
 80025be:	f7fe fd3b 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 80025c2:	f7fe fdbd 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,1);
 80025c6:	2101      	movs	r1, #1
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe fdcf 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 80025ce:	2014      	movs	r0, #20
 80025d0:	f003 f9e0 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("PTC Spenta ");
 80025d4:	487f      	ldr	r0, [pc, #508]	; (80027d4 <Modalita+0xe8c>)
 80025d6:	f7fe fe3a 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 80025da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025de:	f003 f9d9 	bl	8005994 <HAL_Delay>

		mode = 0; 				//esco dal while: modalità 2 terminata
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
	while(mode==2) 					//modalità raggiungimento temperatura massima
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	f43f aee8 	beq.w	80023be <Modalita+0xa76>
	}



	while (mode == 3) 		// SALITA: da minima a massima
 80025ee:	f000 bcb0 	b.w	8002f52 <Modalita+0x160a>
	{
		while(tCelsius>T_Cold) //comparo la temperatura interna della camera con quella da raggiungere. Se la prima è maggiore --> bisogna raffreddare --> accendo le Peltier
		{
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 1000); // PELTIER ACCESA, valore del compare alto (1000)
 80025f2:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <Modalita+0xe90>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 1000); // PELTIER HOT FAN  ACCESA
 80025fc:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <Modalita+0xe90>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1000); // PELTIER COLD FAN ACCESA
 8002606:	4b75      	ldr	r3, [pc, #468]	; (80027dc <Modalita+0xe94>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800260e:	635a      	str	r2, [r3, #52]	; 0x34

			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 10); // PTC FAN	SPENTA
 8002610:	4b72      	ldr	r3, [pc, #456]	; (80027dc <Modalita+0xe94>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	220a      	movs	r2, #10
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); // PTC	SPENTA
 8002618:	4b71      	ldr	r3, [pc, #452]	; (80027e0 <Modalita+0xe98>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	220a      	movs	r2, #10
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

			HD44780_Init(2);
 8002620:	2002      	movs	r0, #2
 8002622:	f7fe fd09 	bl	8001038 <HD44780_Init>
			HD44780_Clear();
 8002626:	f7fe fd8b 	bl	8001140 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 800262a:	2100      	movs	r1, #0
 800262c:	2000      	movs	r0, #0
 800262e:	f7fe fd9d 	bl	800116c <HD44780_SetCursor>
			HAL_Delay(20);
 8002632:	2014      	movs	r0, #20
 8002634:	f003 f9ae 	bl	8005994 <HAL_Delay>
			HD44780_PrintStr("Peltier Accesa ");
 8002638:	486a      	ldr	r0, [pc, #424]	; (80027e4 <Modalita+0xe9c>)
 800263a:	f7fe fe08 	bl	800124e <HD44780_PrintStr>
			HAL_Delay(500);
 800263e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002642:	f003 f9a7 	bl	8005994 <HAL_Delay>

			/********************************* LETTURA TEMPERATURA ***************************/

			if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8002646:	4968      	ldr	r1, [pc, #416]	; (80027e8 <Modalita+0xea0>)
 8002648:	f44f 7080 	mov.w	r0, #256	; 0x100
 800264c:	f7fe ff08 	bl	8001460 <DHT22_Start>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8088 	beq.w	8002768 <Modalita+0xe20>
			{
				RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8002658:	4963      	ldr	r1, [pc, #396]	; (80027e8 <Modalita+0xea0>)
 800265a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800265e:	f7fe ff7f 	bl	8001560 <DHT22_Read>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <Modalita+0xe7c>)
 8002668:	701a      	strb	r2, [r3, #0]
				RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 800266a:	495f      	ldr	r1, [pc, #380]	; (80027e8 <Modalita+0xea0>)
 800266c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002670:	f7fe ff76 	bl	8001560 <DHT22_Read>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <Modalita+0xe80>)
 800267a:	701a      	strb	r2, [r3, #0]
				TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 800267c:	495a      	ldr	r1, [pc, #360]	; (80027e8 <Modalita+0xea0>)
 800267e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002682:	f7fe ff6d 	bl	8001560 <DHT22_Read>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <Modalita+0xe6c>)
 800268c:	701a      	strb	r2, [r3, #0]
				TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 800268e:	4956      	ldr	r1, [pc, #344]	; (80027e8 <Modalita+0xea0>)
 8002690:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002694:	f7fe ff64 	bl	8001560 <DHT22_Read>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <Modalita+0xe70>)
 800269e:	701a      	strb	r2, [r3, #0]
				SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 80026a0:	4951      	ldr	r1, [pc, #324]	; (80027e8 <Modalita+0xea0>)
 80026a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026a6:	f7fe ff5b 	bl	8001560 <DHT22_Read>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b4f      	ldr	r3, [pc, #316]	; (80027ec <Modalita+0xea4>)
 80026b0:	701a      	strb	r2, [r3, #0]
				CHECK = RH1 + RH2 + TC1 + TC2;
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <Modalita+0xe7c>)
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <Modalita+0xe80>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <Modalita+0xe6c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <Modalita+0xe70>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <Modalita+0xea8>)
 80026d0:	701a      	strb	r2, [r3, #0]
				if (CHECK == SUM)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <Modalita+0xea8>)
 80026d4:	781a      	ldrb	r2, [r3, #0]
 80026d6:	4b45      	ldr	r3, [pc, #276]	; (80027ec <Modalita+0xea4>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d144      	bne.n	8002768 <Modalita+0xe20>
				{
					if (TC1>127) // If TC1=10000000, negative temperature
 80026de:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <Modalita+0xe6c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	da0e      	bge.n	8002706 <Modalita+0xdbe>
					{
						tCelsius = (float)TC2/10*(-1);
 80026e8:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <Modalita+0xe70>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80026f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026fc:	eef1 7a67 	vneg.f32	s15, s15
 8002700:	edc7 7a02 	vstr	s15, [r7, #8]
 8002704:	e00f      	b.n	8002726 <Modalita+0xdde>
					}
					else
					{
						tCelsius = (float)((TC1<<8)|TC2)/10;
 8002706:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <Modalita+0xe6c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <Modalita+0xe70>)
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	4313      	orrs	r3, r2
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800271e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002722:	edc7 7a02 	vstr	s15, [r7, #8]
					}
					tFahrenheit = tCelsius * 9/5 + 32;
 8002726:	edd7 7a02 	vldr	s15, [r7, #8]
 800272a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800272e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002732:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800273a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80027bc <Modalita+0xe74>
 800273e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <Modalita+0xe78>)
 8002744:	edc3 7a00 	vstr	s15, [r3]
					RH = (float) ((RH1<<8)|RH2)/10;
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <Modalita+0xe7c>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <Modalita+0xe80>)
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	ee07 3a90 	vmov	s15, r3
 8002758:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002764:	edc7 7a01 	vstr	s15, [r7, #4]


			/********************************* END LETTURA TEMPERATURA ***************************/


			HAL_Delay(200);
 8002768:	20c8      	movs	r0, #200	; 0xc8
 800276a:	f003 f913 	bl	8005994 <HAL_Delay>
			Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 800276e:	edd7 0a01 	vldr	s1, [r7, #4]
 8002772:	ed97 0a02 	vldr	s0, [r7, #8]
 8002776:	f7fe ff71 	bl	800165c <Display_Temp>
			HAL_Delay(1000);
 800277a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800277e:	f003 f909 	bl	8005994 <HAL_Delay>
			Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <Modalita+0xe84>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <Modalita+0xe88>)
 800278a:	ed93 7a00 	vldr	s14, [r3]
 800278e:	eef0 0a47 	vmov.f32	s1, s14
 8002792:	eeb0 0a67 	vmov.f32	s0, s15
 8002796:	f7fe ffd7 	bl	8001748 <Display_Temp_EXT>
			HAL_Delay(1000);
 800279a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800279e:	f003 f8f9 	bl	8005994 <HAL_Delay>

			/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

			FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 80027a2:	f7ff f829 	bl	80017f8 <FireExit>


			if(fire==1)
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <Modalita+0xeac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	f000 8127 	beq.w	80029fe <Modalita+0x10b6>

			/******************* END USCITA CON DOPPIO CLICK ***************/



			while(tCelsius>tExt)	// finchè la temperatura interna è maggiore di quella esterna tengo gli sportellini aperti per velocizzare il raffreddamento
 80027b0:	e0fa      	b.n	80029a8 <Modalita+0x1060>
 80027b2:	bf00      	nop
 80027b4:	20000502 	.word	0x20000502
 80027b8:	20000503 	.word	0x20000503
 80027bc:	42000000 	.word	0x42000000
 80027c0:	20000514 	.word	0x20000514
 80027c4:	20000500 	.word	0x20000500
 80027c8:	20000501 	.word	0x20000501
 80027cc:	20000538 	.word	0x20000538
 80027d0:	2000052c 	.word	0x2000052c
 80027d4:	0800dad4 	.word	0x0800dad4
 80027d8:	2000039c 	.word	0x2000039c
 80027dc:	200003e4 	.word	0x200003e4
 80027e0:	20000474 	.word	0x20000474
 80027e4:	0800da90 	.word	0x0800da90
 80027e8:	40020000 	.word	0x40020000
 80027ec:	20000504 	.word	0x20000504
 80027f0:	20000505 	.word	0x20000505
 80027f4:	200005b4 	.word	0x200005b4
			{

				/****************** COMANDI APERTURA SERVO *********************************/

				HAL_Delay(500);
 80027f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027fc:	f003 f8ca 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 230); 	// SERVO 1 ALTO
 8002800:	4b9e      	ldr	r3, [pc, #632]	; (8002a7c <Modalita+0x1134>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	22e6      	movs	r2, #230	; 0xe6
 8002806:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 8002808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800280c:	f003 f8c2 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 230);	// SERVO 2 BASSO
 8002810:	4b9a      	ldr	r3, [pc, #616]	; (8002a7c <Modalita+0x1134>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	22e6      	movs	r2, #230	; 0xe6
 8002816:	639a      	str	r2, [r3, #56]	; 0x38



				/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

				FireExit();		// Se la funzione FireExit() ha fatto scattare l'interruzione
 8002818:	f7fe ffee 	bl	80017f8 <FireExit>


				if(fire==1)
 800281c:	4b98      	ldr	r3, [pc, #608]	; (8002a80 <Modalita+0x1138>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	f000 80cd 	beq.w	80029c0 <Modalita+0x1078>
					break; 		// torno nel menu
				}

				/******************* END USCITA CON DOPPIO CLICK ***************/

				HD44780_Init(2);
 8002826:	2002      	movs	r0, #2
 8002828:	f7fe fc06 	bl	8001038 <HD44780_Init>
				HD44780_Clear();
 800282c:	f7fe fc88 	bl	8001140 <HD44780_Clear>
				HD44780_SetCursor(0,0);
 8002830:	2100      	movs	r1, #0
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe fc9a 	bl	800116c <HD44780_SetCursor>
				HAL_Delay(20);
 8002838:	2014      	movs	r0, #20
 800283a:	f003 f8ab 	bl	8005994 <HAL_Delay>
				HD44780_PrintStr("Peltier Accesa ");
 800283e:	4891      	ldr	r0, [pc, #580]	; (8002a84 <Modalita+0x113c>)
 8002840:	f7fe fd05 	bl	800124e <HD44780_PrintStr>
				HAL_Delay(500);
 8002844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002848:	f003 f8a4 	bl	8005994 <HAL_Delay>

				/********************************* LETTURA TEMPERATURA ***************************/

				if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 800284c:	498e      	ldr	r1, [pc, #568]	; (8002a88 <Modalita+0x1140>)
 800284e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002852:	f7fe fe05 	bl	8001460 <DHT22_Start>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8088 	beq.w	800296e <Modalita+0x1026>
				{
					RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 800285e:	498a      	ldr	r1, [pc, #552]	; (8002a88 <Modalita+0x1140>)
 8002860:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002864:	f7fe fe7c 	bl	8001560 <DHT22_Read>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	4b87      	ldr	r3, [pc, #540]	; (8002a8c <Modalita+0x1144>)
 800286e:	701a      	strb	r2, [r3, #0]
					RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8002870:	4985      	ldr	r1, [pc, #532]	; (8002a88 <Modalita+0x1140>)
 8002872:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002876:	f7fe fe73 	bl	8001560 <DHT22_Read>
 800287a:	4603      	mov	r3, r0
 800287c:	461a      	mov	r2, r3
 800287e:	4b84      	ldr	r3, [pc, #528]	; (8002a90 <Modalita+0x1148>)
 8002880:	701a      	strb	r2, [r3, #0]
					TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8002882:	4981      	ldr	r1, [pc, #516]	; (8002a88 <Modalita+0x1140>)
 8002884:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002888:	f7fe fe6a 	bl	8001560 <DHT22_Read>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b80      	ldr	r3, [pc, #512]	; (8002a94 <Modalita+0x114c>)
 8002892:	701a      	strb	r2, [r3, #0]
					TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8002894:	497c      	ldr	r1, [pc, #496]	; (8002a88 <Modalita+0x1140>)
 8002896:	f44f 7080 	mov.w	r0, #256	; 0x100
 800289a:	f7fe fe61 	bl	8001560 <DHT22_Read>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b7d      	ldr	r3, [pc, #500]	; (8002a98 <Modalita+0x1150>)
 80028a4:	701a      	strb	r2, [r3, #0]
					SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 80028a6:	4978      	ldr	r1, [pc, #480]	; (8002a88 <Modalita+0x1140>)
 80028a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028ac:	f7fe fe58 	bl	8001560 <DHT22_Read>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b79      	ldr	r3, [pc, #484]	; (8002a9c <Modalita+0x1154>)
 80028b6:	701a      	strb	r2, [r3, #0]
					CHECK = RH1 + RH2 + TC1 + TC2;
 80028b8:	4b74      	ldr	r3, [pc, #464]	; (8002a8c <Modalita+0x1144>)
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <Modalita+0x1148>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b73      	ldr	r3, [pc, #460]	; (8002a94 <Modalita+0x114c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	4b72      	ldr	r3, [pc, #456]	; (8002a98 <Modalita+0x1150>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <Modalita+0x1158>)
 80028d6:	701a      	strb	r2, [r3, #0]
					if (CHECK == SUM)
 80028d8:	4b71      	ldr	r3, [pc, #452]	; (8002aa0 <Modalita+0x1158>)
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	4b6f      	ldr	r3, [pc, #444]	; (8002a9c <Modalita+0x1154>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d144      	bne.n	800296e <Modalita+0x1026>
					{
						if (TC1>127) // If TC1=10000000, negative temperature
 80028e4:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <Modalita+0x114c>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	da0e      	bge.n	800290c <Modalita+0xfc4>
						{
							tCelsius = (float)TC2/10*(-1);
 80028ee:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <Modalita+0x1150>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002902:	eef1 7a67 	vneg.f32	s15, s15
 8002906:	edc7 7a02 	vstr	s15, [r7, #8]
 800290a:	e00f      	b.n	800292c <Modalita+0xfe4>
						}
						else
						{
							tCelsius = (float)((TC1<<8)|TC2)/10;
 800290c:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <Modalita+0x114c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	4a61      	ldr	r2, [pc, #388]	; (8002a98 <Modalita+0x1150>)
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002920:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002928:	edc7 7a02 	vstr	s15, [r7, #8]
						}
						tFahrenheit = tCelsius * 9/5 + 32;
 800292c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002930:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002934:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002938:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800293c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002940:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002aa4 <Modalita+0x115c>
 8002944:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002948:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <Modalita+0x1160>)
 800294a:	edc3 7a00 	vstr	s15, [r3]
						RH = (float) ((RH1<<8)|RH2)/10;
 800294e:	4b4f      	ldr	r3, [pc, #316]	; (8002a8c <Modalita+0x1144>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4a4e      	ldr	r2, [pc, #312]	; (8002a90 <Modalita+0x1148>)
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002962:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296a:	edc7 7a01 	vstr	s15, [r7, #4]


				/********************************* END LETTURA TEMPERATURA ***************************/


				HAL_Delay(200);
 800296e:	20c8      	movs	r0, #200	; 0xc8
 8002970:	f003 f810 	bl	8005994 <HAL_Delay>
				Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 8002974:	edd7 0a01 	vldr	s1, [r7, #4]
 8002978:	ed97 0a02 	vldr	s0, [r7, #8]
 800297c:	f7fe fe6e 	bl	800165c <Display_Temp>
				HAL_Delay(1000);
 8002980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002984:	f003 f806 	bl	8005994 <HAL_Delay>
				Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 8002988:	4b48      	ldr	r3, [pc, #288]	; (8002aac <Modalita+0x1164>)
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <Modalita+0x1168>)
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	eef0 0a47 	vmov.f32	s1, s14
 8002998:	eeb0 0a67 	vmov.f32	s0, s15
 800299c:	f7fe fed4 	bl	8001748 <Display_Temp_EXT>
				HAL_Delay(1000);
 80029a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a4:	f002 fff6 	bl	8005994 <HAL_Delay>
			while(tCelsius>tExt)	// finchè la temperatura interna è maggiore di quella esterna tengo gli sportellini aperti per velocizzare il raffreddamento
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <Modalita+0x1164>)
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80029b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	f73f af1d 	bgt.w	80027f8 <Modalita+0xeb0>
 80029be:	e000      	b.n	80029c2 <Modalita+0x107a>
					break; 		// torno nel menu
 80029c0:	bf00      	nop


			}

				//si chiudono gli sportelli: si è raggiunta la temperatura ambiente
				HAL_Delay(500);
 80029c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029c6:	f002 ffe5 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 700); //90 gradi a destra : con i cavi sopra
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <Modalita+0x1134>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80029d2:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 80029d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029d8:	f002 ffdc 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 700);	// SERVO 2 BASSO
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <Modalita+0x1134>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
		while(tCelsius>T_Cold) //comparo la temperatura interna della camera con quella da raggiungere. Se la prima è maggiore --> bisogna raffreddare --> accendo le Peltier
 80029e6:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <Modalita+0x116c>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80029f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	f73f adfb 	bgt.w	80025f2 <Modalita+0xcaa>
 80029fc:	e000      	b.n	8002a00 <Modalita+0x10b8>
				break; 				//torno nel menu
 80029fe:	bf00      	nop
		}
		//esco dall'IF non appena la temperatura interna sarà uguale alla temperatura da raggiungere
		//a questo punto spengo le peltier e lascio accese solo le ventole

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10);	//SPENGO PELTIER: valore compare basso = 10 (NON ZERO PERCHÈ VIENE ELABORATO COME ALTRO ESTREMO E QUINDI RIMANGONO ACCESE)
 8002a00:	4b2d      	ldr	r3, [pc, #180]	; (8002ab8 <Modalita+0x1170>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	220a      	movs	r2, #10
 8002a06:	635a      	str	r2, [r3, #52]	; 0x34


		HD44780_Init(2);
 8002a08:	2002      	movs	r0, #2
 8002a0a:	f7fe fb15 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8002a0e:	f7fe fb97 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8002a12:	2100      	movs	r1, #0
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fba9 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 8002a1a:	2014      	movs	r0, #20
 8002a1c:	f002 ffba 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("Peltier Spenta ");
 8002a20:	4826      	ldr	r0, [pc, #152]	; (8002abc <Modalita+0x1174>)
 8002a22:	f7fe fc14 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 8002a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a2a:	f002 ffb3 	bl	8005994 <HAL_Delay>

		HD44780_Init(2);
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f7fe fb02 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8002a34:	f7fe fb84 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fe fb96 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 8002a40:	2014      	movs	r0, #20
 8002a42:	f002 ffa7 	bl	8005994 <HAL_Delay>
		sprintf (strc, "%.1f gradi raggiunti", T_Cold); 			//stampa temperatura
 8002a46:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <Modalita+0x116c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd9c 	bl	8000588 <__aeabi_f2d>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	491a      	ldr	r1, [pc, #104]	; (8002ac0 <Modalita+0x1178>)
 8002a56:	481b      	ldr	r0, [pc, #108]	; (8002ac4 <Modalita+0x117c>)
 8002a58:	f007 f9d6 	bl	8009e08 <siprintf>
		HD44780_PrintStr(strc);
 8002a5c:	4819      	ldr	r0, [pc, #100]	; (8002ac4 <Modalita+0x117c>)
 8002a5e:	f7fe fbf6 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 8002a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a66:	f002 ff95 	bl	8005994 <HAL_Delay>




		while(tCelsius<T_Hot) // comparo la temperatura interna della camera con quella da raggiungere
 8002a6a:	e224      	b.n	8002eb6 <Modalita+0x156e>
		{
			if(fire==1) 	// se è gia stata attivata prima esci
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <Modalita+0x1138>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d129      	bne.n	8002ac8 <Modalita+0x1180>
			{
				fire = 0; 		// ripristino il flag
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <Modalita+0x1138>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
				break; 			// torno nel menu
 8002a7a:	e229      	b.n	8002ed0 <Modalita+0x1588>
 8002a7c:	2000042c 	.word	0x2000042c
 8002a80:	200005b4 	.word	0x200005b4
 8002a84:	0800da90 	.word	0x0800da90
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	20000500 	.word	0x20000500
 8002a90:	20000501 	.word	0x20000501
 8002a94:	20000502 	.word	0x20000502
 8002a98:	20000503 	.word	0x20000503
 8002a9c:	20000504 	.word	0x20000504
 8002aa0:	20000505 	.word	0x20000505
 8002aa4:	42000000 	.word	0x42000000
 8002aa8:	20000514 	.word	0x20000514
 8002aac:	20000538 	.word	0x20000538
 8002ab0:	2000052c 	.word	0x2000052c
 8002ab4:	20000010 	.word	0x20000010
 8002ab8:	2000039c 	.word	0x2000039c
 8002abc:	0800dab8 	.word	0x0800dab8
 8002ac0:	0800daa0 	.word	0x0800daa0
 8002ac4:	2000053c 	.word	0x2000053c
			}

			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 1000); // PTC ACCESA: bisogna riscaldare l'interno della camera
 8002ac8:	4bae      	ldr	r3, [pc, #696]	; (8002d84 <Modalita+0x143c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000); // PTC FAN ACCESA
 8002ad2:	4bad      	ldr	r3, [pc, #692]	; (8002d88 <Modalita+0x1440>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ada:	639a      	str	r2, [r3, #56]	; 0x38

			HD44780_Init(2);
 8002adc:	2002      	movs	r0, #2
 8002ade:	f7fe faab 	bl	8001038 <HD44780_Init>
			HD44780_Clear();
 8002ae2:	f7fe fb2d 	bl	8001140 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe fb3f 	bl	800116c <HD44780_SetCursor>
			HAL_Delay(20);
 8002aee:	2014      	movs	r0, #20
 8002af0:	f002 ff50 	bl	8005994 <HAL_Delay>
			HD44780_PrintStr("PTC Accesa ");
 8002af4:	48a5      	ldr	r0, [pc, #660]	; (8002d8c <Modalita+0x1444>)
 8002af6:	f7fe fbaa 	bl	800124e <HD44780_PrintStr>
			HAL_Delay(500);
 8002afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002afe:	f002 ff49 	bl	8005994 <HAL_Delay>

			/********************************* LETTURA TEMPERATURA ***************************/

			if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8002b02:	49a3      	ldr	r1, [pc, #652]	; (8002d90 <Modalita+0x1448>)
 8002b04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b08:	f7fe fcaa 	bl	8001460 <DHT22_Start>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8088 	beq.w	8002c24 <Modalita+0x12dc>
			{
				RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8002b14:	499e      	ldr	r1, [pc, #632]	; (8002d90 <Modalita+0x1448>)
 8002b16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b1a:	f7fe fd21 	bl	8001560 <DHT22_Read>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	461a      	mov	r2, r3
 8002b22:	4b9c      	ldr	r3, [pc, #624]	; (8002d94 <Modalita+0x144c>)
 8002b24:	701a      	strb	r2, [r3, #0]
				RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8002b26:	499a      	ldr	r1, [pc, #616]	; (8002d90 <Modalita+0x1448>)
 8002b28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b2c:	f7fe fd18 	bl	8001560 <DHT22_Read>
 8002b30:	4603      	mov	r3, r0
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b98      	ldr	r3, [pc, #608]	; (8002d98 <Modalita+0x1450>)
 8002b36:	701a      	strb	r2, [r3, #0]
				TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8002b38:	4995      	ldr	r1, [pc, #596]	; (8002d90 <Modalita+0x1448>)
 8002b3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b3e:	f7fe fd0f 	bl	8001560 <DHT22_Read>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b95      	ldr	r3, [pc, #596]	; (8002d9c <Modalita+0x1454>)
 8002b48:	701a      	strb	r2, [r3, #0]
				TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8002b4a:	4991      	ldr	r1, [pc, #580]	; (8002d90 <Modalita+0x1448>)
 8002b4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b50:	f7fe fd06 	bl	8001560 <DHT22_Read>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	4b91      	ldr	r3, [pc, #580]	; (8002da0 <Modalita+0x1458>)
 8002b5a:	701a      	strb	r2, [r3, #0]
				SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8002b5c:	498c      	ldr	r1, [pc, #560]	; (8002d90 <Modalita+0x1448>)
 8002b5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b62:	f7fe fcfd 	bl	8001560 <DHT22_Read>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b8e      	ldr	r3, [pc, #568]	; (8002da4 <Modalita+0x145c>)
 8002b6c:	701a      	strb	r2, [r3, #0]
				CHECK = RH1 + RH2 + TC1 + TC2;
 8002b6e:	4b89      	ldr	r3, [pc, #548]	; (8002d94 <Modalita+0x144c>)
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	4b89      	ldr	r3, [pc, #548]	; (8002d98 <Modalita+0x1450>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4b88      	ldr	r3, [pc, #544]	; (8002d9c <Modalita+0x1454>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b87      	ldr	r3, [pc, #540]	; (8002da0 <Modalita+0x1458>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b87      	ldr	r3, [pc, #540]	; (8002da8 <Modalita+0x1460>)
 8002b8c:	701a      	strb	r2, [r3, #0]
				if (CHECK == SUM)
 8002b8e:	4b86      	ldr	r3, [pc, #536]	; (8002da8 <Modalita+0x1460>)
 8002b90:	781a      	ldrb	r2, [r3, #0]
 8002b92:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <Modalita+0x145c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d144      	bne.n	8002c24 <Modalita+0x12dc>
				{
					if (TC1>127) // If TC1=10000000, negative temperature
 8002b9a:	4b80      	ldr	r3, [pc, #512]	; (8002d9c <Modalita+0x1454>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	da0e      	bge.n	8002bc2 <Modalita+0x127a>
					{
						tCelsius = (float)TC2/10*(-1);
 8002ba4:	4b7e      	ldr	r3, [pc, #504]	; (8002da0 <Modalita+0x1458>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb8:	eef1 7a67 	vneg.f32	s15, s15
 8002bbc:	edc7 7a02 	vstr	s15, [r7, #8]
 8002bc0:	e00f      	b.n	8002be2 <Modalita+0x129a>
					}
					else
					{
						tCelsius = (float)((TC1<<8)|TC2)/10;
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <Modalita+0x1454>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	4a75      	ldr	r2, [pc, #468]	; (8002da0 <Modalita+0x1458>)
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bde:	edc7 7a02 	vstr	s15, [r7, #8]
					}
					tFahrenheit = tCelsius * 9/5 + 32;
 8002be2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002bea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bee:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002dac <Modalita+0x1464>
 8002bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bfe:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <Modalita+0x1468>)
 8002c00:	edc3 7a00 	vstr	s15, [r3]
					RH = (float) ((RH1<<8)|RH2)/10;
 8002c04:	4b63      	ldr	r3, [pc, #396]	; (8002d94 <Modalita+0x144c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	4a63      	ldr	r2, [pc, #396]	; (8002d98 <Modalita+0x1450>)
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c18:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c20:	edc7 7a01 	vstr	s15, [r7, #4]


			/********************************* END LETTURA TEMPERATURA ***************************/


			HAL_Delay(200);
 8002c24:	20c8      	movs	r0, #200	; 0xc8
 8002c26:	f002 feb5 	bl	8005994 <HAL_Delay>
			Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 8002c2a:	edd7 0a01 	vldr	s1, [r7, #4]
 8002c2e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c32:	f7fe fd13 	bl	800165c <Display_Temp>
			HAL_Delay(1000);
 8002c36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c3a:	f002 feab 	bl	8005994 <HAL_Delay>
			Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 8002c3e:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <Modalita+0x146c>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <Modalita+0x1470>)
 8002c46:	ed93 7a00 	vldr	s14, [r3]
 8002c4a:	eef0 0a47 	vmov.f32	s1, s14
 8002c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c52:	f7fe fd79 	bl	8001748 <Display_Temp_EXT>
			HAL_Delay(1000);
 8002c56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c5a:	f002 fe9b 	bl	8005994 <HAL_Delay>


			/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

			FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 8002c5e:	f7fe fdcb 	bl	80017f8 <FireExit>


			if(fire==1)
 8002c62:	4b56      	ldr	r3, [pc, #344]	; (8002dbc <Modalita+0x1474>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	f000 8131 	beq.w	8002ece <Modalita+0x1586>


			/******************* END USCITA CON DOPPIO CLICK ***************/


			while(tCelsius<tExt) //se la temperatura interna è minore di quella esterna apro gli sportellini per velocizzare il riscaldamento
 8002c6c:	e0f8      	b.n	8002e60 <Modalita+0x1518>
			{
				/****************** COMANDI APERTURA SERVO *********************************/

				HAL_Delay(500);
 8002c6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c72:	f002 fe8f 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 230); 	//SERVO 1 ALTO
 8002c76:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <Modalita+0x1478>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	22e6      	movs	r2, #230	; 0xe6
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 8002c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c82:	f002 fe87 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 230);	// SERVO 2 BASSO
 8002c86:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <Modalita+0x1478>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	22e6      	movs	r2, #230	; 0xe6
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38



				/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

				FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 8002c8e:	f7fe fdb3 	bl	80017f8 <FireExit>


				if(fire==1)
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <Modalita+0x1474>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	f000 80ee 	beq.w	8002e78 <Modalita+0x1530>
				}


				/******************* END USCITA CON DOPPIO CLICK ***************/

				HD44780_Init(2);
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f7fe f9cb 	bl	8001038 <HD44780_Init>
				HD44780_Clear();
 8002ca2:	f7fe fa4d 	bl	8001140 <HD44780_Clear>
				HD44780_SetCursor(0,0);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7fe fa5f 	bl	800116c <HD44780_SetCursor>
				HAL_Delay(20);
 8002cae:	2014      	movs	r0, #20
 8002cb0:	f002 fe70 	bl	8005994 <HAL_Delay>
				HD44780_PrintStr("PTC Accesa ");
 8002cb4:	4835      	ldr	r0, [pc, #212]	; (8002d8c <Modalita+0x1444>)
 8002cb6:	f7fe faca 	bl	800124e <HD44780_PrintStr>
				HAL_Delay(500);
 8002cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cbe:	f002 fe69 	bl	8005994 <HAL_Delay>

				/********************************* LETTURA TEMPERATURA ***************************/

				if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8002cc2:	4933      	ldr	r1, [pc, #204]	; (8002d90 <Modalita+0x1448>)
 8002cc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cc8:	f7fe fbca 	bl	8001460 <DHT22_Start>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 80a9 	beq.w	8002e26 <Modalita+0x14de>
				{
					RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8002cd4:	492e      	ldr	r1, [pc, #184]	; (8002d90 <Modalita+0x1448>)
 8002cd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cda:	f7fe fc41 	bl	8001560 <DHT22_Read>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <Modalita+0x144c>)
 8002ce4:	701a      	strb	r2, [r3, #0]
					RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8002ce6:	492a      	ldr	r1, [pc, #168]	; (8002d90 <Modalita+0x1448>)
 8002ce8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cec:	f7fe fc38 	bl	8001560 <DHT22_Read>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <Modalita+0x1450>)
 8002cf6:	701a      	strb	r2, [r3, #0]
					TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8002cf8:	4925      	ldr	r1, [pc, #148]	; (8002d90 <Modalita+0x1448>)
 8002cfa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cfe:	f7fe fc2f 	bl	8001560 <DHT22_Read>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <Modalita+0x1454>)
 8002d08:	701a      	strb	r2, [r3, #0]
					TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8002d0a:	4921      	ldr	r1, [pc, #132]	; (8002d90 <Modalita+0x1448>)
 8002d0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d10:	f7fe fc26 	bl	8001560 <DHT22_Read>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <Modalita+0x1458>)
 8002d1a:	701a      	strb	r2, [r3, #0]
					SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8002d1c:	491c      	ldr	r1, [pc, #112]	; (8002d90 <Modalita+0x1448>)
 8002d1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d22:	f7fe fc1d 	bl	8001560 <DHT22_Read>
 8002d26:	4603      	mov	r3, r0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <Modalita+0x145c>)
 8002d2c:	701a      	strb	r2, [r3, #0]
					CHECK = RH1 + RH2 + TC1 + TC2;
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <Modalita+0x144c>)
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <Modalita+0x1450>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <Modalita+0x1454>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <Modalita+0x1458>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <Modalita+0x1460>)
 8002d4c:	701a      	strb	r2, [r3, #0]
					if (CHECK == SUM)
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <Modalita+0x1460>)
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <Modalita+0x145c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d165      	bne.n	8002e26 <Modalita+0x14de>
					{
						if (TC1>127) // If TC1=10000000, negative temperature
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <Modalita+0x1454>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da2f      	bge.n	8002dc4 <Modalita+0x147c>
						{
							tCelsius = (float)TC2/10*(-1);
 8002d64:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <Modalita+0x1458>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d70:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d78:	eef1 7a67 	vneg.f32	s15, s15
 8002d7c:	edc7 7a02 	vstr	s15, [r7, #8]
 8002d80:	e030      	b.n	8002de4 <Modalita+0x149c>
 8002d82:	bf00      	nop
 8002d84:	20000474 	.word	0x20000474
 8002d88:	200003e4 	.word	0x200003e4
 8002d8c:	0800dac8 	.word	0x0800dac8
 8002d90:	40020000 	.word	0x40020000
 8002d94:	20000500 	.word	0x20000500
 8002d98:	20000501 	.word	0x20000501
 8002d9c:	20000502 	.word	0x20000502
 8002da0:	20000503 	.word	0x20000503
 8002da4:	20000504 	.word	0x20000504
 8002da8:	20000505 	.word	0x20000505
 8002dac:	42000000 	.word	0x42000000
 8002db0:	20000514 	.word	0x20000514
 8002db4:	20000538 	.word	0x20000538
 8002db8:	2000052c 	.word	0x2000052c
 8002dbc:	200005b4 	.word	0x200005b4
 8002dc0:	2000042c 	.word	0x2000042c
						}
						else
						{
							tCelsius = (float)((TC1<<8)|TC2)/10;
 8002dc4:	4baa      	ldr	r3, [pc, #680]	; (8003070 <Modalita+0x1728>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	4aaa      	ldr	r2, [pc, #680]	; (8003074 <Modalita+0x172c>)
 8002dcc:	7812      	ldrb	r2, [r2, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	ee07 3a90 	vmov	s15, r3
 8002dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002ddc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002de0:	edc7 7a02 	vstr	s15, [r7, #8]
						}
						tFahrenheit = tCelsius * 9/5 + 32;
 8002de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002dec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002df0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8002df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df8:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003078 <Modalita+0x1730>
 8002dfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e00:	4b9e      	ldr	r3, [pc, #632]	; (800307c <Modalita+0x1734>)
 8002e02:	edc3 7a00 	vstr	s15, [r3]
						RH = (float) ((RH1<<8)|RH2)/10;
 8002e06:	4b9e      	ldr	r3, [pc, #632]	; (8003080 <Modalita+0x1738>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	4a9d      	ldr	r2, [pc, #628]	; (8003084 <Modalita+0x173c>)
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	ee07 3a90 	vmov	s15, r3
 8002e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e22:	edc7 7a01 	vstr	s15, [r7, #4]


				/********************************* END LETTURA TEMPERATURA ***************************/


				HAL_Delay(200);
 8002e26:	20c8      	movs	r0, #200	; 0xc8
 8002e28:	f002 fdb4 	bl	8005994 <HAL_Delay>
				Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 8002e2c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002e30:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e34:	f7fe fc12 	bl	800165c <Display_Temp>
				HAL_Delay(1000);
 8002e38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3c:	f002 fdaa 	bl	8005994 <HAL_Delay>
				Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 8002e40:	4b91      	ldr	r3, [pc, #580]	; (8003088 <Modalita+0x1740>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	4b91      	ldr	r3, [pc, #580]	; (800308c <Modalita+0x1744>)
 8002e48:	ed93 7a00 	vldr	s14, [r3]
 8002e4c:	eef0 0a47 	vmov.f32	s1, s14
 8002e50:	eeb0 0a67 	vmov.f32	s0, s15
 8002e54:	f7fe fc78 	bl	8001748 <Display_Temp_EXT>
				HAL_Delay(1000);
 8002e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e5c:	f002 fd9a 	bl	8005994 <HAL_Delay>
			while(tCelsius<tExt) //se la temperatura interna è minore di quella esterna apro gli sportellini per velocizzare il riscaldamento
 8002e60:	4b89      	ldr	r3, [pc, #548]	; (8003088 <Modalita+0x1740>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	f53f aefc 	bmi.w	8002c6e <Modalita+0x1326>
 8002e76:	e000      	b.n	8002e7a <Modalita+0x1532>
					break; //torno nel menu
 8002e78:	bf00      	nop

			}

				// si chiudono gli sportelli quando si raggiunge la temperatura ambiente
				HAL_Delay(500);
 8002e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e7e:	f002 fd89 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 700); 		//SERVO 1 ALTO
 8002e82:	4b83      	ldr	r3, [pc, #524]	; (8003090 <Modalita+0x1748>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002e8a:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 8002e8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e90:	f002 fd80 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 700);		// SERVO 2 BASSO
 8002e94:	4b7e      	ldr	r3, [pc, #504]	; (8003090 <Modalita+0x1748>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002e9c:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 8002e9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ea2:	f002 fd77 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 10);	 // PELTIER HOT FAN SPENTA A CAUTELA LA SPENGO ORA
 8002ea6:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <Modalita+0x174c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	220a      	movs	r2, #10
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 10); 	// PELTIER COLD FAN SPENTA A CAUTELA LA SPENGO ORA
 8002eae:	4b7a      	ldr	r3, [pc, #488]	; (8003098 <Modalita+0x1750>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	220a      	movs	r2, #10
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
		while(tCelsius<T_Hot) // comparo la temperatura interna della camera con quella da raggiungere
 8002eb6:	4b79      	ldr	r3, [pc, #484]	; (800309c <Modalita+0x1754>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	f53f add0 	bmi.w	8002a6c <Modalita+0x1124>
 8002ecc:	e000      	b.n	8002ed0 <Modalita+0x1588>
				break; // torno nel menu
 8002ece:	bf00      	nop

		}
		//esco dall'IF non appena la temperatura interna sarà uguale alla temperatura da raggiungere
		//a questo punto spengo la PTC e lascio accese solo le ventole

		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); // PTC SPENTA
 8002ed0:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <Modalita+0x1758>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	220a      	movs	r2, #10
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

		HD44780_Init(2);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f7fe f8ad 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8002ede:	f7fe f92f 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fe f941 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 8002eea:	2014      	movs	r0, #20
 8002eec:	f002 fd52 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("PTC Spenta ");
 8002ef0:	486c      	ldr	r0, [pc, #432]	; (80030a4 <Modalita+0x175c>)
 8002ef2:	f7fe f9ac 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 8002ef6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002efa:	f002 fd4b 	bl	8005994 <HAL_Delay>

		HD44780_Init(2);
 8002efe:	2002      	movs	r0, #2
 8002f00:	f7fe f89a 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8002f04:	f7fe f91c 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8002f08:	2100      	movs	r1, #0
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fe f92e 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 8002f10:	2014      	movs	r0, #20
 8002f12:	f002 fd3f 	bl	8005994 <HAL_Delay>
		sprintf (strh, "%.1f gradi raggiunti", T_Hot); 			//stampa temperatura
 8002f16:	4b61      	ldr	r3, [pc, #388]	; (800309c <Modalita+0x1754>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb34 	bl	8000588 <__aeabi_f2d>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4960      	ldr	r1, [pc, #384]	; (80030a8 <Modalita+0x1760>)
 8002f26:	4861      	ldr	r0, [pc, #388]	; (80030ac <Modalita+0x1764>)
 8002f28:	f006 ff6e 	bl	8009e08 <siprintf>
		HD44780_PrintStr(strh);
 8002f2c:	485f      	ldr	r0, [pc, #380]	; (80030ac <Modalita+0x1764>)
 8002f2e:	f7fe f98e 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 8002f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f36:	f002 fd2d 	bl	8005994 <HAL_Delay>

		Display_Temp(tCelsius, RH);
 8002f3a:	edd7 0a01 	vldr	s1, [r7, #4]
 8002f3e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f42:	f7fe fb8b 	bl	800165c <Display_Temp>
		HAL_Delay(5000);
 8002f46:	f241 3088 	movw	r0, #5000	; 0x1388
 8002f4a:	f002 fd23 	bl	8005994 <HAL_Delay>

		mode = 0; //esco dal while: termina la modalità 3
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
	while (mode == 3) 		// SALITA: da minima a massima
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	f43f ad46 	beq.w	80029e6 <Modalita+0x109e>
	}



	while (mode == 4) // DISCESA: dalla temperatura massima a quella minima
 8002f5a:	f000 bcb4 	b.w	80038c6 <Modalita+0x1f7e>
	{

		while(tCelsius<T_Hot) //comparo la temperatura interna della camera con quella da raggiungere
		{
			__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 1000); // PTC ACCESA: bisogna riscaldare l'interno della camera
 8002f5e:	4b50      	ldr	r3, [pc, #320]	; (80030a0 <Modalita+0x1758>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 1000); // PTC FAN ACCESA
 8002f68:	4b4b      	ldr	r3, [pc, #300]	; (8003098 <Modalita+0x1750>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38

			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10);	//SPENGO PELTIER
 8002f72:	4b48      	ldr	r3, [pc, #288]	; (8003094 <Modalita+0x174c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	220a      	movs	r2, #10
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 10); // PELTIER HOT FAN SPENTA
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <Modalita+0x174c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	220a      	movs	r2, #10
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 10); // PELTIER COLD FAN SPENTA
 8002f82:	4b45      	ldr	r3, [pc, #276]	; (8003098 <Modalita+0x1750>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	220a      	movs	r2, #10
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34

			HD44780_Init(2);
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	f7fe f854 	bl	8001038 <HD44780_Init>
			HD44780_Clear();
 8002f90:	f7fe f8d6 	bl	8001140 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8002f94:	2100      	movs	r1, #0
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe f8e8 	bl	800116c <HD44780_SetCursor>
			HAL_Delay(20);
 8002f9c:	2014      	movs	r0, #20
 8002f9e:	f002 fcf9 	bl	8005994 <HAL_Delay>
			HD44780_PrintStr("PTC Accesa ");
 8002fa2:	4843      	ldr	r0, [pc, #268]	; (80030b0 <Modalita+0x1768>)
 8002fa4:	f7fe f953 	bl	800124e <HD44780_PrintStr>
			HAL_Delay(500);
 8002fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fac:	f002 fcf2 	bl	8005994 <HAL_Delay>

			/********************************* LETTURA TEMPERATURA ***************************/

			if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8002fb0:	4940      	ldr	r1, [pc, #256]	; (80030b4 <Modalita+0x176c>)
 8002fb2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fb6:	f7fe fa53 	bl	8001460 <DHT22_Start>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80b0 	beq.w	8003122 <Modalita+0x17da>
			{
				RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8002fc2:	493c      	ldr	r1, [pc, #240]	; (80030b4 <Modalita+0x176c>)
 8002fc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fc8:	f7fe faca 	bl	8001560 <DHT22_Read>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <Modalita+0x1738>)
 8002fd2:	701a      	strb	r2, [r3, #0]
				RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8002fd4:	4937      	ldr	r1, [pc, #220]	; (80030b4 <Modalita+0x176c>)
 8002fd6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fda:	f7fe fac1 	bl	8001560 <DHT22_Read>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <Modalita+0x173c>)
 8002fe4:	701a      	strb	r2, [r3, #0]
				TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8002fe6:	4933      	ldr	r1, [pc, #204]	; (80030b4 <Modalita+0x176c>)
 8002fe8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fec:	f7fe fab8 	bl	8001560 <DHT22_Read>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <Modalita+0x1728>)
 8002ff6:	701a      	strb	r2, [r3, #0]
				TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8002ff8:	492e      	ldr	r1, [pc, #184]	; (80030b4 <Modalita+0x176c>)
 8002ffa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ffe:	f7fe faaf 	bl	8001560 <DHT22_Read>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <Modalita+0x172c>)
 8003008:	701a      	strb	r2, [r3, #0]
				SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 800300a:	492a      	ldr	r1, [pc, #168]	; (80030b4 <Modalita+0x176c>)
 800300c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003010:	f7fe faa6 	bl	8001560 <DHT22_Read>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <Modalita+0x1770>)
 800301a:	701a      	strb	r2, [r3, #0]
				CHECK = RH1 + RH2 + TC1 + TC2;
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <Modalita+0x1738>)
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <Modalita+0x173c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	4413      	add	r3, r2
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <Modalita+0x1728>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4413      	add	r3, r2
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b10      	ldr	r3, [pc, #64]	; (8003074 <Modalita+0x172c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4413      	add	r3, r2
 8003036:	b2da      	uxtb	r2, r3
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <Modalita+0x1774>)
 800303a:	701a      	strb	r2, [r3, #0]
				if (CHECK == SUM)
 800303c:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <Modalita+0x1774>)
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <Modalita+0x1770>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d16c      	bne.n	8003122 <Modalita+0x17da>
				{
					if (TC1>127) // If TC1=10000000, negative temperature
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <Modalita+0x1728>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b25b      	sxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	da36      	bge.n	80030c0 <Modalita+0x1778>
					{
						tCelsius = (float)TC2/10*(-1);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <Modalita+0x172c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800305e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003066:	eef1 7a67 	vneg.f32	s15, s15
 800306a:	edc7 7a02 	vstr	s15, [r7, #8]
 800306e:	e037      	b.n	80030e0 <Modalita+0x1798>
 8003070:	20000502 	.word	0x20000502
 8003074:	20000503 	.word	0x20000503
 8003078:	42000000 	.word	0x42000000
 800307c:	20000514 	.word	0x20000514
 8003080:	20000500 	.word	0x20000500
 8003084:	20000501 	.word	0x20000501
 8003088:	20000538 	.word	0x20000538
 800308c:	2000052c 	.word	0x2000052c
 8003090:	2000042c 	.word	0x2000042c
 8003094:	2000039c 	.word	0x2000039c
 8003098:	200003e4 	.word	0x200003e4
 800309c:	20000014 	.word	0x20000014
 80030a0:	20000474 	.word	0x20000474
 80030a4:	0800dad4 	.word	0x0800dad4
 80030a8:	0800daa0 	.word	0x0800daa0
 80030ac:	20000550 	.word	0x20000550
 80030b0:	0800dac8 	.word	0x0800dac8
 80030b4:	40020000 	.word	0x40020000
 80030b8:	20000504 	.word	0x20000504
 80030bc:	20000505 	.word	0x20000505
					}
					else
					{
						tCelsius = (float)((TC1<<8)|TC2)/10;
 80030c0:	4bc7      	ldr	r3, [pc, #796]	; (80033e0 <Modalita+0x1a98>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	4ac7      	ldr	r2, [pc, #796]	; (80033e4 <Modalita+0x1a9c>)
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030d4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030dc:	edc7 7a02 	vstr	s15, [r7, #8]
					}
					tFahrenheit = tCelsius * 9/5 + 32;
 80030e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80030e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030ec:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80030f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030f4:	ed9f 7abc 	vldr	s14, [pc, #752]	; 80033e8 <Modalita+0x1aa0>
 80030f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030fc:	4bbb      	ldr	r3, [pc, #748]	; (80033ec <Modalita+0x1aa4>)
 80030fe:	edc3 7a00 	vstr	s15, [r3]
					RH = (float) ((RH1<<8)|RH2)/10;
 8003102:	4bbb      	ldr	r3, [pc, #748]	; (80033f0 <Modalita+0x1aa8>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	4aba      	ldr	r2, [pc, #744]	; (80033f4 <Modalita+0x1aac>)
 800310a:	7812      	ldrb	r2, [r2, #0]
 800310c:	4313      	orrs	r3, r2
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003116:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800311a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800311e:	edc7 7a01 	vstr	s15, [r7, #4]


			/********************************* END LETTURA TEMPERATURA ***************************/


			HAL_Delay(200);
 8003122:	20c8      	movs	r0, #200	; 0xc8
 8003124:	f002 fc36 	bl	8005994 <HAL_Delay>
			Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 8003128:	edd7 0a01 	vldr	s1, [r7, #4]
 800312c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003130:	f7fe fa94 	bl	800165c <Display_Temp>
			HAL_Delay(1000);
 8003134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003138:	f002 fc2c 	bl	8005994 <HAL_Delay>
			Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 800313c:	4bae      	ldr	r3, [pc, #696]	; (80033f8 <Modalita+0x1ab0>)
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	4bae      	ldr	r3, [pc, #696]	; (80033fc <Modalita+0x1ab4>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	eef0 0a47 	vmov.f32	s1, s14
 800314c:	eeb0 0a67 	vmov.f32	s0, s15
 8003150:	f7fe fafa 	bl	8001748 <Display_Temp_EXT>
			HAL_Delay(1000);
 8003154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003158:	f002 fc1c 	bl	8005994 <HAL_Delay>


			/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

			FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 800315c:	f7fe fb4c 	bl	80017f8 <FireExit>


			if(fire==1)
 8003160:	4ba7      	ldr	r3, [pc, #668]	; (8003400 <Modalita+0x1ab8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	f000 8104 	beq.w	8003372 <Modalita+0x1a2a>

			/******************* END USCITA CON DOPPIO CLICK ***************/



			while(tCelsius<tExt) //finchè la temperatura interna è minore di quella esterna apro gli sportellini per velocizzare il riscaldamento
 800316a:	e0d7      	b.n	800331c <Modalita+0x19d4>
			{
				/****************** COMANDI APERTURA SERVO *********************************/

				HAL_Delay(500);
 800316c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003170:	f002 fc10 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 230); 		//SERVO 1 ALTO
 8003174:	4ba3      	ldr	r3, [pc, #652]	; (8003404 <Modalita+0x1abc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	22e6      	movs	r2, #230	; 0xe6
 800317a:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 800317c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003180:	f002 fc08 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 230);		// SERVO 2 BASSO
 8003184:	4b9f      	ldr	r3, [pc, #636]	; (8003404 <Modalita+0x1abc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	22e6      	movs	r2, #230	; 0xe6
 800318a:	639a      	str	r2, [r3, #56]	; 0x38



				/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

				FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 800318c:	f7fe fb34 	bl	80017f8 <FireExit>


				if(fire==1)
 8003190:	4b9b      	ldr	r3, [pc, #620]	; (8003400 <Modalita+0x1ab8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f000 80cd 	beq.w	8003334 <Modalita+0x19ec>
				}


				/******************* END USCITA CON DOPPIO CLICK ***************/

				HD44780_Init(2);
 800319a:	2002      	movs	r0, #2
 800319c:	f7fd ff4c 	bl	8001038 <HD44780_Init>
				HD44780_Clear();
 80031a0:	f7fd ffce 	bl	8001140 <HD44780_Clear>
				HD44780_SetCursor(0,0);
 80031a4:	2100      	movs	r1, #0
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fd ffe0 	bl	800116c <HD44780_SetCursor>
				HAL_Delay(20);
 80031ac:	2014      	movs	r0, #20
 80031ae:	f002 fbf1 	bl	8005994 <HAL_Delay>
				HD44780_PrintStr("PTC Accesa ");
 80031b2:	4895      	ldr	r0, [pc, #596]	; (8003408 <Modalita+0x1ac0>)
 80031b4:	f7fe f84b 	bl	800124e <HD44780_PrintStr>
				HAL_Delay(500);
 80031b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031bc:	f002 fbea 	bl	8005994 <HAL_Delay>

				/********************************* LETTURA TEMPERATURA ***************************/

				if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 80031c0:	4992      	ldr	r1, [pc, #584]	; (800340c <Modalita+0x1ac4>)
 80031c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031c6:	f7fe f94b 	bl	8001460 <DHT22_Start>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8088 	beq.w	80032e2 <Modalita+0x199a>
				{
					RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 80031d2:	498e      	ldr	r1, [pc, #568]	; (800340c <Modalita+0x1ac4>)
 80031d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031d8:	f7fe f9c2 	bl	8001560 <DHT22_Read>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	4b83      	ldr	r3, [pc, #524]	; (80033f0 <Modalita+0x1aa8>)
 80031e2:	701a      	strb	r2, [r3, #0]
					RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 80031e4:	4989      	ldr	r1, [pc, #548]	; (800340c <Modalita+0x1ac4>)
 80031e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031ea:	f7fe f9b9 	bl	8001560 <DHT22_Read>
 80031ee:	4603      	mov	r3, r0
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b80      	ldr	r3, [pc, #512]	; (80033f4 <Modalita+0x1aac>)
 80031f4:	701a      	strb	r2, [r3, #0]
					TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 80031f6:	4985      	ldr	r1, [pc, #532]	; (800340c <Modalita+0x1ac4>)
 80031f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031fc:	f7fe f9b0 	bl	8001560 <DHT22_Read>
 8003200:	4603      	mov	r3, r0
 8003202:	461a      	mov	r2, r3
 8003204:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <Modalita+0x1a98>)
 8003206:	701a      	strb	r2, [r3, #0]
					TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8003208:	4980      	ldr	r1, [pc, #512]	; (800340c <Modalita+0x1ac4>)
 800320a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800320e:	f7fe f9a7 	bl	8001560 <DHT22_Read>
 8003212:	4603      	mov	r3, r0
 8003214:	461a      	mov	r2, r3
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <Modalita+0x1a9c>)
 8003218:	701a      	strb	r2, [r3, #0]
					SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 800321a:	497c      	ldr	r1, [pc, #496]	; (800340c <Modalita+0x1ac4>)
 800321c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003220:	f7fe f99e 	bl	8001560 <DHT22_Read>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	4b79      	ldr	r3, [pc, #484]	; (8003410 <Modalita+0x1ac8>)
 800322a:	701a      	strb	r2, [r3, #0]
					CHECK = RH1 + RH2 + TC1 + TC2;
 800322c:	4b70      	ldr	r3, [pc, #448]	; (80033f0 <Modalita+0x1aa8>)
 800322e:	781a      	ldrb	r2, [r3, #0]
 8003230:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <Modalita+0x1aac>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4413      	add	r3, r2
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b69      	ldr	r3, [pc, #420]	; (80033e0 <Modalita+0x1a98>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4413      	add	r3, r2
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b68      	ldr	r3, [pc, #416]	; (80033e4 <Modalita+0x1a9c>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	4413      	add	r3, r2
 8003246:	b2da      	uxtb	r2, r3
 8003248:	4b72      	ldr	r3, [pc, #456]	; (8003414 <Modalita+0x1acc>)
 800324a:	701a      	strb	r2, [r3, #0]
					if (CHECK == SUM)
 800324c:	4b71      	ldr	r3, [pc, #452]	; (8003414 <Modalita+0x1acc>)
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	4b6f      	ldr	r3, [pc, #444]	; (8003410 <Modalita+0x1ac8>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d144      	bne.n	80032e2 <Modalita+0x199a>
					{
						if (TC1>127) // If TC1=10000000, negative temperature
 8003258:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <Modalita+0x1a98>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	b25b      	sxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	da0e      	bge.n	8003280 <Modalita+0x1938>
						{
							tCelsius = (float)TC2/10*(-1);
 8003262:	4b60      	ldr	r3, [pc, #384]	; (80033e4 <Modalita+0x1a9c>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800326e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003276:	eef1 7a67 	vneg.f32	s15, s15
 800327a:	edc7 7a02 	vstr	s15, [r7, #8]
 800327e:	e00f      	b.n	80032a0 <Modalita+0x1958>
						}
						else
						{
							tCelsius = (float)((TC1<<8)|TC2)/10;
 8003280:	4b57      	ldr	r3, [pc, #348]	; (80033e0 <Modalita+0x1a98>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <Modalita+0x1a9c>)
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003294:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800329c:	edc7 7a02 	vstr	s15, [r7, #8]
						}
						tFahrenheit = tCelsius * 9/5 + 32;
 80032a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80032a4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80032a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ac:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80032b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032b4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80033e8 <Modalita+0x1aa0>
 80032b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <Modalita+0x1aa4>)
 80032be:	edc3 7a00 	vstr	s15, [r3]
						RH = (float) ((RH1<<8)|RH2)/10;
 80032c2:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <Modalita+0x1aa8>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <Modalita+0x1aac>)
 80032ca:	7812      	ldrb	r2, [r2, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80032da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032de:	edc7 7a01 	vstr	s15, [r7, #4]


				/********************************* END LETTURA TEMPERATURA ***************************/


				HAL_Delay(200);
 80032e2:	20c8      	movs	r0, #200	; 0xc8
 80032e4:	f002 fb56 	bl	8005994 <HAL_Delay>
				Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 80032e8:	edd7 0a01 	vldr	s1, [r7, #4]
 80032ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80032f0:	f7fe f9b4 	bl	800165c <Display_Temp>
				HAL_Delay(1000);
 80032f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032f8:	f002 fb4c 	bl	8005994 <HAL_Delay>
				Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 80032fc:	4b3e      	ldr	r3, [pc, #248]	; (80033f8 <Modalita+0x1ab0>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	4b3e      	ldr	r3, [pc, #248]	; (80033fc <Modalita+0x1ab4>)
 8003304:	ed93 7a00 	vldr	s14, [r3]
 8003308:	eef0 0a47 	vmov.f32	s1, s14
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	f7fe fa1a 	bl	8001748 <Display_Temp_EXT>
				HAL_Delay(1000);
 8003314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003318:	f002 fb3c 	bl	8005994 <HAL_Delay>
			while(tCelsius<tExt) //finchè la temperatura interna è minore di quella esterna apro gli sportellini per velocizzare il riscaldamento
 800331c:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <Modalita+0x1ab0>)
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ed97 7a02 	vldr	s14, [r7, #8]
 8003326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	f53f af1d 	bmi.w	800316c <Modalita+0x1824>
 8003332:	e000      	b.n	8003336 <Modalita+0x19ee>
					break; 		// torno nel menu
 8003334:	bf00      	nop


			}

				//si chiudono gli sportelli: si è raggiunto la temperatura ambiente
				HAL_Delay(500);
 8003336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800333a:	f002 fb2b 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 700); 		// SERVO 1 ALTO
 800333e:	4b31      	ldr	r3, [pc, #196]	; (8003404 <Modalita+0x1abc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003346:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 8003348:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800334c:	f002 fb22 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 700);		// SERVO 2 BASSO
 8003350:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <Modalita+0x1abc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
		while(tCelsius<T_Hot) //comparo la temperatura interna della camera con quella da raggiungere
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <Modalita+0x1ad0>)
 800335c:	edd3 7a00 	vldr	s15, [r3]
 8003360:	ed97 7a02 	vldr	s14, [r7, #8]
 8003364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336c:	f53f adf7 	bmi.w	8002f5e <Modalita+0x1616>
 8003370:	e000      	b.n	8003374 <Modalita+0x1a2c>
				break; 		// torno nel menu
 8003372:	bf00      	nop

		}
		//esco dall'IF non appena la temperatura interna sarà uguale alla temperatura da raggiungere
		//a questo punto spengo la PTC e lascio accese solo le ventole

		__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); // PTC SPENTA
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <Modalita+0x1ad4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	220a      	movs	r2, #10
 800337a:	635a      	str	r2, [r3, #52]	; 0x34

		HD44780_Init(2);
 800337c:	2002      	movs	r0, #2
 800337e:	f7fd fe5b 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8003382:	f7fd fedd 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8003386:	2100      	movs	r1, #0
 8003388:	2000      	movs	r0, #0
 800338a:	f7fd feef 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 800338e:	2014      	movs	r0, #20
 8003390:	f002 fb00 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("PTC Spenta ");
 8003394:	4822      	ldr	r0, [pc, #136]	; (8003420 <Modalita+0x1ad8>)
 8003396:	f7fd ff5a 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 800339a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800339e:	f002 faf9 	bl	8005994 <HAL_Delay>

		HD44780_Init(2);
 80033a2:	2002      	movs	r0, #2
 80033a4:	f7fd fe48 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 80033a8:	f7fd feca 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 80033ac:	2100      	movs	r1, #0
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fd fedc 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 80033b4:	2014      	movs	r0, #20
 80033b6:	f002 faed 	bl	8005994 <HAL_Delay>
		sprintf (strh, "%.1f gradi raggiunti", T_Hot); 			//stampa temperatura
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <Modalita+0x1ad0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f8e2 	bl	8000588 <__aeabi_f2d>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4916      	ldr	r1, [pc, #88]	; (8003424 <Modalita+0x1adc>)
 80033ca:	4817      	ldr	r0, [pc, #92]	; (8003428 <Modalita+0x1ae0>)
 80033cc:	f006 fd1c 	bl	8009e08 <siprintf>
		HD44780_PrintStr(strh);
 80033d0:	4815      	ldr	r0, [pc, #84]	; (8003428 <Modalita+0x1ae0>)
 80033d2:	f7fd ff3c 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 80033d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033da:	f002 fadb 	bl	8005994 <HAL_Delay>



		while(tCelsius>T_Cold) //comparo la temperatura interna della camera con quella da raggiungere. Se la prima è maggiore --> bisogna raffreddare --> accendo le Peltier
 80033de:	e224      	b.n	800382a <Modalita+0x1ee2>
 80033e0:	20000502 	.word	0x20000502
 80033e4:	20000503 	.word	0x20000503
 80033e8:	42000000 	.word	0x42000000
 80033ec:	20000514 	.word	0x20000514
 80033f0:	20000500 	.word	0x20000500
 80033f4:	20000501 	.word	0x20000501
 80033f8:	20000538 	.word	0x20000538
 80033fc:	2000052c 	.word	0x2000052c
 8003400:	200005b4 	.word	0x200005b4
 8003404:	2000042c 	.word	0x2000042c
 8003408:	0800dac8 	.word	0x0800dac8
 800340c:	40020000 	.word	0x40020000
 8003410:	20000504 	.word	0x20000504
 8003414:	20000505 	.word	0x20000505
 8003418:	20000014 	.word	0x20000014
 800341c:	20000474 	.word	0x20000474
 8003420:	0800dad4 	.word	0x0800dad4
 8003424:	0800daa0 	.word	0x0800daa0
 8003428:	20000550 	.word	0x20000550
		{

			if(fire==1)
 800342c:	4bb4      	ldr	r3, [pc, #720]	; (8003700 <Modalita+0x1db8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d103      	bne.n	800343c <Modalita+0x1af4>
			{
				fire = 0; //ripristino il flag
 8003434:	4bb2      	ldr	r3, [pc, #712]	; (8003700 <Modalita+0x1db8>)
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
				break; // torno nel menu
 800343a:	e203      	b.n	8003844 <Modalita+0x1efc>
			}
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 1000); // PELTIER ACCESA, valore del compare alto (1000)
 800343c:	4bb1      	ldr	r3, [pc, #708]	; (8003704 <Modalita+0x1dbc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 1000); // PELTIER HOT FAN  ACCESA
 8003446:	4baf      	ldr	r3, [pc, #700]	; (8003704 <Modalita+0x1dbc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 1000); // PELTIER COLD FAN ACCESA
 8003450:	4bad      	ldr	r3, [pc, #692]	; (8003708 <Modalita+0x1dc0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003458:	635a      	str	r2, [r3, #52]	; 0x34

			HD44780_Init(2);
 800345a:	2002      	movs	r0, #2
 800345c:	f7fd fdec 	bl	8001038 <HD44780_Init>
			HD44780_Clear();
 8003460:	f7fd fe6e 	bl	8001140 <HD44780_Clear>
			HD44780_SetCursor(0,0);
 8003464:	2100      	movs	r1, #0
 8003466:	2000      	movs	r0, #0
 8003468:	f7fd fe80 	bl	800116c <HD44780_SetCursor>
			HAL_Delay(20);
 800346c:	2014      	movs	r0, #20
 800346e:	f002 fa91 	bl	8005994 <HAL_Delay>
			HD44780_PrintStr("Peltier Accesa ");
 8003472:	48a6      	ldr	r0, [pc, #664]	; (800370c <Modalita+0x1dc4>)
 8003474:	f7fd feeb 	bl	800124e <HD44780_PrintStr>
			HAL_Delay(500);
 8003478:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800347c:	f002 fa8a 	bl	8005994 <HAL_Delay>

			/********************************* LETTURA TEMPERATURA ***************************/

			if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8003480:	49a3      	ldr	r1, [pc, #652]	; (8003710 <Modalita+0x1dc8>)
 8003482:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003486:	f7fd ffeb 	bl	8001460 <DHT22_Start>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8088 	beq.w	80035a2 <Modalita+0x1c5a>
			{
				RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8003492:	499f      	ldr	r1, [pc, #636]	; (8003710 <Modalita+0x1dc8>)
 8003494:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003498:	f7fe f862 	bl	8001560 <DHT22_Read>
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	4b9c      	ldr	r3, [pc, #624]	; (8003714 <Modalita+0x1dcc>)
 80034a2:	701a      	strb	r2, [r3, #0]
				RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 80034a4:	499a      	ldr	r1, [pc, #616]	; (8003710 <Modalita+0x1dc8>)
 80034a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034aa:	f7fe f859 	bl	8001560 <DHT22_Read>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b99      	ldr	r3, [pc, #612]	; (8003718 <Modalita+0x1dd0>)
 80034b4:	701a      	strb	r2, [r3, #0]
				TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 80034b6:	4996      	ldr	r1, [pc, #600]	; (8003710 <Modalita+0x1dc8>)
 80034b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034bc:	f7fe f850 	bl	8001560 <DHT22_Read>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b95      	ldr	r3, [pc, #596]	; (800371c <Modalita+0x1dd4>)
 80034c6:	701a      	strb	r2, [r3, #0]
				TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 80034c8:	4991      	ldr	r1, [pc, #580]	; (8003710 <Modalita+0x1dc8>)
 80034ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034ce:	f7fe f847 	bl	8001560 <DHT22_Read>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b92      	ldr	r3, [pc, #584]	; (8003720 <Modalita+0x1dd8>)
 80034d8:	701a      	strb	r2, [r3, #0]
				SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 80034da:	498d      	ldr	r1, [pc, #564]	; (8003710 <Modalita+0x1dc8>)
 80034dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034e0:	f7fe f83e 	bl	8001560 <DHT22_Read>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b8e      	ldr	r3, [pc, #568]	; (8003724 <Modalita+0x1ddc>)
 80034ea:	701a      	strb	r2, [r3, #0]
				CHECK = RH1 + RH2 + TC1 + TC2;
 80034ec:	4b89      	ldr	r3, [pc, #548]	; (8003714 <Modalita+0x1dcc>)
 80034ee:	781a      	ldrb	r2, [r3, #0]
 80034f0:	4b89      	ldr	r3, [pc, #548]	; (8003718 <Modalita+0x1dd0>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4413      	add	r3, r2
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	4b88      	ldr	r3, [pc, #544]	; (800371c <Modalita+0x1dd4>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4413      	add	r3, r2
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b87      	ldr	r3, [pc, #540]	; (8003720 <Modalita+0x1dd8>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4413      	add	r3, r2
 8003506:	b2da      	uxtb	r2, r3
 8003508:	4b87      	ldr	r3, [pc, #540]	; (8003728 <Modalita+0x1de0>)
 800350a:	701a      	strb	r2, [r3, #0]
				if (CHECK == SUM)
 800350c:	4b86      	ldr	r3, [pc, #536]	; (8003728 <Modalita+0x1de0>)
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	4b84      	ldr	r3, [pc, #528]	; (8003724 <Modalita+0x1ddc>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d144      	bne.n	80035a2 <Modalita+0x1c5a>
				{
					if (TC1>127) // If TC1=10000000, negative temperature
 8003518:	4b80      	ldr	r3, [pc, #512]	; (800371c <Modalita+0x1dd4>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b25b      	sxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	da0e      	bge.n	8003540 <Modalita+0x1bf8>
					{
						tCelsius = (float)TC2/10*(-1);
 8003522:	4b7f      	ldr	r3, [pc, #508]	; (8003720 <Modalita+0x1dd8>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800352e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003536:	eef1 7a67 	vneg.f32	s15, s15
 800353a:	edc7 7a02 	vstr	s15, [r7, #8]
 800353e:	e00f      	b.n	8003560 <Modalita+0x1c18>
					}
					else
					{
						tCelsius = (float)((TC1<<8)|TC2)/10;
 8003540:	4b76      	ldr	r3, [pc, #472]	; (800371c <Modalita+0x1dd4>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	4a76      	ldr	r2, [pc, #472]	; (8003720 <Modalita+0x1dd8>)
 8003548:	7812      	ldrb	r2, [r2, #0]
 800354a:	4313      	orrs	r3, r2
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003554:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003558:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800355c:	edc7 7a02 	vstr	s15, [r7, #8]
					}
					tFahrenheit = tCelsius * 9/5 + 32;
 8003560:	edd7 7a02 	vldr	s15, [r7, #8]
 8003564:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003568:	ee27 7a87 	vmul.f32	s14, s15, s14
 800356c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003574:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800372c <Modalita+0x1de4>
 8003578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800357c:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <Modalita+0x1de8>)
 800357e:	edc3 7a00 	vstr	s15, [r3]
					RH = (float) ((RH1<<8)|RH2)/10;
 8003582:	4b64      	ldr	r3, [pc, #400]	; (8003714 <Modalita+0x1dcc>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	4a63      	ldr	r2, [pc, #396]	; (8003718 <Modalita+0x1dd0>)
 800358a:	7812      	ldrb	r2, [r2, #0]
 800358c:	4313      	orrs	r3, r2
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003596:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800359a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800359e:	edc7 7a01 	vstr	s15, [r7, #4]


			/********************************* END LETTURA TEMPERATURA ***************************/


			HAL_Delay(200);
 80035a2:	20c8      	movs	r0, #200	; 0xc8
 80035a4:	f002 f9f6 	bl	8005994 <HAL_Delay>
			Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 80035a8:	edd7 0a01 	vldr	s1, [r7, #4]
 80035ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80035b0:	f7fe f854 	bl	800165c <Display_Temp>
			HAL_Delay(1000);
 80035b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035b8:	f002 f9ec 	bl	8005994 <HAL_Delay>
			Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 80035bc:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <Modalita+0x1dec>)
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	4b5d      	ldr	r3, [pc, #372]	; (8003738 <Modalita+0x1df0>)
 80035c4:	ed93 7a00 	vldr	s14, [r3]
 80035c8:	eef0 0a47 	vmov.f32	s1, s14
 80035cc:	eeb0 0a67 	vmov.f32	s0, s15
 80035d0:	f7fe f8ba 	bl	8001748 <Display_Temp_EXT>
			HAL_Delay(1000);
 80035d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035d8:	f002 f9dc 	bl	8005994 <HAL_Delay>


			/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

			FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 80035dc:	f7fe f90c 	bl	80017f8 <FireExit>


			if(fire==1)
 80035e0:	4b47      	ldr	r3, [pc, #284]	; (8003700 <Modalita+0x1db8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	f000 812c 	beq.w	8003842 <Modalita+0x1efa>
			}

			/******************* END USCITA CON DOPPIO CLICK ***************/


			while(tCelsius>tExt)	// se la temperatura interna è maggiore di quella esterna tengo gli sportellini aperti per velocizzare il raffreddamento
 80035ea:	e0f7      	b.n	80037dc <Modalita+0x1e94>
			{

				/****************** COMANDI PER I SERVO *********************************/

				HAL_Delay(500);
 80035ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035f0:	f002 f9d0 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 230); 	//	SERVO 1 ALTO
 80035f4:	4b51      	ldr	r3, [pc, #324]	; (800373c <Modalita+0x1df4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	22e6      	movs	r2, #230	; 0xe6
 80035fa:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 80035fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003600:	f002 f9c8 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 230);	// 	SERVO 2 BASSO
 8003604:	4b4d      	ldr	r3, [pc, #308]	; (800373c <Modalita+0x1df4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	22e6      	movs	r2, #230	; 0xe6
 800360a:	639a      	str	r2, [r3, #56]	; 0x38



				/******************* USCITA CON DOPPIO CLICK ( O TENENEDO PREMUTO) ***************/

				FireExit();		//Se la funzione FireExit() ha fatto scattare l'interruzione
 800360c:	f7fe f8f4 	bl	80017f8 <FireExit>


				if(fire==1)
 8003610:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <Modalita+0x1db8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	f000 80ed 	beq.w	80037f4 <Modalita+0x1eac>
				}


				/******************* END USCITA CON DOPPIO CLICK ***************/

				HD44780_Init(2);
 800361a:	2002      	movs	r0, #2
 800361c:	f7fd fd0c 	bl	8001038 <HD44780_Init>
				HD44780_Clear();
 8003620:	f7fd fd8e 	bl	8001140 <HD44780_Clear>
				HD44780_SetCursor(0,0);
 8003624:	2100      	movs	r1, #0
 8003626:	2000      	movs	r0, #0
 8003628:	f7fd fda0 	bl	800116c <HD44780_SetCursor>
				HAL_Delay(20);
 800362c:	2014      	movs	r0, #20
 800362e:	f002 f9b1 	bl	8005994 <HAL_Delay>
				HD44780_PrintStr("Peltier Accesa ");
 8003632:	4836      	ldr	r0, [pc, #216]	; (800370c <Modalita+0x1dc4>)
 8003634:	f7fd fe0b 	bl	800124e <HD44780_PrintStr>
				HAL_Delay(500);
 8003638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800363c:	f002 f9aa 	bl	8005994 <HAL_Delay>

				/********************************* LETTURA TEMPERATURA ***************************/

				if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8003640:	4933      	ldr	r1, [pc, #204]	; (8003710 <Modalita+0x1dc8>)
 8003642:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003646:	f7fd ff0b 	bl	8001460 <DHT22_Start>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a8 	beq.w	80037a2 <Modalita+0x1e5a>
				{
					RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8003652:	492f      	ldr	r1, [pc, #188]	; (8003710 <Modalita+0x1dc8>)
 8003654:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003658:	f7fd ff82 	bl	8001560 <DHT22_Read>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <Modalita+0x1dcc>)
 8003662:	701a      	strb	r2, [r3, #0]
					RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8003664:	492a      	ldr	r1, [pc, #168]	; (8003710 <Modalita+0x1dc8>)
 8003666:	f44f 7080 	mov.w	r0, #256	; 0x100
 800366a:	f7fd ff79 	bl	8001560 <DHT22_Read>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <Modalita+0x1dd0>)
 8003674:	701a      	strb	r2, [r3, #0]
					TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8003676:	4926      	ldr	r1, [pc, #152]	; (8003710 <Modalita+0x1dc8>)
 8003678:	f44f 7080 	mov.w	r0, #256	; 0x100
 800367c:	f7fd ff70 	bl	8001560 <DHT22_Read>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	4b25      	ldr	r3, [pc, #148]	; (800371c <Modalita+0x1dd4>)
 8003686:	701a      	strb	r2, [r3, #0]
					TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8003688:	4921      	ldr	r1, [pc, #132]	; (8003710 <Modalita+0x1dc8>)
 800368a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800368e:	f7fd ff67 	bl	8001560 <DHT22_Read>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <Modalita+0x1dd8>)
 8003698:	701a      	strb	r2, [r3, #0]
					SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 800369a:	491d      	ldr	r1, [pc, #116]	; (8003710 <Modalita+0x1dc8>)
 800369c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80036a0:	f7fd ff5e 	bl	8001560 <DHT22_Read>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <Modalita+0x1ddc>)
 80036aa:	701a      	strb	r2, [r3, #0]
					CHECK = RH1 + RH2 + TC1 + TC2;
 80036ac:	4b19      	ldr	r3, [pc, #100]	; (8003714 <Modalita+0x1dcc>)
 80036ae:	781a      	ldrb	r2, [r3, #0]
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <Modalita+0x1dd0>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b18      	ldr	r3, [pc, #96]	; (800371c <Modalita+0x1dd4>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b17      	ldr	r3, [pc, #92]	; (8003720 <Modalita+0x1dd8>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	4413      	add	r3, r2
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <Modalita+0x1de0>)
 80036ca:	701a      	strb	r2, [r3, #0]
					if (CHECK == SUM)
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <Modalita+0x1de0>)
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <Modalita+0x1ddc>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d164      	bne.n	80037a2 <Modalita+0x1e5a>
					{
						if (TC1>127) // If TC1=10000000, negative temperature
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <Modalita+0x1dd4>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da2e      	bge.n	8003740 <Modalita+0x1df8>
						{
							tCelsius = (float)TC2/10*(-1);
 80036e2:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <Modalita+0x1dd8>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036ee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80036f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036f6:	eef1 7a67 	vneg.f32	s15, s15
 80036fa:	edc7 7a02 	vstr	s15, [r7, #8]
 80036fe:	e02f      	b.n	8003760 <Modalita+0x1e18>
 8003700:	200005b4 	.word	0x200005b4
 8003704:	2000039c 	.word	0x2000039c
 8003708:	200003e4 	.word	0x200003e4
 800370c:	0800da90 	.word	0x0800da90
 8003710:	40020000 	.word	0x40020000
 8003714:	20000500 	.word	0x20000500
 8003718:	20000501 	.word	0x20000501
 800371c:	20000502 	.word	0x20000502
 8003720:	20000503 	.word	0x20000503
 8003724:	20000504 	.word	0x20000504
 8003728:	20000505 	.word	0x20000505
 800372c:	42000000 	.word	0x42000000
 8003730:	20000514 	.word	0x20000514
 8003734:	20000538 	.word	0x20000538
 8003738:	2000052c 	.word	0x2000052c
 800373c:	2000042c 	.word	0x2000042c
						}
						else
						{
							tCelsius = (float)((TC1<<8)|TC2)/10;
 8003740:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <Modalita+0x1f90>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	4a65      	ldr	r2, [pc, #404]	; (80038dc <Modalita+0x1f94>)
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	ee07 3a90 	vmov	s15, r3
 8003750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003754:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800375c:	edc7 7a02 	vstr	s15, [r7, #8]
						}
						tFahrenheit = tCelsius * 9/5 + 32;
 8003760:	edd7 7a02 	vldr	s15, [r7, #8]
 8003764:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003768:	ee27 7a87 	vmul.f32	s14, s15, s14
 800376c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003774:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80038e0 <Modalita+0x1f98>
 8003778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800377c:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <Modalita+0x1f9c>)
 800377e:	edc3 7a00 	vstr	s15, [r3]
						RH = (float) ((RH1<<8)|RH2)/10;
 8003782:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <Modalita+0x1fa0>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	4a58      	ldr	r2, [pc, #352]	; (80038ec <Modalita+0x1fa4>)
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003796:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800379a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379e:	edc7 7a01 	vstr	s15, [r7, #4]


				/********************************* END LETTURA TEMPERATURA ***************************/


				HAL_Delay(200);
 80037a2:	20c8      	movs	r0, #200	; 0xc8
 80037a4:	f002 f8f6 	bl	8005994 <HAL_Delay>
				Display_Temp(tCelsius, RH);			// stampo temperatura e umidità interne su LCD
 80037a8:	edd7 0a01 	vldr	s1, [r7, #4]
 80037ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80037b0:	f7fd ff54 	bl	800165c <Display_Temp>
				HAL_Delay(1000);
 80037b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037b8:	f002 f8ec 	bl	8005994 <HAL_Delay>
				Display_Temp_EXT(tExt, RH_EXT);		// stampo temperatura e umidità esterne su LCD
 80037bc:	4b4c      	ldr	r3, [pc, #304]	; (80038f0 <Modalita+0x1fa8>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <Modalita+0x1fac>)
 80037c4:	ed93 7a00 	vldr	s14, [r3]
 80037c8:	eef0 0a47 	vmov.f32	s1, s14
 80037cc:	eeb0 0a67 	vmov.f32	s0, s15
 80037d0:	f7fd ffba 	bl	8001748 <Display_Temp_EXT>
				HAL_Delay(1000);
 80037d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037d8:	f002 f8dc 	bl	8005994 <HAL_Delay>
			while(tCelsius>tExt)	// se la temperatura interna è maggiore di quella esterna tengo gli sportellini aperti per velocizzare il raffreddamento
 80037dc:	4b44      	ldr	r3, [pc, #272]	; (80038f0 <Modalita+0x1fa8>)
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80037e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	f73f aefd 	bgt.w	80035ec <Modalita+0x1ca4>
 80037f2:	e000      	b.n	80037f6 <Modalita+0x1eae>
					break; // torno nel menu
 80037f4:	bf00      	nop


			}

				//si chiudono gli sportelli: si è raggiunta la temperatura ambiente
				HAL_Delay(500);
 80037f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037fa:	f002 f8cb 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, 700); 	// SERVO 1 ALTO
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <Modalita+0x1fb0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003806:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(500);
 8003808:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800380c:	f002 f8c2 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, 700);	// SERVO 2 BASSO
 8003810:	4b39      	ldr	r3, [pc, #228]	; (80038f8 <Modalita+0x1fb0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
				HAL_Delay(500);
 800381a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800381e:	f002 f8b9 	bl	8005994 <HAL_Delay>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 10); 	// A CAUTELA VIENE SPENTA ORA LA VENTOLA DELLA PTC
 8003822:	4b36      	ldr	r3, [pc, #216]	; (80038fc <Modalita+0x1fb4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	220a      	movs	r2, #10
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
		while(tCelsius>T_Cold) //comparo la temperatura interna della camera con quella da raggiungere. Se la prima è maggiore --> bisogna raffreddare --> accendo le Peltier
 800382a:	4b35      	ldr	r3, [pc, #212]	; (8003900 <Modalita+0x1fb8>)
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	ed97 7a02 	vldr	s14, [r7, #8]
 8003834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	f73f adf6 	bgt.w	800342c <Modalita+0x1ae4>
 8003840:	e000      	b.n	8003844 <Modalita+0x1efc>
				break; // torno nel menu
 8003842:	bf00      	nop

		}
		//esco dall'IF non appena la temperatura interna sarà uguale alla temperatura da raggiungere
		//a questo punto spengo le peltier e lascio accese solo le ventole

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10);	//PELTIER SPENTA: valore compare basso = 10 (NON ZERO PERCHÈ VIENE ELABORATO COME ALTRO ESTREMO E QUINDI RIMANGONO ACCESE)
 8003844:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <Modalita+0x1fbc>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	220a      	movs	r2, #10
 800384a:	635a      	str	r2, [r3, #52]	; 0x34

		HD44780_Init(2);
 800384c:	2002      	movs	r0, #2
 800384e:	f7fd fbf3 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8003852:	f7fd fc75 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 8003856:	2100      	movs	r1, #0
 8003858:	2000      	movs	r0, #0
 800385a:	f7fd fc87 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 800385e:	2014      	movs	r0, #20
 8003860:	f002 f898 	bl	8005994 <HAL_Delay>
		HD44780_PrintStr("Peltier Spenta ");
 8003864:	4828      	ldr	r0, [pc, #160]	; (8003908 <Modalita+0x1fc0>)
 8003866:	f7fd fcf2 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 800386a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800386e:	f002 f891 	bl	8005994 <HAL_Delay>

		HD44780_Init(2);
 8003872:	2002      	movs	r0, #2
 8003874:	f7fd fbe0 	bl	8001038 <HD44780_Init>
		HD44780_Clear();
 8003878:	f7fd fc62 	bl	8001140 <HD44780_Clear>
		HD44780_SetCursor(0,0);
 800387c:	2100      	movs	r1, #0
 800387e:	2000      	movs	r0, #0
 8003880:	f7fd fc74 	bl	800116c <HD44780_SetCursor>
		HAL_Delay(20);
 8003884:	2014      	movs	r0, #20
 8003886:	f002 f885 	bl	8005994 <HAL_Delay>
		sprintf (strc, "%.1f gradi raggiunti", T_Cold); 			//stampa temperatura
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <Modalita+0x1fb8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fc fe7a 	bl	8000588 <__aeabi_f2d>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	491c      	ldr	r1, [pc, #112]	; (800390c <Modalita+0x1fc4>)
 800389a:	481d      	ldr	r0, [pc, #116]	; (8003910 <Modalita+0x1fc8>)
 800389c:	f006 fab4 	bl	8009e08 <siprintf>
		HD44780_PrintStr(strc);
 80038a0:	481b      	ldr	r0, [pc, #108]	; (8003910 <Modalita+0x1fc8>)
 80038a2:	f7fd fcd4 	bl	800124e <HD44780_PrintStr>
		HAL_Delay(500);
 80038a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038aa:	f002 f873 	bl	8005994 <HAL_Delay>

		Display_Temp(tCelsius, RH);
 80038ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80038b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80038b6:	f7fd fed1 	bl	800165c <Display_Temp>
		HAL_Delay(5000);
 80038ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80038be:	f002 f869 	bl	8005994 <HAL_Delay>

		mode = 0; //esco dal while: termina la modalità 4
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
	while (mode == 4) // DISCESA: dalla temperatura massima a quella minima
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	f43f ad46 	beq.w	800335a <Modalita+0x1a12>
	}

}
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000502 	.word	0x20000502
 80038dc:	20000503 	.word	0x20000503
 80038e0:	42000000 	.word	0x42000000
 80038e4:	20000514 	.word	0x20000514
 80038e8:	20000500 	.word	0x20000500
 80038ec:	20000501 	.word	0x20000501
 80038f0:	20000538 	.word	0x20000538
 80038f4:	2000052c 	.word	0x2000052c
 80038f8:	2000042c 	.word	0x2000042c
 80038fc:	200003e4 	.word	0x200003e4
 8003900:	20000010 	.word	0x20000010
 8003904:	2000039c 	.word	0x2000039c
 8003908:	0800dab8 	.word	0x0800dab8
 800390c:	0800daa0 	.word	0x0800daa0
 8003910:	2000053c 	.word	0x2000053c

08003914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003914:	b5b0      	push	{r4, r5, r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800391a:	f001 ffc9 	bl	80058b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800391e:	f000 ff73 	bl	8004808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003922:	f001 fb33 	bl	8004f8c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003926:	f000 ffdb 	bl	80048e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800392a:	f001 f82b 	bl	8004984 <MX_ADC2_Init>
  MX_I2C2_Init();
 800392e:	f001 f8a9 	bl	8004a84 <MX_I2C2_Init>
  MX_TIM2_Init();
 8003932:	f001 f925 	bl	8004b80 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003936:	f001 f877 	bl	8004a28 <MX_I2C1_Init>
  MX_TIM3_Init();
 800393a:	f001 f9a1 	bl	8004c80 <MX_TIM3_Init>
  MX_TIM5_Init();
 800393e:	f001 fa85 	bl	8004e4c <MX_TIM5_Init>
  MX_TIM4_Init();
 8003942:	f001 fa01 	bl	8004d48 <MX_TIM4_Init>
  MX_TIM1_Init();
 8003946:	f001 f8cb 	bl	8004ae0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800394a:	f001 faf5 	bl	8004f38 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 800394e:	487f      	ldr	r0, [pc, #508]	; (8003b4c <main+0x238>)
 8003950:	f002 f888 	bl	8005a64 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8003954:	487e      	ldr	r0, [pc, #504]	; (8003b50 <main+0x23c>)
 8003956:	f002 f885 	bl	8005a64 <HAL_ADC_Start>
  HAL_TIM_Base_Start(&htim1);
 800395a:	487e      	ldr	r0, [pc, #504]	; (8003b54 <main+0x240>)
 800395c:	f004 f94a 	bl	8007bf4 <HAL_TIM_Base_Start>


  	/********************************* LETTURA TEMPERATURA ***************************/

  if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8003960:	497d      	ldr	r1, [pc, #500]	; (8003b58 <main+0x244>)
 8003962:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003966:	f7fd fd7b 	bl	8001460 <DHT22_Start>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 808c 	beq.w	8003a8a <main+0x176>
  {
	  RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8003972:	4979      	ldr	r1, [pc, #484]	; (8003b58 <main+0x244>)
 8003974:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003978:	f7fd fdf2 	bl	8001560 <DHT22_Read>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <main+0x248>)
 8003982:	701a      	strb	r2, [r3, #0]
	  RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8003984:	4974      	ldr	r1, [pc, #464]	; (8003b58 <main+0x244>)
 8003986:	f44f 7080 	mov.w	r0, #256	; 0x100
 800398a:	f7fd fde9 	bl	8001560 <DHT22_Read>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	4b73      	ldr	r3, [pc, #460]	; (8003b60 <main+0x24c>)
 8003994:	701a      	strb	r2, [r3, #0]
	  TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8003996:	4970      	ldr	r1, [pc, #448]	; (8003b58 <main+0x244>)
 8003998:	f44f 7080 	mov.w	r0, #256	; 0x100
 800399c:	f7fd fde0 	bl	8001560 <DHT22_Read>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <main+0x250>)
 80039a6:	701a      	strb	r2, [r3, #0]
	  TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 80039a8:	496b      	ldr	r1, [pc, #428]	; (8003b58 <main+0x244>)
 80039aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039ae:	f7fd fdd7 	bl	8001560 <DHT22_Read>
 80039b2:	4603      	mov	r3, r0
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b6c      	ldr	r3, [pc, #432]	; (8003b68 <main+0x254>)
 80039b8:	701a      	strb	r2, [r3, #0]
	  SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 80039ba:	4967      	ldr	r1, [pc, #412]	; (8003b58 <main+0x244>)
 80039bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039c0:	f7fd fdce 	bl	8001560 <DHT22_Read>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	4b68      	ldr	r3, [pc, #416]	; (8003b6c <main+0x258>)
 80039ca:	701a      	strb	r2, [r3, #0]
	  CHECK = RH1 + RH2 + TC1 + TC2;
 80039cc:	4b63      	ldr	r3, [pc, #396]	; (8003b5c <main+0x248>)
 80039ce:	781a      	ldrb	r2, [r3, #0]
 80039d0:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <main+0x24c>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <main+0x250>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	4b61      	ldr	r3, [pc, #388]	; (8003b68 <main+0x254>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <main+0x25c>)
 80039ea:	701a      	strb	r2, [r3, #0]
	  if (CHECK == SUM)
 80039ec:	4b60      	ldr	r3, [pc, #384]	; (8003b70 <main+0x25c>)
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <main+0x258>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d148      	bne.n	8003a8a <main+0x176>
	  {
		  if (TC1>127) // If TC1=10000000, negative temperature
 80039f8:	4b5a      	ldr	r3, [pc, #360]	; (8003b64 <main+0x250>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da0f      	bge.n	8003a22 <main+0x10e>
		  {
			  tCelsius = (float)TC2/10*(-1);
 8003a02:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <main+0x254>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a0e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a16:	eef1 7a67 	vneg.f32	s15, s15
 8003a1a:	4b56      	ldr	r3, [pc, #344]	; (8003b74 <main+0x260>)
 8003a1c:	edc3 7a00 	vstr	s15, [r3]
 8003a20:	e010      	b.n	8003a44 <main+0x130>
		  }
		  else
		  {
			  tCelsius = (float)((TC1<<8)|TC2)/10;
 8003a22:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <main+0x250>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	4a4f      	ldr	r2, [pc, #316]	; (8003b68 <main+0x254>)
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a36:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003a3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a3e:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <main+0x260>)
 8003a40:	edc3 7a00 	vstr	s15, [r3]
		  }
		  tFahrenheit = tCelsius * 9/5 + 32;
 8003a44:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <main+0x260>)
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003a4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a52:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003a56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a5a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003b78 <main+0x264>
 8003a5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a62:	4b46      	ldr	r3, [pc, #280]	; (8003b7c <main+0x268>)
 8003a64:	edc3 7a00 	vstr	s15, [r3]
		  RH = (float) ((RH1<<8)|RH2)/10;
 8003a68:	4b3c      	ldr	r3, [pc, #240]	; (8003b5c <main+0x248>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	4a3c      	ldr	r2, [pc, #240]	; (8003b60 <main+0x24c>)
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	ee07 3a90 	vmov	s15, r3
 8003a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a7c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a84:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <main+0x26c>)
 8003a86:	edc3 7a00 	vstr	s15, [r3]
	  }
  }

  if(DHT22_Start(DHT22_PIN_EXT, DHT22_PORT))
 8003a8a:	4933      	ldr	r1, [pc, #204]	; (8003b58 <main+0x244>)
 8003a8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a90:	f7fd fce6 	bl	8001460 <DHT22_Start>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80b6 	beq.w	8003c08 <main+0x2f4>
  {
	  RH1_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // First 8bits of humidity
 8003a9c:	492e      	ldr	r1, [pc, #184]	; (8003b58 <main+0x244>)
 8003a9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003aa2:	f7fd fd5d 	bl	8001560 <DHT22_Read>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <main+0x270>)
 8003aac:	701a      	strb	r2, [r3, #0]
	  RH2_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Second 8bits of Relative humidity
 8003aae:	492a      	ldr	r1, [pc, #168]	; (8003b58 <main+0x244>)
 8003ab0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ab4:	f7fd fd54 	bl	8001560 <DHT22_Read>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <main+0x274>)
 8003abe:	701a      	strb	r2, [r3, #0]
	  TC1_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // First 8bits of Celsius
 8003ac0:	4925      	ldr	r1, [pc, #148]	; (8003b58 <main+0x244>)
 8003ac2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ac6:	f7fd fd4b 	bl	8001560 <DHT22_Read>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b2f      	ldr	r3, [pc, #188]	; (8003b8c <main+0x278>)
 8003ad0:	701a      	strb	r2, [r3, #0]
	  TC2_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Second 8bits of Celsius
 8003ad2:	4921      	ldr	r1, [pc, #132]	; (8003b58 <main+0x244>)
 8003ad4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ad8:	f7fd fd42 	bl	8001560 <DHT22_Read>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <main+0x27c>)
 8003ae2:	701a      	strb	r2, [r3, #0]
	  SUM_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Check sum
 8003ae4:	491c      	ldr	r1, [pc, #112]	; (8003b58 <main+0x244>)
 8003ae6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003aea:	f7fd fd39 	bl	8001560 <DHT22_Read>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <main+0x280>)
 8003af4:	701a      	strb	r2, [r3, #0]
	  CHECK_EXT = RH1_EXT + RH2_EXT + TC1_EXT + TC2_EXT;
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <main+0x270>)
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <main+0x274>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <main+0x278>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b21      	ldr	r3, [pc, #132]	; (8003b90 <main+0x27c>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <main+0x284>)
 8003b14:	701a      	strb	r2, [r3, #0]
	  if (CHECK_EXT == SUM_EXT)
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <main+0x284>)
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <main+0x280>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d172      	bne.n	8003c08 <main+0x2f4>
	  {
		  if (TC1_EXT>127) // If TC1=10000000, negative temperature
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <main+0x278>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da39      	bge.n	8003ba0 <main+0x28c>
		  {
			  tCelsius_EXT = (float)TC2_EXT/10*(-1);
 8003b2c:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <main+0x27c>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b38:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b40:	eef1 7a67 	vneg.f32	s15, s15
 8003b44:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <main+0x288>)
 8003b46:	edc3 7a00 	vstr	s15, [r3]
 8003b4a:	e03a      	b.n	8003bc2 <main+0x2ae>
 8003b4c:	2000021c 	.word	0x2000021c
 8003b50:	20000264 	.word	0x20000264
 8003b54:	20000354 	.word	0x20000354
 8003b58:	40020000 	.word	0x40020000
 8003b5c:	20000500 	.word	0x20000500
 8003b60:	20000501 	.word	0x20000501
 8003b64:	20000502 	.word	0x20000502
 8003b68:	20000503 	.word	0x20000503
 8003b6c:	20000504 	.word	0x20000504
 8003b70:	20000505 	.word	0x20000505
 8003b74:	20000510 	.word	0x20000510
 8003b78:	42000000 	.word	0x42000000
 8003b7c:	20000514 	.word	0x20000514
 8003b80:	20000518 	.word	0x20000518
 8003b84:	2000051c 	.word	0x2000051c
 8003b88:	2000051d 	.word	0x2000051d
 8003b8c:	2000051e 	.word	0x2000051e
 8003b90:	2000051f 	.word	0x2000051f
 8003b94:	20000520 	.word	0x20000520
 8003b98:	20000521 	.word	0x20000521
 8003b9c:	20000524 	.word	0x20000524
		  }
		  else
		  {
			  tCelsius_EXT = (float)((TC1_EXT<<8)|TC2_EXT)/10;
 8003ba0:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <main+0x4b8>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	4a8a      	ldr	r2, [pc, #552]	; (8003dd0 <main+0x4bc>)
 8003ba8:	7812      	ldrb	r2, [r2, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003bb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bbc:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <main+0x4c0>)
 8003bbe:	edc3 7a00 	vstr	s15, [r3]
		  }
		  tFahrenheit_EXT = tCelsius_EXT * 9/5 + 32;
 8003bc2:	4b84      	ldr	r3, [pc, #528]	; (8003dd4 <main+0x4c0>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003bcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bd0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003bd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bd8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003dd8 <main+0x4c4>
 8003bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003be0:	4b7e      	ldr	r3, [pc, #504]	; (8003ddc <main+0x4c8>)
 8003be2:	edc3 7a00 	vstr	s15, [r3]
		  RH_EXT = (float) ((RH1_EXT<<8)|RH2_EXT)/10;
 8003be6:	4b7e      	ldr	r3, [pc, #504]	; (8003de0 <main+0x4cc>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	021b      	lsls	r3, r3, #8
 8003bec:	4a7d      	ldr	r2, [pc, #500]	; (8003de4 <main+0x4d0>)
 8003bee:	7812      	ldrb	r2, [r2, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bfa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c02:	4b79      	ldr	r3, [pc, #484]	; (8003de8 <main+0x4d4>)
 8003c04:	edc3 7a00 	vstr	s15, [r3]


   	/******************** START INIZIALIZZAZIONE PWM ****************************/


    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// PELTIER
 8003c08:	2100      	movs	r1, #0
 8003c0a:	4878      	ldr	r0, [pc, #480]	; (8003dec <main+0x4d8>)
 8003c0c:	f004 f8aa 	bl	8007d64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// PELTIER HOT FAN
 8003c10:	2104      	movs	r1, #4
 8003c12:	4876      	ldr	r0, [pc, #472]	; (8003dec <main+0x4d8>)
 8003c14:	f004 f8a6 	bl	8007d64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	// PELTIER COLD FAN
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4875      	ldr	r0, [pc, #468]	; (8003df0 <main+0x4dc>)
 8003c1c:	f004 f8a2 	bl	8007d64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// PTC FAN
 8003c20:	2104      	movs	r1, #4
 8003c22:	4873      	ldr	r0, [pc, #460]	; (8003df0 <main+0x4dc>)
 8003c24:	f004 f89e 	bl	8007d64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);	// PTC
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4872      	ldr	r0, [pc, #456]	; (8003df4 <main+0x4e0>)
 8003c2c:	f004 f89a 	bl	8007d64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// SERVO 1
 8003c30:	2100      	movs	r1, #0
 8003c32:	4871      	ldr	r0, [pc, #452]	; (8003df8 <main+0x4e4>)
 8003c34:	f004 f896 	bl	8007d64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);	// SERVO 2
 8003c38:	2104      	movs	r1, #4
 8003c3a:	486f      	ldr	r0, [pc, #444]	; (8003df8 <main+0x4e4>)
 8003c3c:	f004 f892 	bl	8007d64 <HAL_TIM_PWM_Start>

    HAL_Delay(200);
 8003c40:	20c8      	movs	r0, #200	; 0xc8
 8003c42:	f001 fea7 	bl	8005994 <HAL_Delay>
    HAL_GPIO_WritePin (VENTOLINA_GPIO_Port, VENTOLINA_Pin ,SET); // VENTOLINA ACCESA
 8003c46:	2201      	movs	r2, #1
 8003c48:	2140      	movs	r1, #64	; 0x40
 8003c4a:	486c      	ldr	r0, [pc, #432]	; (8003dfc <main+0x4e8>)
 8003c4c:	f002 fd34 	bl	80066b8 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8003c50:	20c8      	movs	r0, #200	; 0xc8
 8003c52:	f001 fe9f 	bl	8005994 <HAL_Delay>

    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 10); // PELTIER SPENTA
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <main+0x4d8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	220a      	movs	r2, #10
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 10); // PELTIER HOT FAN  SPENTA
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <main+0x4d8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	220a      	movs	r2, #10
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 10); // PELTIER COLD FAN SPENTA
 8003c66:	4b62      	ldr	r3, [pc, #392]	; (8003df0 <main+0x4dc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	220a      	movs	r2, #10
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, 10); // PTC FAN	SPENTA
 8003c6e:	4b60      	ldr	r3, [pc, #384]	; (8003df0 <main+0x4dc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	220a      	movs	r2, #10
 8003c74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1, 10); // PTC	SPENTA
 8003c76:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <main+0x4e0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	220a      	movs	r2, #10
 8003c7c:	635a      	str	r2, [r3, #52]	; 0x34
  {


	  	  	  	  	  	  	  	  	  	  /******************** REED SWITCH *******************/

	  if(HAL_GPIO_ReadPin(STATO_PORTA_GPIO_Port, STATO_PORTA_Pin)==GPIO_PIN_RESET) //Tensione bassa (RESET) perchè quando si avvicina il magnete allo switch si chiude il circuito è la ddp=0. CIÓ ACCADE QUANDO LA PORTA È CHIUSA
 8003c7e:	2110      	movs	r1, #16
 8003c80:	485f      	ldr	r0, [pc, #380]	; (8003e00 <main+0x4ec>)
 8003c82:	f002 fd01 	bl	8006688 <HAL_GPIO_ReadPin>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10f      	bne.n	8003cac <main+0x398>
	  {

		  HD44780_Init(2);
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f7fd f9d3 	bl	8001038 <HD44780_Init>
		  HD44780_Clear();
 8003c92:	f7fd fa55 	bl	8001140 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 8003c96:	2100      	movs	r1, #0
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7fd fa67 	bl	800116c <HD44780_SetCursor>
		  HAL_Delay(20);
 8003c9e:	2014      	movs	r0, #20
 8003ca0:	f001 fe78 	bl	8005994 <HAL_Delay>
		  HD44780_PrintStr("Porta Chiusa");
 8003ca4:	4857      	ldr	r0, [pc, #348]	; (8003e04 <main+0x4f0>)
 8003ca6:	f7fd fad2 	bl	800124e <HD44780_PrintStr>
 8003caa:	e00e      	b.n	8003cca <main+0x3b6>
	  }

	  else //Tensione bassa (SET) perchè quando si allontana il magnete dallo switch si apre il circuito è la ddp=3V. CIÓ ACCADE QUANDO LA PORTA È APERTA
	  {

		  HD44780_Init(2);
 8003cac:	2002      	movs	r0, #2
 8003cae:	f7fd f9c3 	bl	8001038 <HD44780_Init>
		  HD44780_Clear();
 8003cb2:	f7fd fa45 	bl	8001140 <HD44780_Clear>
		  HD44780_SetCursor(0,0);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f7fd fa57 	bl	800116c <HD44780_SetCursor>
		  HAL_Delay(20);
 8003cbe:	2014      	movs	r0, #20
 8003cc0:	f001 fe68 	bl	8005994 <HAL_Delay>
		  HD44780_PrintStr("Porta Aperta");
 8003cc4:	4850      	ldr	r0, [pc, #320]	; (8003e08 <main+0x4f4>)
 8003cc6:	f7fd fac2 	bl	800124e <HD44780_PrintStr>
	   * Questa è uno script che permette di acquisire e quindi aggiornare i valori dei joystick. Necessario da richiamare ogni volta che si vuole
	   * riacquisire la posizione dell'analogico
	   */


	  HAL_ADC_Start(&hadc1);
 8003cca:	4850      	ldr	r0, [pc, #320]	; (8003e0c <main+0x4f8>)
 8003ccc:	f001 feca 	bl	8005a64 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8003cd0:	484f      	ldr	r0, [pc, #316]	; (8003e10 <main+0x4fc>)
 8003cd2:	f001 fec7 	bl	8005a64 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1,1000);
 8003cd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cda:	484c      	ldr	r0, [pc, #304]	; (8003e0c <main+0x4f8>)
 8003cdc:	f001 ff94 	bl	8005c08 <HAL_ADC_PollForConversion>
	  readValueX = HAL_ADC_GetValue(&hadc1);
 8003ce0:	484a      	ldr	r0, [pc, #296]	; (8003e0c <main+0x4f8>)
 8003ce2:	f002 f81c 	bl	8005d1e <HAL_ADC_GetValue>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <main+0x500>)
 8003cec:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc2,1000);
 8003cee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003cf2:	4847      	ldr	r0, [pc, #284]	; (8003e10 <main+0x4fc>)
 8003cf4:	f001 ff88 	bl	8005c08 <HAL_ADC_PollForConversion>
	  readValueY = HAL_ADC_GetValue(&hadc2);
 8003cf8:	4845      	ldr	r0, [pc, #276]	; (8003e10 <main+0x4fc>)
 8003cfa:	f002 f810 	bl	8005d1e <HAL_ADC_GetValue>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <main+0x504>)
 8003d04:	801a      	strh	r2, [r3, #0]
	  /*
	   * Questa è una condizione if che è necessario richiamare ogni qual volta si fa uso del sensore, in modo che i valori acquisiti dal sensore
	   * vengano aggiornati, man mano
	   */

	  if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8003d06:	4945      	ldr	r1, [pc, #276]	; (8003e1c <main+0x508>)
 8003d08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d0c:	f7fd fba8 	bl	8001460 <DHT22_Start>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80c6 	beq.w	8003ea4 <main+0x590>
	  {
		  RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8003d18:	4940      	ldr	r1, [pc, #256]	; (8003e1c <main+0x508>)
 8003d1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d1e:	f7fd fc1f 	bl	8001560 <DHT22_Read>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <main+0x50c>)
 8003d28:	701a      	strb	r2, [r3, #0]
		  RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8003d2a:	493c      	ldr	r1, [pc, #240]	; (8003e1c <main+0x508>)
 8003d2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d30:	f7fd fc16 	bl	8001560 <DHT22_Read>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <main+0x510>)
 8003d3a:	701a      	strb	r2, [r3, #0]
		  TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8003d3c:	4937      	ldr	r1, [pc, #220]	; (8003e1c <main+0x508>)
 8003d3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d42:	f7fd fc0d 	bl	8001560 <DHT22_Read>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <main+0x514>)
 8003d4c:	701a      	strb	r2, [r3, #0]
		  TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 8003d4e:	4933      	ldr	r1, [pc, #204]	; (8003e1c <main+0x508>)
 8003d50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d54:	f7fd fc04 	bl	8001560 <DHT22_Read>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <main+0x518>)
 8003d5e:	701a      	strb	r2, [r3, #0]
		  SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 8003d60:	492e      	ldr	r1, [pc, #184]	; (8003e1c <main+0x508>)
 8003d62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003d66:	f7fd fbfb 	bl	8001560 <DHT22_Read>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <main+0x51c>)
 8003d70:	701a      	strb	r2, [r3, #0]
		  CHECK = RH1 + RH2 + TC1 + TC2;
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <main+0x50c>)
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	4b2b      	ldr	r3, [pc, #172]	; (8003e24 <main+0x510>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <main+0x514>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	4413      	add	r3, r2
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <main+0x518>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4b29      	ldr	r3, [pc, #164]	; (8003e34 <main+0x520>)
 8003d90:	701a      	strb	r2, [r3, #0]
		  if (CHECK == SUM)
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <main+0x520>)
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <main+0x51c>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	f040 8082 	bne.w	8003ea4 <main+0x590>
		  {
			  if (TC1>127) // If TC1=10000000, negative temperature
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <main+0x514>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	da48      	bge.n	8003e3c <main+0x528>
			  {
				  tCelsius = (float)TC2/10*(-1);
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <main+0x518>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003db6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dbe:	eef1 7a67 	vneg.f32	s15, s15
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <main+0x524>)
 8003dc4:	edc3 7a00 	vstr	s15, [r3]
 8003dc8:	e049      	b.n	8003e5e <main+0x54a>
 8003dca:	bf00      	nop
 8003dcc:	2000051e 	.word	0x2000051e
 8003dd0:	2000051f 	.word	0x2000051f
 8003dd4:	20000524 	.word	0x20000524
 8003dd8:	42000000 	.word	0x42000000
 8003ddc:	20000528 	.word	0x20000528
 8003de0:	2000051c 	.word	0x2000051c
 8003de4:	2000051d 	.word	0x2000051d
 8003de8:	2000052c 	.word	0x2000052c
 8003dec:	2000039c 	.word	0x2000039c
 8003df0:	200003e4 	.word	0x200003e4
 8003df4:	20000474 	.word	0x20000474
 8003df8:	2000042c 	.word	0x2000042c
 8003dfc:	40020800 	.word	0x40020800
 8003e00:	40020400 	.word	0x40020400
 8003e04:	0800dae0 	.word	0x0800dae0
 8003e08:	0800daf0 	.word	0x0800daf0
 8003e0c:	2000021c 	.word	0x2000021c
 8003e10:	20000264 	.word	0x20000264
 8003e14:	20000530 	.word	0x20000530
 8003e18:	20000532 	.word	0x20000532
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	20000500 	.word	0x20000500
 8003e24:	20000501 	.word	0x20000501
 8003e28:	20000502 	.word	0x20000502
 8003e2c:	20000503 	.word	0x20000503
 8003e30:	20000504 	.word	0x20000504
 8003e34:	20000505 	.word	0x20000505
 8003e38:	20000510 	.word	0x20000510
			  }
			  else
			  {
				  tCelsius = (float)((TC1<<8)|TC2)/10;
 8003e3c:	4bb3      	ldr	r3, [pc, #716]	; (800410c <main+0x7f8>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	4ab3      	ldr	r2, [pc, #716]	; (8004110 <main+0x7fc>)
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	ee07 3a90 	vmov	s15, r3
 8003e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e58:	4bae      	ldr	r3, [pc, #696]	; (8004114 <main+0x800>)
 8003e5a:	edc3 7a00 	vstr	s15, [r3]
			  }
			  tFahrenheit = tCelsius * 9/5 + 32;
 8003e5e:	4bad      	ldr	r3, [pc, #692]	; (8004114 <main+0x800>)
 8003e60:	edd3 7a00 	vldr	s15, [r3]
 8003e64:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003e68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e6c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e74:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8004118 <main+0x804>
 8003e78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e7c:	4ba7      	ldr	r3, [pc, #668]	; (800411c <main+0x808>)
 8003e7e:	edc3 7a00 	vstr	s15, [r3]
			  RH = (float) ((RH1<<8)|RH2)/10;
 8003e82:	4ba7      	ldr	r3, [pc, #668]	; (8004120 <main+0x80c>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	021b      	lsls	r3, r3, #8
 8003e88:	4aa6      	ldr	r2, [pc, #664]	; (8004124 <main+0x810>)
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e96:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e9e:	4ba2      	ldr	r3, [pc, #648]	; (8004128 <main+0x814>)
 8003ea0:	edc3 7a00 	vstr	s15, [r3]
		  }
	  }

	  if(DHT22_Start(DHT22_PIN_EXT, DHT22_PORT))
 8003ea4:	49a1      	ldr	r1, [pc, #644]	; (800412c <main+0x818>)
 8003ea6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003eaa:	f7fd fad9 	bl	8001460 <DHT22_Start>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 808c 	beq.w	8003fce <main+0x6ba>
	  {
		  RH1_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // First 8bits of humidity
 8003eb6:	499d      	ldr	r1, [pc, #628]	; (800412c <main+0x818>)
 8003eb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ebc:	f7fd fb50 	bl	8001560 <DHT22_Read>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b9a      	ldr	r3, [pc, #616]	; (8004130 <main+0x81c>)
 8003ec6:	701a      	strb	r2, [r3, #0]
		  RH2_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Second 8bits of Relative humidity
 8003ec8:	4998      	ldr	r1, [pc, #608]	; (800412c <main+0x818>)
 8003eca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ece:	f7fd fb47 	bl	8001560 <DHT22_Read>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4b97      	ldr	r3, [pc, #604]	; (8004134 <main+0x820>)
 8003ed8:	701a      	strb	r2, [r3, #0]
		  TC1_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // First 8bits of Celsius
 8003eda:	4994      	ldr	r1, [pc, #592]	; (800412c <main+0x818>)
 8003edc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ee0:	f7fd fb3e 	bl	8001560 <DHT22_Read>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b93      	ldr	r3, [pc, #588]	; (8004138 <main+0x824>)
 8003eea:	701a      	strb	r2, [r3, #0]
		  TC2_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Second 8bits of Celsius
 8003eec:	498f      	ldr	r1, [pc, #572]	; (800412c <main+0x818>)
 8003eee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ef2:	f7fd fb35 	bl	8001560 <DHT22_Read>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b90      	ldr	r3, [pc, #576]	; (800413c <main+0x828>)
 8003efc:	701a      	strb	r2, [r3, #0]
		  SUM_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Check sum
 8003efe:	498b      	ldr	r1, [pc, #556]	; (800412c <main+0x818>)
 8003f00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f04:	f7fd fb2c 	bl	8001560 <DHT22_Read>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b8c      	ldr	r3, [pc, #560]	; (8004140 <main+0x82c>)
 8003f0e:	701a      	strb	r2, [r3, #0]
		  CHECK_EXT = RH1_EXT + RH2_EXT + TC1_EXT + TC2_EXT;
 8003f10:	4b87      	ldr	r3, [pc, #540]	; (8004130 <main+0x81c>)
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	4b87      	ldr	r3, [pc, #540]	; (8004134 <main+0x820>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	4413      	add	r3, r2
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b86      	ldr	r3, [pc, #536]	; (8004138 <main+0x824>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	4413      	add	r3, r2
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	4b85      	ldr	r3, [pc, #532]	; (800413c <main+0x828>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	4b85      	ldr	r3, [pc, #532]	; (8004144 <main+0x830>)
 8003f2e:	701a      	strb	r2, [r3, #0]
		  if (CHECK_EXT == SUM_EXT)
 8003f30:	4b84      	ldr	r3, [pc, #528]	; (8004144 <main+0x830>)
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	4b82      	ldr	r3, [pc, #520]	; (8004140 <main+0x82c>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d148      	bne.n	8003fce <main+0x6ba>
		  {
			  if (TC1_EXT>127) // If TC1=10000000, negative temperature
 8003f3c:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <main+0x824>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b25b      	sxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da0f      	bge.n	8003f66 <main+0x652>
			  {
				  tCelsius_EXT = (float)TC2_EXT/10*(-1);
 8003f46:	4b7d      	ldr	r3, [pc, #500]	; (800413c <main+0x828>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f52:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5a:	eef1 7a67 	vneg.f32	s15, s15
 8003f5e:	4b7a      	ldr	r3, [pc, #488]	; (8004148 <main+0x834>)
 8003f60:	edc3 7a00 	vstr	s15, [r3]
 8003f64:	e010      	b.n	8003f88 <main+0x674>
			  }
			  else
			  {
				  tCelsius_EXT = (float)((TC1_EXT<<8)|TC2_EXT)/10;
 8003f66:	4b74      	ldr	r3, [pc, #464]	; (8004138 <main+0x824>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	4a73      	ldr	r2, [pc, #460]	; (800413c <main+0x828>)
 8003f6e:	7812      	ldrb	r2, [r2, #0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f7a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f82:	4b71      	ldr	r3, [pc, #452]	; (8004148 <main+0x834>)
 8003f84:	edc3 7a00 	vstr	s15, [r3]
			  }
			  tFahrenheit_EXT = tCelsius_EXT * 9/5 + 32;
 8003f88:	4b6f      	ldr	r3, [pc, #444]	; (8004148 <main+0x834>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
 8003f8e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003f92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f96:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f9e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004118 <main+0x804>
 8003fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fa6:	4b69      	ldr	r3, [pc, #420]	; (800414c <main+0x838>)
 8003fa8:	edc3 7a00 	vstr	s15, [r3]
			  RH_EXT = (float) ((RH1_EXT<<8)|RH2_EXT)/10;
 8003fac:	4b60      	ldr	r3, [pc, #384]	; (8004130 <main+0x81c>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	4a60      	ldr	r2, [pc, #384]	; (8004134 <main+0x820>)
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fc8:	4b61      	ldr	r3, [pc, #388]	; (8004150 <main+0x83c>)
 8003fca:	edc3 7a00 	vstr	s15, [r3]


	  	  	  	  	  	  	  	  	  	  /************************** MENU SUL DISPLAY ********************************/


	  scelta = 0; 			//variabile che determina l'uscita dal menù
 8003fce:	4b61      	ldr	r3, [pc, #388]	; (8004154 <main+0x840>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

	  HD44780_Init(2);
 8003fd4:	2002      	movs	r0, #2
 8003fd6:	f7fd f82f 	bl	8001038 <HD44780_Init>
	  HD44780_Clear();
 8003fda:	f7fd f8b1 	bl	8001140 <HD44780_Clear>
	  HD44780_SetCursor(0,0);
 8003fde:	2100      	movs	r1, #0
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7fd f8c3 	bl	800116c <HD44780_SetCursor>
	  HAL_Delay(20);
 8003fe6:	2014      	movs	r0, #20
 8003fe8:	f001 fcd4 	bl	8005994 <HAL_Delay>
	  HD44780_PrintStr("Menu");
 8003fec:	485a      	ldr	r0, [pc, #360]	; (8004158 <main+0x844>)
 8003fee:	f7fd f92e 	bl	800124e <HD44780_PrintStr>
	  HAL_Delay(2000);
 8003ff2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003ff6:	f001 fccd 	bl	8005994 <HAL_Delay>



	  comando = 1; 			//variabile che determina quale voce visualizzare nel menù
 8003ffa:	4b58      	ldr	r3, [pc, #352]	; (800415c <main+0x848>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]




	  while(scelta == 0)	//se scelta = 0 allora si resta all'interno del menù. Se scelta = 1 si esce dal menù
 8004000:	e28a      	b.n	8004518 <main+0xc04>
	  {
		  while(comando == 1)	//finchè comando = 1 si visualizza la modalità 1 sul display
		  {
			  HD44780_Init(2);
 8004002:	2002      	movs	r0, #2
 8004004:	f7fd f818 	bl	8001038 <HD44780_Init>
			  HD44780_Clear();
 8004008:	f7fd f89a 	bl	8001140 <HD44780_Clear>
			  HD44780_SetCursor(0,0);
 800400c:	2100      	movs	r1, #0
 800400e:	2000      	movs	r0, #0
 8004010:	f7fd f8ac 	bl	800116c <HD44780_SetCursor>
			  HD44780_PrintStr("Seleziona modalita: ");
 8004014:	4852      	ldr	r0, [pc, #328]	; (8004160 <main+0x84c>)
 8004016:	f7fd f91a 	bl	800124e <HD44780_PrintStr>
			  HAL_Delay(20);
 800401a:	2014      	movs	r0, #20
 800401c:	f001 fcba 	bl	8005994 <HAL_Delay>
			  sprintf (strm1, "1: Tset %.1f gradi ", T_Cold); 			//stampa temperatura
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <main+0x850>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc faaf 	bl	8000588 <__aeabi_f2d>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	494e      	ldr	r1, [pc, #312]	; (8004168 <main+0x854>)
 8004030:	484e      	ldr	r0, [pc, #312]	; (800416c <main+0x858>)
 8004032:	f005 fee9 	bl	8009e08 <siprintf>
			  HD44780_PrintStr(strm1);
 8004036:	484d      	ldr	r0, [pc, #308]	; (800416c <main+0x858>)
 8004038:	f7fd f909 	bl	800124e <HD44780_PrintStr>


			  scenario = 1; 	//EQUIVALENTE DI "mode": PARAMETRO CHE VIENE PASSATO ALLA FUNZIONE MODALITÀ
 800403c:	4b4c      	ldr	r3, [pc, #304]	; (8004170 <main+0x85c>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]


			  	  	  	  	  	  	  	  /************* REINIZIALIZZAZIONE JOYSTICK ********************/

			  HAL_ADC_Start(&hadc1);
 8004042:	484c      	ldr	r0, [pc, #304]	; (8004174 <main+0x860>)
 8004044:	f001 fd0e 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_Start(&hadc2);
 8004048:	484b      	ldr	r0, [pc, #300]	; (8004178 <main+0x864>)
 800404a:	f001 fd0b 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1,1000);
 800404e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004052:	4848      	ldr	r0, [pc, #288]	; (8004174 <main+0x860>)
 8004054:	f001 fdd8 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueX = HAL_ADC_GetValue(&hadc1);
 8004058:	4846      	ldr	r0, [pc, #280]	; (8004174 <main+0x860>)
 800405a:	f001 fe60 	bl	8005d1e <HAL_ADC_GetValue>
 800405e:	4603      	mov	r3, r0
 8004060:	b29a      	uxth	r2, r3
 8004062:	4b46      	ldr	r3, [pc, #280]	; (800417c <main+0x868>)
 8004064:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_PollForConversion(&hadc2,1000);
 8004066:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800406a:	4843      	ldr	r0, [pc, #268]	; (8004178 <main+0x864>)
 800406c:	f001 fdcc 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueY = HAL_ADC_GetValue(&hadc2);
 8004070:	4841      	ldr	r0, [pc, #260]	; (8004178 <main+0x864>)
 8004072:	f001 fe54 	bl	8005d1e <HAL_ADC_GetValue>
 8004076:	4603      	mov	r3, r0
 8004078:	b29a      	uxth	r2, r3
 800407a:	4b41      	ldr	r3, [pc, #260]	; (8004180 <main+0x86c>)
 800407c:	801a      	strh	r2, [r3, #0]

			  	  	  	  	  	  	  	  /****************** END REINIZIALIZZAZIONE JOYSTICK ***************/


			  HAL_Delay(20);
 800407e:	2014      	movs	r0, #20
 8004080:	f001 fc88 	bl	8005994 <HAL_Delay>
			  if (readValueY < 1000)
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <main+0x86c>)
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408c:	d203      	bcs.n	8004096 <main+0x782>
			  {
				  comando = 2;	// muovendo il joystick verso il basso si visualizza la modalità 2 sul menù
 800408e:	4b33      	ldr	r3, [pc, #204]	; (800415c <main+0x848>)
 8004090:	2202      	movs	r2, #2
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e008      	b.n	80040a8 <main+0x794>
			  }
			  else if(readValueY > 3700)
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <main+0x86c>)
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	f640 6274 	movw	r2, #3700	; 0xe74
 800409e:	4293      	cmp	r3, r2
 80040a0:	d902      	bls.n	80040a8 <main+0x794>
			  {
				  comando = 4;	// muovendo il joystick verso l'alto si visualizza la modalità 3 sul menù
 80040a2:	4b2e      	ldr	r3, [pc, #184]	; (800415c <main+0x848>)
 80040a4:	2204      	movs	r2, #4
 80040a6:	601a      	str	r2, [r3, #0]
			  }

			  if(HAL_GPIO_ReadPin(TASTO_JOYSTICK_GPIO_Port, TASTO_JOYSTICK_Pin)==GPIO_PIN_RESET) // premendo il joystick allora si seleziona la modalità 1
 80040a8:	2110      	movs	r1, #16
 80040aa:	4836      	ldr	r0, [pc, #216]	; (8004184 <main+0x870>)
 80040ac:	f002 faec 	bl	8006688 <HAL_GPIO_ReadPin>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d124      	bne.n	8004100 <main+0x7ec>
			  {

				  HAL_Delay(200);
 80040b6:	20c8      	movs	r0, #200	; 0xc8
 80040b8:	f001 fc6c 	bl	8005994 <HAL_Delay>
				  HD44780_Init(2);
 80040bc:	2002      	movs	r0, #2
 80040be:	f7fc ffbb 	bl	8001038 <HD44780_Init>
				  HD44780_Clear();
 80040c2:	f7fd f83d 	bl	8001140 <HD44780_Clear>
				  HD44780_SetCursor(0,0);
 80040c6:	2100      	movs	r1, #0
 80040c8:	2000      	movs	r0, #0
 80040ca:	f7fd f84f 	bl	800116c <HD44780_SetCursor>
				  HAL_Delay(20);
 80040ce:	2014      	movs	r0, #20
 80040d0:	f001 fc60 	bl	8005994 <HAL_Delay>
				  HD44780_PrintStr("Scenario 1 selezionato! ");
 80040d4:	482c      	ldr	r0, [pc, #176]	; (8004188 <main+0x874>)
 80040d6:	f7fd f8ba 	bl	800124e <HD44780_PrintStr>
				  HAL_Delay(500);
 80040da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040de:	f001 fc59 	bl	8005994 <HAL_Delay>

				  Modalita(scenario, tCelsius, RH); //--> verrà eseguita la modalità 1
 80040e2:	4b23      	ldr	r3, [pc, #140]	; (8004170 <main+0x85c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <main+0x800>)
 80040e8:	edd2 7a00 	vldr	s15, [r2]
 80040ec:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <main+0x814>)
 80040ee:	ed92 7a00 	vldr	s14, [r2]
 80040f2:	eef0 0a47 	vmov.f32	s1, s14
 80040f6:	eeb0 0a67 	vmov.f32	s0, s15
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd fc24 	bl	8001948 <Modalita>
		  while(comando == 1)	//finchè comando = 1 si visualizza la modalità 1 sul display
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <main+0x848>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	f43f af7c 	beq.w	8004002 <main+0x6ee>
			  }
		  }


		  while(comando == 2)
 800410a:	e0bb      	b.n	8004284 <main+0x970>
 800410c:	20000502 	.word	0x20000502
 8004110:	20000503 	.word	0x20000503
 8004114:	20000510 	.word	0x20000510
 8004118:	42000000 	.word	0x42000000
 800411c:	20000514 	.word	0x20000514
 8004120:	20000500 	.word	0x20000500
 8004124:	20000501 	.word	0x20000501
 8004128:	20000518 	.word	0x20000518
 800412c:	40020000 	.word	0x40020000
 8004130:	2000051c 	.word	0x2000051c
 8004134:	2000051d 	.word	0x2000051d
 8004138:	2000051e 	.word	0x2000051e
 800413c:	2000051f 	.word	0x2000051f
 8004140:	20000520 	.word	0x20000520
 8004144:	20000521 	.word	0x20000521
 8004148:	20000524 	.word	0x20000524
 800414c:	20000528 	.word	0x20000528
 8004150:	2000052c 	.word	0x2000052c
 8004154:	200005bc 	.word	0x200005bc
 8004158:	0800db00 	.word	0x0800db00
 800415c:	200005b8 	.word	0x200005b8
 8004160:	0800db08 	.word	0x0800db08
 8004164:	20000010 	.word	0x20000010
 8004168:	0800db20 	.word	0x0800db20
 800416c:	20000564 	.word	0x20000564
 8004170:	200005c0 	.word	0x200005c0
 8004174:	2000021c 	.word	0x2000021c
 8004178:	20000264 	.word	0x20000264
 800417c:	20000530 	.word	0x20000530
 8004180:	20000532 	.word	0x20000532
 8004184:	40020800 	.word	0x40020800
 8004188:	0800db34 	.word	0x0800db34
		  {
			  HD44780_Init(2);
 800418c:	2002      	movs	r0, #2
 800418e:	f7fc ff53 	bl	8001038 <HD44780_Init>
			  HD44780_Clear();
 8004192:	f7fc ffd5 	bl	8001140 <HD44780_Clear>
			  HD44780_SetCursor(0,0);
 8004196:	2100      	movs	r1, #0
 8004198:	2000      	movs	r0, #0
 800419a:	f7fc ffe7 	bl	800116c <HD44780_SetCursor>
			  HD44780_PrintStr("Seleziona modalita: ");
 800419e:	48ad      	ldr	r0, [pc, #692]	; (8004454 <main+0xb40>)
 80041a0:	f7fd f855 	bl	800124e <HD44780_PrintStr>
			  HAL_Delay(20);
 80041a4:	2014      	movs	r0, #20
 80041a6:	f001 fbf5 	bl	8005994 <HAL_Delay>
			  sprintf (strm2, "2: Tset %.1f gradi ", T_Hot); 			//stampa temperatura
 80041aa:	4bab      	ldr	r3, [pc, #684]	; (8004458 <main+0xb44>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc f9ea 	bl	8000588 <__aeabi_f2d>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	49a8      	ldr	r1, [pc, #672]	; (800445c <main+0xb48>)
 80041ba:	48a9      	ldr	r0, [pc, #676]	; (8004460 <main+0xb4c>)
 80041bc:	f005 fe24 	bl	8009e08 <siprintf>
			  HD44780_PrintStr(strm2);
 80041c0:	48a7      	ldr	r0, [pc, #668]	; (8004460 <main+0xb4c>)
 80041c2:	f7fd f844 	bl	800124e <HD44780_PrintStr>

			  scenario = 2;
 80041c6:	4ba7      	ldr	r3, [pc, #668]	; (8004464 <main+0xb50>)
 80041c8:	2202      	movs	r2, #2
 80041ca:	601a      	str	r2, [r3, #0]


			  	  	  	  	  	  	  /******************  REINIZIALIZZAZIONE JOYSTICK ***************/


			  HAL_ADC_Start(&hadc1);
 80041cc:	48a6      	ldr	r0, [pc, #664]	; (8004468 <main+0xb54>)
 80041ce:	f001 fc49 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_Start(&hadc2);
 80041d2:	48a6      	ldr	r0, [pc, #664]	; (800446c <main+0xb58>)
 80041d4:	f001 fc46 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1,1000);
 80041d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041dc:	48a2      	ldr	r0, [pc, #648]	; (8004468 <main+0xb54>)
 80041de:	f001 fd13 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueX = HAL_ADC_GetValue(&hadc1);
 80041e2:	48a1      	ldr	r0, [pc, #644]	; (8004468 <main+0xb54>)
 80041e4:	f001 fd9b 	bl	8005d1e <HAL_ADC_GetValue>
 80041e8:	4603      	mov	r3, r0
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	4ba0      	ldr	r3, [pc, #640]	; (8004470 <main+0xb5c>)
 80041ee:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_PollForConversion(&hadc2,1000);
 80041f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041f4:	489d      	ldr	r0, [pc, #628]	; (800446c <main+0xb58>)
 80041f6:	f001 fd07 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueY = HAL_ADC_GetValue(&hadc2);
 80041fa:	489c      	ldr	r0, [pc, #624]	; (800446c <main+0xb58>)
 80041fc:	f001 fd8f 	bl	8005d1e <HAL_ADC_GetValue>
 8004200:	4603      	mov	r3, r0
 8004202:	b29a      	uxth	r2, r3
 8004204:	4b9b      	ldr	r3, [pc, #620]	; (8004474 <main+0xb60>)
 8004206:	801a      	strh	r2, [r3, #0]

			  	  	  	  	  	  	  /****************** END REINIZIALIZZAZIONE JOYSTICK ***************/

			  if (readValueY < 1000)
 8004208:	4b9a      	ldr	r3, [pc, #616]	; (8004474 <main+0xb60>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004210:	d203      	bcs.n	800421a <main+0x906>
			  {
				  comando = 3;
 8004212:	4b99      	ldr	r3, [pc, #612]	; (8004478 <main+0xb64>)
 8004214:	2203      	movs	r2, #3
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e008      	b.n	800422c <main+0x918>
			  }
			  else if(readValueY > 3700)
 800421a:	4b96      	ldr	r3, [pc, #600]	; (8004474 <main+0xb60>)
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	f640 6274 	movw	r2, #3700	; 0xe74
 8004222:	4293      	cmp	r3, r2
 8004224:	d902      	bls.n	800422c <main+0x918>
			  {
				  comando = 1;
 8004226:	4b94      	ldr	r3, [pc, #592]	; (8004478 <main+0xb64>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]
			  }
			  if(HAL_GPIO_ReadPin(TASTO_JOYSTICK_GPIO_Port, TASTO_JOYSTICK_Pin)==GPIO_PIN_RESET)
 800422c:	2110      	movs	r1, #16
 800422e:	4893      	ldr	r0, [pc, #588]	; (800447c <main+0xb68>)
 8004230:	f002 fa2a 	bl	8006688 <HAL_GPIO_ReadPin>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d124      	bne.n	8004284 <main+0x970>
			  {

				  HAL_Delay(200);
 800423a:	20c8      	movs	r0, #200	; 0xc8
 800423c:	f001 fbaa 	bl	8005994 <HAL_Delay>
				  HD44780_Init(2);
 8004240:	2002      	movs	r0, #2
 8004242:	f7fc fef9 	bl	8001038 <HD44780_Init>
				  HD44780_Clear();
 8004246:	f7fc ff7b 	bl	8001140 <HD44780_Clear>
				  HD44780_SetCursor(0,0);
 800424a:	2100      	movs	r1, #0
 800424c:	2000      	movs	r0, #0
 800424e:	f7fc ff8d 	bl	800116c <HD44780_SetCursor>
				  HAL_Delay(20);
 8004252:	2014      	movs	r0, #20
 8004254:	f001 fb9e 	bl	8005994 <HAL_Delay>
				  HD44780_PrintStr("Scenario 2 selezionato! ");
 8004258:	4889      	ldr	r0, [pc, #548]	; (8004480 <main+0xb6c>)
 800425a:	f7fc fff8 	bl	800124e <HD44780_PrintStr>
				  HAL_Delay(500);
 800425e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004262:	f001 fb97 	bl	8005994 <HAL_Delay>

				  Modalita(scenario, tCelsius, RH);
 8004266:	4b7f      	ldr	r3, [pc, #508]	; (8004464 <main+0xb50>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a86      	ldr	r2, [pc, #536]	; (8004484 <main+0xb70>)
 800426c:	edd2 7a00 	vldr	s15, [r2]
 8004270:	4a85      	ldr	r2, [pc, #532]	; (8004488 <main+0xb74>)
 8004272:	ed92 7a00 	vldr	s14, [r2]
 8004276:	eef0 0a47 	vmov.f32	s1, s14
 800427a:	eeb0 0a67 	vmov.f32	s0, s15
 800427e:	4618      	mov	r0, r3
 8004280:	f7fd fb62 	bl	8001948 <Modalita>
		  while(comando == 2)
 8004284:	4b7c      	ldr	r3, [pc, #496]	; (8004478 <main+0xb64>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b02      	cmp	r3, #2
 800428a:	f43f af7f 	beq.w	800418c <main+0x878>
			  }
		  }



		  while(comando == 3)
 800428e:	e086      	b.n	800439e <main+0xa8a>
		  {
			  HD44780_Init(2);
 8004290:	2002      	movs	r0, #2
 8004292:	f7fc fed1 	bl	8001038 <HD44780_Init>
			  HD44780_Clear();
 8004296:	f7fc ff53 	bl	8001140 <HD44780_Clear>
			  HD44780_SetCursor(0,0);
 800429a:	2100      	movs	r1, #0
 800429c:	2000      	movs	r0, #0
 800429e:	f7fc ff65 	bl	800116c <HD44780_SetCursor>
			  HD44780_PrintStr("Seleziona modalita: ");
 80042a2:	486c      	ldr	r0, [pc, #432]	; (8004454 <main+0xb40>)
 80042a4:	f7fc ffd3 	bl	800124e <HD44780_PrintStr>
			  HAL_Delay(20);
 80042a8:	2014      	movs	r0, #20
 80042aa:	f001 fb73 	bl	8005994 <HAL_Delay>
			  sprintf (strm3, "3: Tset %.1f -> %.1f ", T_Cold, T_Hot); 			//stampa temperatura
 80042ae:	4b77      	ldr	r3, [pc, #476]	; (800448c <main+0xb78>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f968 	bl	8000588 <__aeabi_f2d>
 80042b8:	4604      	mov	r4, r0
 80042ba:	460d      	mov	r5, r1
 80042bc:	4b66      	ldr	r3, [pc, #408]	; (8004458 <main+0xb44>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f961 	bl	8000588 <__aeabi_f2d>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	e9cd 2300 	strd	r2, r3, [sp]
 80042ce:	4622      	mov	r2, r4
 80042d0:	462b      	mov	r3, r5
 80042d2:	496f      	ldr	r1, [pc, #444]	; (8004490 <main+0xb7c>)
 80042d4:	486f      	ldr	r0, [pc, #444]	; (8004494 <main+0xb80>)
 80042d6:	f005 fd97 	bl	8009e08 <siprintf>
			  HD44780_PrintStr(strm3);
 80042da:	486e      	ldr	r0, [pc, #440]	; (8004494 <main+0xb80>)
 80042dc:	f7fc ffb7 	bl	800124e <HD44780_PrintStr>

			  scenario = 3;
 80042e0:	4b60      	ldr	r3, [pc, #384]	; (8004464 <main+0xb50>)
 80042e2:	2203      	movs	r2, #3
 80042e4:	601a      	str	r2, [r3, #0]

			  	  	  	  	  	  /****************** REINIZIALIZZAZIONE JOYSTICK ***************/

			  HAL_ADC_Start(&hadc1);
 80042e6:	4860      	ldr	r0, [pc, #384]	; (8004468 <main+0xb54>)
 80042e8:	f001 fbbc 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_Start(&hadc2);
 80042ec:	485f      	ldr	r0, [pc, #380]	; (800446c <main+0xb58>)
 80042ee:	f001 fbb9 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1,1000);
 80042f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042f6:	485c      	ldr	r0, [pc, #368]	; (8004468 <main+0xb54>)
 80042f8:	f001 fc86 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueX = HAL_ADC_GetValue(&hadc1);
 80042fc:	485a      	ldr	r0, [pc, #360]	; (8004468 <main+0xb54>)
 80042fe:	f001 fd0e 	bl	8005d1e <HAL_ADC_GetValue>
 8004302:	4603      	mov	r3, r0
 8004304:	b29a      	uxth	r2, r3
 8004306:	4b5a      	ldr	r3, [pc, #360]	; (8004470 <main+0xb5c>)
 8004308:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_PollForConversion(&hadc2,1000);
 800430a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800430e:	4857      	ldr	r0, [pc, #348]	; (800446c <main+0xb58>)
 8004310:	f001 fc7a 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueY = HAL_ADC_GetValue(&hadc2);
 8004314:	4855      	ldr	r0, [pc, #340]	; (800446c <main+0xb58>)
 8004316:	f001 fd02 	bl	8005d1e <HAL_ADC_GetValue>
 800431a:	4603      	mov	r3, r0
 800431c:	b29a      	uxth	r2, r3
 800431e:	4b55      	ldr	r3, [pc, #340]	; (8004474 <main+0xb60>)
 8004320:	801a      	strh	r2, [r3, #0]

			  	  	  	  	  	  /****************** END REINIZIALIZZAZIONE JOYSTICK ***************/

			  if (readValueY < 1000)
 8004322:	4b54      	ldr	r3, [pc, #336]	; (8004474 <main+0xb60>)
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800432a:	d203      	bcs.n	8004334 <main+0xa20>
			  {
				  comando = 4;
 800432c:	4b52      	ldr	r3, [pc, #328]	; (8004478 <main+0xb64>)
 800432e:	2204      	movs	r2, #4
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e008      	b.n	8004346 <main+0xa32>
			  }
			  else if(readValueY > 3700)
 8004334:	4b4f      	ldr	r3, [pc, #316]	; (8004474 <main+0xb60>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	f640 6274 	movw	r2, #3700	; 0xe74
 800433c:	4293      	cmp	r3, r2
 800433e:	d902      	bls.n	8004346 <main+0xa32>
			  {
				  comando = 2;
 8004340:	4b4d      	ldr	r3, [pc, #308]	; (8004478 <main+0xb64>)
 8004342:	2202      	movs	r2, #2
 8004344:	601a      	str	r2, [r3, #0]
			  }

			  if(HAL_GPIO_ReadPin(TASTO_JOYSTICK_GPIO_Port, TASTO_JOYSTICK_Pin)==GPIO_PIN_RESET)
 8004346:	2110      	movs	r1, #16
 8004348:	484c      	ldr	r0, [pc, #304]	; (800447c <main+0xb68>)
 800434a:	f002 f99d 	bl	8006688 <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d124      	bne.n	800439e <main+0xa8a>
			  {

				  HAL_Delay(200);
 8004354:	20c8      	movs	r0, #200	; 0xc8
 8004356:	f001 fb1d 	bl	8005994 <HAL_Delay>
				  HD44780_Init(2);
 800435a:	2002      	movs	r0, #2
 800435c:	f7fc fe6c 	bl	8001038 <HD44780_Init>
				  HD44780_Clear();
 8004360:	f7fc feee 	bl	8001140 <HD44780_Clear>
				  HD44780_SetCursor(0,0);
 8004364:	2100      	movs	r1, #0
 8004366:	2000      	movs	r0, #0
 8004368:	f7fc ff00 	bl	800116c <HD44780_SetCursor>
				  HAL_Delay(20);
 800436c:	2014      	movs	r0, #20
 800436e:	f001 fb11 	bl	8005994 <HAL_Delay>
				  HD44780_PrintStr("Scenario 3 selezionato! ");
 8004372:	4849      	ldr	r0, [pc, #292]	; (8004498 <main+0xb84>)
 8004374:	f7fc ff6b 	bl	800124e <HD44780_PrintStr>
				  HAL_Delay(500);
 8004378:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800437c:	f001 fb0a 	bl	8005994 <HAL_Delay>

				  Modalita(scenario, tCelsius, RH);
 8004380:	4b38      	ldr	r3, [pc, #224]	; (8004464 <main+0xb50>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3f      	ldr	r2, [pc, #252]	; (8004484 <main+0xb70>)
 8004386:	edd2 7a00 	vldr	s15, [r2]
 800438a:	4a3f      	ldr	r2, [pc, #252]	; (8004488 <main+0xb74>)
 800438c:	ed92 7a00 	vldr	s14, [r2]
 8004390:	eef0 0a47 	vmov.f32	s1, s14
 8004394:	eeb0 0a67 	vmov.f32	s0, s15
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fad5 	bl	8001948 <Modalita>
		  while(comando == 3)
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <main+0xb64>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b03      	cmp	r3, #3
 80043a4:	f43f af74 	beq.w	8004290 <main+0x97c>
			  }
		  }


		  while(comando == 4)
 80043a8:	e0b1      	b.n	800450e <main+0xbfa>
		  {
			  HD44780_Init(2);
 80043aa:	2002      	movs	r0, #2
 80043ac:	f7fc fe44 	bl	8001038 <HD44780_Init>
			  HD44780_Clear();
 80043b0:	f7fc fec6 	bl	8001140 <HD44780_Clear>
			  HD44780_SetCursor(0,0);
 80043b4:	2100      	movs	r1, #0
 80043b6:	2000      	movs	r0, #0
 80043b8:	f7fc fed8 	bl	800116c <HD44780_SetCursor>
			  HD44780_PrintStr("Seleziona modalita: ");
 80043bc:	4825      	ldr	r0, [pc, #148]	; (8004454 <main+0xb40>)
 80043be:	f7fc ff46 	bl	800124e <HD44780_PrintStr>
			  HAL_Delay(20);
 80043c2:	2014      	movs	r0, #20
 80043c4:	f001 fae6 	bl	8005994 <HAL_Delay>
			  sprintf (strm4, "4: Tset %.1f -> %.1f ", T_Hot, T_Cold); 			//stampa temperatura
 80043c8:	4b23      	ldr	r3, [pc, #140]	; (8004458 <main+0xb44>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fc f8db 	bl	8000588 <__aeabi_f2d>
 80043d2:	4604      	mov	r4, r0
 80043d4:	460d      	mov	r5, r1
 80043d6:	4b2d      	ldr	r3, [pc, #180]	; (800448c <main+0xb78>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc f8d4 	bl	8000588 <__aeabi_f2d>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	e9cd 2300 	strd	r2, r3, [sp]
 80043e8:	4622      	mov	r2, r4
 80043ea:	462b      	mov	r3, r5
 80043ec:	492b      	ldr	r1, [pc, #172]	; (800449c <main+0xb88>)
 80043ee:	482c      	ldr	r0, [pc, #176]	; (80044a0 <main+0xb8c>)
 80043f0:	f005 fd0a 	bl	8009e08 <siprintf>
			  HD44780_PrintStr(strm4);
 80043f4:	482a      	ldr	r0, [pc, #168]	; (80044a0 <main+0xb8c>)
 80043f6:	f7fc ff2a 	bl	800124e <HD44780_PrintStr>


			  HAL_Delay(20);
 80043fa:	2014      	movs	r0, #20
 80043fc:	f001 faca 	bl	8005994 <HAL_Delay>
			  scenario = 4;
 8004400:	4b18      	ldr	r3, [pc, #96]	; (8004464 <main+0xb50>)
 8004402:	2204      	movs	r2, #4
 8004404:	601a      	str	r2, [r3, #0]

			  	  	  	  	  	  	  /****************** REINIZIALIZZAZIONE JOYSTICK ***************/

			  HAL_ADC_Start(&hadc1);
 8004406:	4818      	ldr	r0, [pc, #96]	; (8004468 <main+0xb54>)
 8004408:	f001 fb2c 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_Start(&hadc2);
 800440c:	4817      	ldr	r0, [pc, #92]	; (800446c <main+0xb58>)
 800440e:	f001 fb29 	bl	8005a64 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1,1000);
 8004412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004416:	4814      	ldr	r0, [pc, #80]	; (8004468 <main+0xb54>)
 8004418:	f001 fbf6 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueX = HAL_ADC_GetValue(&hadc1);
 800441c:	4812      	ldr	r0, [pc, #72]	; (8004468 <main+0xb54>)
 800441e:	f001 fc7e 	bl	8005d1e <HAL_ADC_GetValue>
 8004422:	4603      	mov	r3, r0
 8004424:	b29a      	uxth	r2, r3
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <main+0xb5c>)
 8004428:	801a      	strh	r2, [r3, #0]
			  HAL_ADC_PollForConversion(&hadc2,1000);
 800442a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800442e:	480f      	ldr	r0, [pc, #60]	; (800446c <main+0xb58>)
 8004430:	f001 fbea 	bl	8005c08 <HAL_ADC_PollForConversion>
			  readValueY = HAL_ADC_GetValue(&hadc2);
 8004434:	480d      	ldr	r0, [pc, #52]	; (800446c <main+0xb58>)
 8004436:	f001 fc72 	bl	8005d1e <HAL_ADC_GetValue>
 800443a:	4603      	mov	r3, r0
 800443c:	b29a      	uxth	r2, r3
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <main+0xb60>)
 8004440:	801a      	strh	r2, [r3, #0]

			  	  	  	  	  	  	  /****************** END REINIZIALIZZAZIONE JOYSTICK ***************/

			  if (readValueY < 1000)
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <main+0xb60>)
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800444a:	d22b      	bcs.n	80044a4 <main+0xb90>
			  {
				  comando = 1;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <main+0xb64>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	e030      	b.n	80044b6 <main+0xba2>
 8004454:	0800db08 	.word	0x0800db08
 8004458:	20000014 	.word	0x20000014
 800445c:	0800db50 	.word	0x0800db50
 8004460:	20000578 	.word	0x20000578
 8004464:	200005c0 	.word	0x200005c0
 8004468:	2000021c 	.word	0x2000021c
 800446c:	20000264 	.word	0x20000264
 8004470:	20000530 	.word	0x20000530
 8004474:	20000532 	.word	0x20000532
 8004478:	200005b8 	.word	0x200005b8
 800447c:	40020800 	.word	0x40020800
 8004480:	0800db64 	.word	0x0800db64
 8004484:	20000510 	.word	0x20000510
 8004488:	20000518 	.word	0x20000518
 800448c:	20000010 	.word	0x20000010
 8004490:	0800db80 	.word	0x0800db80
 8004494:	2000058c 	.word	0x2000058c
 8004498:	0800db98 	.word	0x0800db98
 800449c:	0800dbb4 	.word	0x0800dbb4
 80044a0:	200005a0 	.word	0x200005a0
			  }
			  else if(readValueY > 3700)
 80044a4:	4bbe      	ldr	r3, [pc, #760]	; (80047a0 <main+0xe8c>)
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	f640 6274 	movw	r2, #3700	; 0xe74
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d902      	bls.n	80044b6 <main+0xba2>
			  {
				  comando = 3;
 80044b0:	4bbc      	ldr	r3, [pc, #752]	; (80047a4 <main+0xe90>)
 80044b2:	2203      	movs	r2, #3
 80044b4:	601a      	str	r2, [r3, #0]
			  }

			  if(HAL_GPIO_ReadPin(TASTO_JOYSTICK_GPIO_Port, TASTO_JOYSTICK_Pin)==GPIO_PIN_RESET)
 80044b6:	2110      	movs	r1, #16
 80044b8:	48bb      	ldr	r0, [pc, #748]	; (80047a8 <main+0xe94>)
 80044ba:	f002 f8e5 	bl	8006688 <HAL_GPIO_ReadPin>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d124      	bne.n	800450e <main+0xbfa>
			  {

				  HAL_Delay(200);
 80044c4:	20c8      	movs	r0, #200	; 0xc8
 80044c6:	f001 fa65 	bl	8005994 <HAL_Delay>
				  HD44780_Init(2);
 80044ca:	2002      	movs	r0, #2
 80044cc:	f7fc fdb4 	bl	8001038 <HD44780_Init>
				  HD44780_Clear();
 80044d0:	f7fc fe36 	bl	8001140 <HD44780_Clear>
				  HD44780_SetCursor(0,0);
 80044d4:	2100      	movs	r1, #0
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7fc fe48 	bl	800116c <HD44780_SetCursor>
				  HAL_Delay(20);
 80044dc:	2014      	movs	r0, #20
 80044de:	f001 fa59 	bl	8005994 <HAL_Delay>
				  HD44780_PrintStr("Scenario 4 selezionato! ");
 80044e2:	48b2      	ldr	r0, [pc, #712]	; (80047ac <main+0xe98>)
 80044e4:	f7fc feb3 	bl	800124e <HD44780_PrintStr>
				  HAL_Delay(500);
 80044e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044ec:	f001 fa52 	bl	8005994 <HAL_Delay>

				  Modalita(scenario, tCelsius, RH);
 80044f0:	4baf      	ldr	r3, [pc, #700]	; (80047b0 <main+0xe9c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4aaf      	ldr	r2, [pc, #700]	; (80047b4 <main+0xea0>)
 80044f6:	edd2 7a00 	vldr	s15, [r2]
 80044fa:	4aaf      	ldr	r2, [pc, #700]	; (80047b8 <main+0xea4>)
 80044fc:	ed92 7a00 	vldr	s14, [r2]
 8004500:	eef0 0a47 	vmov.f32	s1, s14
 8004504:	eeb0 0a67 	vmov.f32	s0, s15
 8004508:	4618      	mov	r0, r3
 800450a:	f7fd fa1d 	bl	8001948 <Modalita>
		  while(comando == 4)
 800450e:	4ba5      	ldr	r3, [pc, #660]	; (80047a4 <main+0xe90>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b04      	cmp	r3, #4
 8004514:	f43f af49 	beq.w	80043aa <main+0xa96>
	  while(scelta == 0)	//se scelta = 0 allora si resta all'interno del menù. Se scelta = 1 si esce dal menù
 8004518:	4ba8      	ldr	r3, [pc, #672]	; (80047bc <main+0xea8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f43f adef 	beq.w	8004100 <main+0x7ec>



	  	  	  	  	  /********************************* LETTURA TEMPERATURA ***************************/

	  if(DHT22_Start(DHT22_PIN, DHT22_PORT))
 8004522:	49a7      	ldr	r1, [pc, #668]	; (80047c0 <main+0xeac>)
 8004524:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004528:	f7fc ff9a 	bl	8001460 <DHT22_Start>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 808c 	beq.w	800464c <main+0xd38>
	  {
		  RH1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of humidity
 8004534:	49a2      	ldr	r1, [pc, #648]	; (80047c0 <main+0xeac>)
 8004536:	f44f 7080 	mov.w	r0, #256	; 0x100
 800453a:	f7fd f811 	bl	8001560 <DHT22_Read>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	4ba0      	ldr	r3, [pc, #640]	; (80047c4 <main+0xeb0>)
 8004544:	701a      	strb	r2, [r3, #0]
		  RH2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Relative humidity
 8004546:	499e      	ldr	r1, [pc, #632]	; (80047c0 <main+0xeac>)
 8004548:	f44f 7080 	mov.w	r0, #256	; 0x100
 800454c:	f7fd f808 	bl	8001560 <DHT22_Read>
 8004550:	4603      	mov	r3, r0
 8004552:	461a      	mov	r2, r3
 8004554:	4b9c      	ldr	r3, [pc, #624]	; (80047c8 <main+0xeb4>)
 8004556:	701a      	strb	r2, [r3, #0]
		  TC1 = DHT22_Read(DHT22_PIN, DHT22_PORT); // First 8bits of Celsius
 8004558:	4999      	ldr	r1, [pc, #612]	; (80047c0 <main+0xeac>)
 800455a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800455e:	f7fc ffff 	bl	8001560 <DHT22_Read>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	4b99      	ldr	r3, [pc, #612]	; (80047cc <main+0xeb8>)
 8004568:	701a      	strb	r2, [r3, #0]
		  TC2 = DHT22_Read(DHT22_PIN, DHT22_PORT); // Second 8bits of Celsius
 800456a:	4995      	ldr	r1, [pc, #596]	; (80047c0 <main+0xeac>)
 800456c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004570:	f7fc fff6 	bl	8001560 <DHT22_Read>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	4b95      	ldr	r3, [pc, #596]	; (80047d0 <main+0xebc>)
 800457a:	701a      	strb	r2, [r3, #0]
		  SUM = DHT22_Read(DHT22_PIN, DHT22_PORT); // Check sum
 800457c:	4990      	ldr	r1, [pc, #576]	; (80047c0 <main+0xeac>)
 800457e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004582:	f7fc ffed 	bl	8001560 <DHT22_Read>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	4b92      	ldr	r3, [pc, #584]	; (80047d4 <main+0xec0>)
 800458c:	701a      	strb	r2, [r3, #0]
		  CHECK = RH1 + RH2 + TC1 + TC2;
 800458e:	4b8d      	ldr	r3, [pc, #564]	; (80047c4 <main+0xeb0>)
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	4b8d      	ldr	r3, [pc, #564]	; (80047c8 <main+0xeb4>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	4413      	add	r3, r2
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4b8c      	ldr	r3, [pc, #560]	; (80047cc <main+0xeb8>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	4413      	add	r3, r2
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <main+0xebc>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4b8b      	ldr	r3, [pc, #556]	; (80047d8 <main+0xec4>)
 80045ac:	701a      	strb	r2, [r3, #0]
		  if (CHECK == SUM)
 80045ae:	4b8a      	ldr	r3, [pc, #552]	; (80047d8 <main+0xec4>)
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <main+0xec0>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d148      	bne.n	800464c <main+0xd38>
		  {
			  if (TC1>127) // If TC1=10000000, negative temperature
 80045ba:	4b84      	ldr	r3, [pc, #528]	; (80047cc <main+0xeb8>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b25b      	sxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da0f      	bge.n	80045e4 <main+0xcd0>
			  {
				  tCelsius = (float)TC2/10*(-1);
 80045c4:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <main+0xebc>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045d0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80045d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045d8:	eef1 7a67 	vneg.f32	s15, s15
 80045dc:	4b75      	ldr	r3, [pc, #468]	; (80047b4 <main+0xea0>)
 80045de:	edc3 7a00 	vstr	s15, [r3]
 80045e2:	e010      	b.n	8004606 <main+0xcf2>
			  }
			  else
			  {
				  tCelsius = (float)((TC1<<8)|TC2)/10;
 80045e4:	4b79      	ldr	r3, [pc, #484]	; (80047cc <main+0xeb8>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	021b      	lsls	r3, r3, #8
 80045ea:	4a79      	ldr	r2, [pc, #484]	; (80047d0 <main+0xebc>)
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045f8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80045fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004600:	4b6c      	ldr	r3, [pc, #432]	; (80047b4 <main+0xea0>)
 8004602:	edc3 7a00 	vstr	s15, [r3]
			  }
			  tFahrenheit = tCelsius * 9/5 + 32;
 8004606:	4b6b      	ldr	r3, [pc, #428]	; (80047b4 <main+0xea0>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004610:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004614:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8004618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800461c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80047dc <main+0xec8>
 8004620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004624:	4b6e      	ldr	r3, [pc, #440]	; (80047e0 <main+0xecc>)
 8004626:	edc3 7a00 	vstr	s15, [r3]
			  RH = (float) ((RH1<<8)|RH2)/10;
 800462a:	4b66      	ldr	r3, [pc, #408]	; (80047c4 <main+0xeb0>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	4a65      	ldr	r2, [pc, #404]	; (80047c8 <main+0xeb4>)
 8004632:	7812      	ldrb	r2, [r2, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800463e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004646:	4b5c      	ldr	r3, [pc, #368]	; (80047b8 <main+0xea4>)
 8004648:	edc3 7a00 	vstr	s15, [r3]
		  }
	  }

	  if(DHT22_Start(DHT22_PIN_EXT, DHT22_PORT))
 800464c:	495c      	ldr	r1, [pc, #368]	; (80047c0 <main+0xeac>)
 800464e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004652:	f7fc ff05 	bl	8001460 <DHT22_Start>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 808c 	beq.w	8004776 <main+0xe62>
	  {
		  RH1_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // First 8bits of humidity
 800465e:	4958      	ldr	r1, [pc, #352]	; (80047c0 <main+0xeac>)
 8004660:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004664:	f7fc ff7c 	bl	8001560 <DHT22_Read>
 8004668:	4603      	mov	r3, r0
 800466a:	461a      	mov	r2, r3
 800466c:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <main+0xed0>)
 800466e:	701a      	strb	r2, [r3, #0]
		  RH2_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Second 8bits of Relative humidity
 8004670:	4953      	ldr	r1, [pc, #332]	; (80047c0 <main+0xeac>)
 8004672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004676:	f7fc ff73 	bl	8001560 <DHT22_Read>
 800467a:	4603      	mov	r3, r0
 800467c:	461a      	mov	r2, r3
 800467e:	4b5a      	ldr	r3, [pc, #360]	; (80047e8 <main+0xed4>)
 8004680:	701a      	strb	r2, [r3, #0]
		  TC1_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // First 8bits of Celsius
 8004682:	494f      	ldr	r1, [pc, #316]	; (80047c0 <main+0xeac>)
 8004684:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004688:	f7fc ff6a 	bl	8001560 <DHT22_Read>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	4b56      	ldr	r3, [pc, #344]	; (80047ec <main+0xed8>)
 8004692:	701a      	strb	r2, [r3, #0]
		  TC2_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Second 8bits of Celsius
 8004694:	494a      	ldr	r1, [pc, #296]	; (80047c0 <main+0xeac>)
 8004696:	f44f 7000 	mov.w	r0, #512	; 0x200
 800469a:	f7fc ff61 	bl	8001560 <DHT22_Read>
 800469e:	4603      	mov	r3, r0
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b53      	ldr	r3, [pc, #332]	; (80047f0 <main+0xedc>)
 80046a4:	701a      	strb	r2, [r3, #0]
		  SUM_EXT = DHT22_Read(DHT22_PIN_EXT, DHT22_PORT); // Check sum
 80046a6:	4946      	ldr	r1, [pc, #280]	; (80047c0 <main+0xeac>)
 80046a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80046ac:	f7fc ff58 	bl	8001560 <DHT22_Read>
 80046b0:	4603      	mov	r3, r0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b4f      	ldr	r3, [pc, #316]	; (80047f4 <main+0xee0>)
 80046b6:	701a      	strb	r2, [r3, #0]
		  CHECK_EXT = RH1_EXT + RH2_EXT + TC1_EXT + TC2_EXT;
 80046b8:	4b4a      	ldr	r3, [pc, #296]	; (80047e4 <main+0xed0>)
 80046ba:	781a      	ldrb	r2, [r3, #0]
 80046bc:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <main+0xed4>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	4413      	add	r3, r2
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	4b49      	ldr	r3, [pc, #292]	; (80047ec <main+0xed8>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	4b48      	ldr	r3, [pc, #288]	; (80047f0 <main+0xedc>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	4b48      	ldr	r3, [pc, #288]	; (80047f8 <main+0xee4>)
 80046d6:	701a      	strb	r2, [r3, #0]
		  if (CHECK_EXT == SUM_EXT)
 80046d8:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <main+0xee4>)
 80046da:	781a      	ldrb	r2, [r3, #0]
 80046dc:	4b45      	ldr	r3, [pc, #276]	; (80047f4 <main+0xee0>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d148      	bne.n	8004776 <main+0xe62>
		  {
			  if (TC1_EXT>127) // If TC1=10000000, negative temperature
 80046e4:	4b41      	ldr	r3, [pc, #260]	; (80047ec <main+0xed8>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	b25b      	sxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	da0f      	bge.n	800470e <main+0xdfa>
			  {
				  tCelsius_EXT = (float)TC2_EXT/10*(-1);
 80046ee:	4b40      	ldr	r3, [pc, #256]	; (80047f0 <main+0xedc>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046fa:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80046fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004702:	eef1 7a67 	vneg.f32	s15, s15
 8004706:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <main+0xee8>)
 8004708:	edc3 7a00 	vstr	s15, [r3]
 800470c:	e010      	b.n	8004730 <main+0xe1c>
			  }
			  else
			  {
				  tCelsius_EXT = (float)((TC1_EXT<<8)|TC2_EXT)/10;
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <main+0xed8>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	4a36      	ldr	r2, [pc, #216]	; (80047f0 <main+0xedc>)
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004722:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800472a:	4b34      	ldr	r3, [pc, #208]	; (80047fc <main+0xee8>)
 800472c:	edc3 7a00 	vstr	s15, [r3]
			  }
			  tFahrenheit_EXT = tCelsius_EXT * 9/5 + 32;
 8004730:	4b32      	ldr	r3, [pc, #200]	; (80047fc <main+0xee8>)
 8004732:	edd3 7a00 	vldr	s15, [r3]
 8004736:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800473a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800473e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8004742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004746:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80047dc <main+0xec8>
 800474a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800474e:	4b2c      	ldr	r3, [pc, #176]	; (8004800 <main+0xeec>)
 8004750:	edc3 7a00 	vstr	s15, [r3]
			  RH_EXT = (float) ((RH1_EXT<<8)|RH2_EXT)/10;
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <main+0xed0>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <main+0xed4>)
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004768:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800476c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <main+0xef0>)
 8004772:	edc3 7a00 	vstr	s15, [r3]


	  	  	  	  	  	  /********************************* END LETTURA TEMPERATURA ***************************/


	  HAL_Delay(200);
 8004776:	20c8      	movs	r0, #200	; 0xc8
 8004778:	f001 f90c 	bl	8005994 <HAL_Delay>
	  Display_Temp(tCelsius, RH);	//stampa temperatura e umidità
 800477c:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <main+0xea0>)
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <main+0xea4>)
 8004784:	ed93 7a00 	vldr	s14, [r3]
 8004788:	eef0 0a47 	vmov.f32	s1, s14
 800478c:	eeb0 0a67 	vmov.f32	s0, s15
 8004790:	f7fc ff64 	bl	800165c <Display_Temp>
	  HAL_Delay(1000);
 8004794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004798:	f001 f8fc 	bl	8005994 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(STATO_PORTA_GPIO_Port, STATO_PORTA_Pin)==GPIO_PIN_RESET) //Tensione bassa (RESET) perchè quando si avvicina il magnete allo switch si chiude il circuito è la ddp=0. CIÓ ACCADE QUANDO LA PORTA È CHIUSA
 800479c:	f7ff ba6f 	b.w	8003c7e <main+0x36a>
 80047a0:	20000532 	.word	0x20000532
 80047a4:	200005b8 	.word	0x200005b8
 80047a8:	40020800 	.word	0x40020800
 80047ac:	0800dbcc 	.word	0x0800dbcc
 80047b0:	200005c0 	.word	0x200005c0
 80047b4:	20000510 	.word	0x20000510
 80047b8:	20000518 	.word	0x20000518
 80047bc:	200005bc 	.word	0x200005bc
 80047c0:	40020000 	.word	0x40020000
 80047c4:	20000500 	.word	0x20000500
 80047c8:	20000501 	.word	0x20000501
 80047cc:	20000502 	.word	0x20000502
 80047d0:	20000503 	.word	0x20000503
 80047d4:	20000504 	.word	0x20000504
 80047d8:	20000505 	.word	0x20000505
 80047dc:	42000000 	.word	0x42000000
 80047e0:	20000514 	.word	0x20000514
 80047e4:	2000051c 	.word	0x2000051c
 80047e8:	2000051d 	.word	0x2000051d
 80047ec:	2000051e 	.word	0x2000051e
 80047f0:	2000051f 	.word	0x2000051f
 80047f4:	20000520 	.word	0x20000520
 80047f8:	20000521 	.word	0x20000521
 80047fc:	20000524 	.word	0x20000524
 8004800:	20000528 	.word	0x20000528
 8004804:	2000052c 	.word	0x2000052c

08004808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b094      	sub	sp, #80	; 0x50
 800480c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800480e:	f107 031c 	add.w	r3, r7, #28
 8004812:	2234      	movs	r2, #52	; 0x34
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f004 fc6e 	bl	80090f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800481c:	f107 0308 	add.w	r3, r7, #8
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	2300      	movs	r3, #0
 800482e:	607b      	str	r3, [r7, #4]
 8004830:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <SystemClock_Config+0xd0>)
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <SystemClock_Config+0xd0>)
 8004836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483a:	6413      	str	r3, [r2, #64]	; 0x40
 800483c:	4b26      	ldr	r3, [pc, #152]	; (80048d8 <SystemClock_Config+0xd0>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004848:	2300      	movs	r3, #0
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4b23      	ldr	r3, [pc, #140]	; (80048dc <SystemClock_Config+0xd4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004854:	4a21      	ldr	r2, [pc, #132]	; (80048dc <SystemClock_Config+0xd4>)
 8004856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <SystemClock_Config+0xd4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004868:	2301      	movs	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800486c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004872:	2302      	movs	r3, #2
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800487a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800487c:	2304      	movs	r3, #4
 800487e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004880:	2348      	movs	r3, #72	; 0x48
 8004882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004884:	2302      	movs	r3, #2
 8004886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004888:	2302      	movs	r3, #2
 800488a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800488c:	2302      	movs	r3, #2
 800488e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004890:	f107 031c 	add.w	r3, r7, #28
 8004894:	4618      	mov	r0, r3
 8004896:	f002 febf 	bl	8007618 <HAL_RCC_OscConfig>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80048a0:	f000 fc04 	bl	80050ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048a4:	230f      	movs	r3, #15
 80048a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048a8:	2302      	movs	r3, #2
 80048aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80048b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	2102      	movs	r1, #2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f002 fb5f 	bl	8006f84 <HAL_RCC_ClockConfig>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80048cc:	f000 fbee 	bl	80050ac <Error_Handler>
  }
}
 80048d0:	bf00      	nop
 80048d2:	3750      	adds	r7, #80	; 0x50
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	40007000 	.word	0x40007000

080048e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80048e6:	463b      	mov	r3, r7
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <MX_ADC1_Init+0x98>)
 80048f4:	4a21      	ldr	r2, [pc, #132]	; (800497c <MX_ADC1_Init+0x9c>)
 80048f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <MX_ADC1_Init+0x98>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <MX_ADC1_Init+0x98>)
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <MX_ADC1_Init+0x98>)
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800490a:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <MX_ADC1_Init+0x98>)
 800490c:	2200      	movs	r2, #0
 800490e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <MX_ADC1_Init+0x98>)
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <MX_ADC1_Init+0x98>)
 800491a:	2200      	movs	r2, #0
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <MX_ADC1_Init+0x98>)
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <MX_ADC1_Init+0xa0>)
 8004922:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <MX_ADC1_Init+0x98>)
 8004926:	2200      	movs	r2, #0
 8004928:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <MX_ADC1_Init+0x98>)
 800492c:	2201      	movs	r2, #1
 800492e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <MX_ADC1_Init+0x98>)
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004938:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <MX_ADC1_Init+0x98>)
 800493a:	2201      	movs	r2, #1
 800493c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800493e:	480e      	ldr	r0, [pc, #56]	; (8004978 <MX_ADC1_Init+0x98>)
 8004940:	f001 f84c 	bl	80059dc <HAL_ADC_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800494a:	f000 fbaf 	bl	80050ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800494e:	2304      	movs	r3, #4
 8004950:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004952:	2301      	movs	r3, #1
 8004954:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800495a:	463b      	mov	r3, r7
 800495c:	4619      	mov	r1, r3
 800495e:	4806      	ldr	r0, [pc, #24]	; (8004978 <MX_ADC1_Init+0x98>)
 8004960:	f001 f9ea 	bl	8005d38 <HAL_ADC_ConfigChannel>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800496a:	f000 fb9f 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	2000021c 	.word	0x2000021c
 800497c:	40012000 	.word	0x40012000
 8004980:	0f000001 	.word	0x0f000001

08004984 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800498a:	463b      	mov	r3, r7
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004996:	4b21      	ldr	r3, [pc, #132]	; (8004a1c <MX_ADC2_Init+0x98>)
 8004998:	4a21      	ldr	r2, [pc, #132]	; (8004a20 <MX_ADC2_Init+0x9c>)
 800499a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800499c:	4b1f      	ldr	r3, [pc, #124]	; (8004a1c <MX_ADC2_Init+0x98>)
 800499e:	2200      	movs	r2, #0
 80049a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80049a2:	4b1e      	ldr	r3, [pc, #120]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80049a8:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80049ae:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049bc:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049be:	2200      	movs	r2, #0
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80049c2:	4b16      	ldr	r3, [pc, #88]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049c4:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <MX_ADC2_Init+0xa0>)
 80049c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80049d4:	4b11      	ldr	r3, [pc, #68]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049de:	2201      	movs	r2, #1
 80049e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80049e2:	480e      	ldr	r0, [pc, #56]	; (8004a1c <MX_ADC2_Init+0x98>)
 80049e4:	f000 fffa 	bl	80059dc <HAL_ADC_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80049ee:	f000 fb5d 	bl	80050ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80049f2:	2305      	movs	r3, #5
 80049f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049fe:	463b      	mov	r3, r7
 8004a00:	4619      	mov	r1, r3
 8004a02:	4806      	ldr	r0, [pc, #24]	; (8004a1c <MX_ADC2_Init+0x98>)
 8004a04:	f001 f998 	bl	8005d38 <HAL_ADC_ConfigChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8004a0e:	f000 fb4d 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000264 	.word	0x20000264
 8004a20:	40012100 	.word	0x40012100
 8004a24:	0f000001 	.word	0x0f000001

08004a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a2e:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <MX_I2C1_Init+0x54>)
 8004a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a34:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <MX_I2C1_Init+0x58>)
 8004a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004a52:	4b09      	ldr	r3, [pc, #36]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a64:	4804      	ldr	r0, [pc, #16]	; (8004a78 <MX_I2C1_Init+0x50>)
 8004a66:	f001 fe41 	bl	80066ec <HAL_I2C_Init>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004a70:	f000 fb1c 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	200002ac 	.word	0x200002ac
 8004a7c:	40005400 	.word	0x40005400
 8004a80:	000186a0 	.word	0x000186a0

08004a84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004a8a:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <MX_I2C2_Init+0x54>)
 8004a8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004a90:	4a12      	ldr	r2, [pc, #72]	; (8004adc <MX_I2C2_Init+0x58>)
 8004a92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004aa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004aa6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004ac0:	4804      	ldr	r0, [pc, #16]	; (8004ad4 <MX_I2C2_Init+0x50>)
 8004ac2:	f001 fe13 	bl	80066ec <HAL_I2C_Init>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004acc:	f000 faee 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004ad0:	bf00      	nop
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000300 	.word	0x20000300
 8004ad8:	40005800 	.word	0x40005800
 8004adc:	000186a0 	.word	0x000186a0

08004ae0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ae6:	f107 0308 	add.w	r3, r7, #8
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	609a      	str	r2, [r3, #8]
 8004af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af4:	463b      	mov	r3, r7
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004afc:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004afe:	4a1f      	ldr	r2, [pc, #124]	; (8004b7c <MX_TIM1_Init+0x9c>)
 8004b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b04:	2247      	movs	r2, #71	; 0x47
 8004b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b08:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b16:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004b28:	4813      	ldr	r0, [pc, #76]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b2a:	f003 f813 	bl	8007b54 <HAL_TIM_Base_Init>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004b34:	f000 faba 	bl	80050ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	4619      	mov	r1, r3
 8004b44:	480c      	ldr	r0, [pc, #48]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b46:	f003 fa97 	bl	8008078 <HAL_TIM_ConfigClockSource>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004b50:	f000 faac 	bl	80050ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b54:	2300      	movs	r3, #0
 8004b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4805      	ldr	r0, [pc, #20]	; (8004b78 <MX_TIM1_Init+0x98>)
 8004b62:	f003 fe61 	bl	8008828 <HAL_TIMEx_MasterConfigSynchronization>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004b6c:	f000 fa9e 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004b70:	bf00      	nop
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000354 	.word	0x20000354
 8004b7c:	40010000 	.word	0x40010000

08004b80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08e      	sub	sp, #56	; 0x38
 8004b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
 8004b90:	609a      	str	r2, [r3, #8]
 8004b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b94:	f107 0320 	add.w	r3, r7, #32
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b9e:	1d3b      	adds	r3, r7, #4
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	611a      	str	r2, [r3, #16]
 8004bac:	615a      	str	r2, [r3, #20]
 8004bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004bb0:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8004bb8:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bba:	2247      	movs	r2, #71	; 0x47
 8004bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bd2:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bd8:	4828      	ldr	r0, [pc, #160]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bda:	f002 ffbb 	bl	8007b54 <HAL_TIM_Base_Init>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004be4:	f000 fa62 	bl	80050ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4821      	ldr	r0, [pc, #132]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004bf6:	f003 fa3f 	bl	8008078 <HAL_TIM_ConfigClockSource>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004c00:	f000 fa54 	bl	80050ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004c04:	481d      	ldr	r0, [pc, #116]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004c06:	f003 f85d 	bl	8007cc4 <HAL_TIM_PWM_Init>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004c10:	f000 fa4c 	bl	80050ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c1c:	f107 0320 	add.w	r3, r7, #32
 8004c20:	4619      	mov	r1, r3
 8004c22:	4816      	ldr	r0, [pc, #88]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004c24:	f003 fe00 	bl	8008828 <HAL_TIMEx_MasterConfigSynchronization>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004c2e:	f000 fa3d 	bl	80050ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c32:	2360      	movs	r3, #96	; 0x60
 8004c34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c42:	1d3b      	adds	r3, r7, #4
 8004c44:	2200      	movs	r2, #0
 8004c46:	4619      	mov	r1, r3
 8004c48:	480c      	ldr	r0, [pc, #48]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004c4a:	f003 f953 	bl	8007ef4 <HAL_TIM_PWM_ConfigChannel>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004c54:	f000 fa2a 	bl	80050ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4807      	ldr	r0, [pc, #28]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004c60:	f003 f948 	bl	8007ef4 <HAL_TIM_PWM_ConfigChannel>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8004c6a:	f000 fa1f 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004c6e:	4803      	ldr	r0, [pc, #12]	; (8004c7c <MX_TIM2_Init+0xfc>)
 8004c70:	f000 fbe0 	bl	8005434 <HAL_TIM_MspPostInit>

}
 8004c74:	bf00      	nop
 8004c76:	3738      	adds	r7, #56	; 0x38
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	2000039c 	.word	0x2000039c

08004c80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c86:	f107 0320 	add.w	r3, r7, #32
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	609a      	str	r2, [r3, #8]
 8004c9a:	60da      	str	r2, [r3, #12]
 8004c9c:	611a      	str	r2, [r3, #16]
 8004c9e:	615a      	str	r2, [r3, #20]
 8004ca0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ca2:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004ca4:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <MX_TIM3_Init+0xc4>)
 8004ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8004ca8:	4b25      	ldr	r3, [pc, #148]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004caa:	2247      	movs	r2, #71	; 0x47
 8004cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cae:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8004cb4:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004cb6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cbc:	4b20      	ldr	r3, [pc, #128]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cc2:	4b1f      	ldr	r3, [pc, #124]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004cc8:	481d      	ldr	r0, [pc, #116]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004cca:	f002 fffb 	bl	8007cc4 <HAL_TIM_PWM_Init>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004cd4:	f000 f9ea 	bl	80050ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ce0:	f107 0320 	add.w	r3, r7, #32
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4816      	ldr	r0, [pc, #88]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004ce8:	f003 fd9e 	bl	8008828 <HAL_TIMEx_MasterConfigSynchronization>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004cf2:	f000 f9db 	bl	80050ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cf6:	2360      	movs	r3, #96	; 0x60
 8004cf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d06:	1d3b      	adds	r3, r7, #4
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	480c      	ldr	r0, [pc, #48]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004d0e:	f003 f8f1 	bl	8007ef4 <HAL_TIM_PWM_ConfigChannel>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004d18:	f000 f9c8 	bl	80050ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d1c:	1d3b      	adds	r3, r7, #4
 8004d1e:	2204      	movs	r2, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4807      	ldr	r0, [pc, #28]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004d24:	f003 f8e6 	bl	8007ef4 <HAL_TIM_PWM_ConfigChannel>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004d2e:	f000 f9bd 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004d32:	4803      	ldr	r0, [pc, #12]	; (8004d40 <MX_TIM3_Init+0xc0>)
 8004d34:	f000 fb7e 	bl	8005434 <HAL_TIM_MspPostInit>

}
 8004d38:	bf00      	nop
 8004d3a:	3728      	adds	r7, #40	; 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200003e4 	.word	0x200003e4
 8004d44:	40000400 	.word	0x40000400

08004d48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08e      	sub	sp, #56	; 0x38
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d5c:	f107 0320 	add.w	r3, r7, #32
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	611a      	str	r2, [r3, #16]
 8004d74:	615a      	str	r2, [r3, #20]
 8004d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004d7a:	4a33      	ldr	r2, [pc, #204]	; (8004e48 <MX_TIM4_Init+0x100>)
 8004d7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144-1;
 8004d7e:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004d80:	228f      	movs	r2, #143	; 0x8f
 8004d82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d84:	4b2f      	ldr	r3, [pc, #188]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8004d8a:	4b2e      	ldr	r3, [pc, #184]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004d8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004d90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d92:	4b2c      	ldr	r3, [pc, #176]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d98:	4b2a      	ldr	r3, [pc, #168]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004d9e:	4829      	ldr	r0, [pc, #164]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004da0:	f002 fed8 	bl	8007b54 <HAL_TIM_Base_Init>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004daa:	f000 f97f 	bl	80050ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004db8:	4619      	mov	r1, r3
 8004dba:	4822      	ldr	r0, [pc, #136]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004dbc:	f003 f95c 	bl	8008078 <HAL_TIM_ConfigClockSource>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004dc6:	f000 f971 	bl	80050ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004dca:	481e      	ldr	r0, [pc, #120]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004dcc:	f002 ff7a 	bl	8007cc4 <HAL_TIM_PWM_Init>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004dd6:	f000 f969 	bl	80050ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004de2:	f107 0320 	add.w	r3, r7, #32
 8004de6:	4619      	mov	r1, r3
 8004de8:	4816      	ldr	r0, [pc, #88]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004dea:	f003 fd1d 	bl	8008828 <HAL_TIMEx_MasterConfigSynchronization>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004df4:	f000 f95a 	bl	80050ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004df8:	2360      	movs	r3, #96	; 0x60
 8004dfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	480d      	ldr	r0, [pc, #52]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004e10:	f003 f870 	bl	8007ef4 <HAL_TIM_PWM_ConfigChannel>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8004e1a:	f000 f947 	bl	80050ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004e1e:	1d3b      	adds	r3, r7, #4
 8004e20:	2204      	movs	r2, #4
 8004e22:	4619      	mov	r1, r3
 8004e24:	4807      	ldr	r0, [pc, #28]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004e26:	f003 f865 	bl	8007ef4 <HAL_TIM_PWM_ConfigChannel>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8004e30:	f000 f93c 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004e34:	4803      	ldr	r0, [pc, #12]	; (8004e44 <MX_TIM4_Init+0xfc>)
 8004e36:	f000 fafd 	bl	8005434 <HAL_TIM_MspPostInit>

}
 8004e3a:	bf00      	nop
 8004e3c:	3738      	adds	r7, #56	; 0x38
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	2000042c 	.word	0x2000042c
 8004e48:	40000800 	.word	0x40000800

08004e4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08e      	sub	sp, #56	; 0x38
 8004e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	609a      	str	r2, [r3, #8]
 8004e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e60:	f107 0320 	add.w	r3, r7, #32
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	609a      	str	r2, [r3, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	611a      	str	r2, [r3, #16]
 8004e78:	615a      	str	r2, [r3, #20]
 8004e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004e7c:	4b2c      	ldr	r3, [pc, #176]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004e7e:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <MX_TIM5_Init+0xe8>)
 8004e80:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8004e82:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004e84:	2247      	movs	r2, #71	; 0x47
 8004e86:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e88:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8004e8e:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004e90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e94:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e9c:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004ea2:	4823      	ldr	r0, [pc, #140]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004ea4:	f002 fe56 	bl	8007b54 <HAL_TIM_Base_Init>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8004eae:	f000 f8fd 	bl	80050ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	481c      	ldr	r0, [pc, #112]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004ec0:	f003 f8da 	bl	8008078 <HAL_TIM_ConfigClockSource>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8004eca:	f000 f8ef 	bl	80050ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004ece:	4818      	ldr	r0, [pc, #96]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004ed0:	f002 fef8 	bl	8007cc4 <HAL_TIM_PWM_Init>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8004eda:	f000 f8e7 	bl	80050ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004ee6:	f107 0320 	add.w	r3, r7, #32
 8004eea:	4619      	mov	r1, r3
 8004eec:	4810      	ldr	r0, [pc, #64]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004eee:	f003 fc9b 	bl	8008828 <HAL_TIMEx_MasterConfigSynchronization>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8004ef8:	f000 f8d8 	bl	80050ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004efc:	2360      	movs	r3, #96	; 0x60
 8004efe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4619      	mov	r1, r3
 8004f12:	4807      	ldr	r0, [pc, #28]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004f14:	f002 ffee 	bl	8007ef4 <HAL_TIM_PWM_ConfigChannel>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8004f1e:	f000 f8c5 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004f22:	4803      	ldr	r0, [pc, #12]	; (8004f30 <MX_TIM5_Init+0xe4>)
 8004f24:	f000 fa86 	bl	8005434 <HAL_TIM_MspPostInit>

}
 8004f28:	bf00      	nop
 8004f2a:	3738      	adds	r7, #56	; 0x38
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000474 	.word	0x20000474
 8004f34:	40000c00 	.word	0x40000c00

08004f38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004f3c:	4b11      	ldr	r3, [pc, #68]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f3e:	4a12      	ldr	r2, [pc, #72]	; (8004f88 <MX_USART3_UART_Init+0x50>)
 8004f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004f42:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f5e:	220c      	movs	r2, #12
 8004f60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f6e:	4805      	ldr	r0, [pc, #20]	; (8004f84 <MX_USART3_UART_Init+0x4c>)
 8004f70:	f003 fcd6 	bl	8008920 <HAL_UART_Init>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004f7a:	f000 f897 	bl	80050ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	200004bc 	.word	0x200004bc
 8004f88:	40004800 	.word	0x40004800

08004f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	; 0x28
 8004f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f92:	f107 0314 	add.w	r3, r7, #20
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	; (800509c <MX_GPIO_Init+0x110>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	4a3c      	ldr	r2, [pc, #240]	; (800509c <MX_GPIO_Init+0x110>)
 8004fac:	f043 0304 	orr.w	r3, r3, #4
 8004fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb2:	4b3a      	ldr	r3, [pc, #232]	; (800509c <MX_GPIO_Init+0x110>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b36      	ldr	r3, [pc, #216]	; (800509c <MX_GPIO_Init+0x110>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	4a35      	ldr	r2, [pc, #212]	; (800509c <MX_GPIO_Init+0x110>)
 8004fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fce:	4b33      	ldr	r3, [pc, #204]	; (800509c <MX_GPIO_Init+0x110>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	4b2f      	ldr	r3, [pc, #188]	; (800509c <MX_GPIO_Init+0x110>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	4a2e      	ldr	r2, [pc, #184]	; (800509c <MX_GPIO_Init+0x110>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <MX_GPIO_Init+0x110>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	4b28      	ldr	r3, [pc, #160]	; (800509c <MX_GPIO_Init+0x110>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	4a27      	ldr	r2, [pc, #156]	; (800509c <MX_GPIO_Init+0x110>)
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	6313      	str	r3, [r2, #48]	; 0x30
 8005006:	4b25      	ldr	r3, [pc, #148]	; (800509c <MX_GPIO_Init+0x110>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VENTOLINA_Pin, GPIO_PIN_RESET);
 8005012:	2200      	movs	r2, #0
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	4822      	ldr	r0, [pc, #136]	; (80050a0 <MX_GPIO_Init+0x114>)
 8005018:	f001 fb4e 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSORE_TEMP_INT_Pin|SENSORE_TEMP_EXT_Pin, GPIO_PIN_RESET);
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005022:	4820      	ldr	r0, [pc, #128]	; (80050a4 <MX_GPIO_Init+0x118>)
 8005024:	f001 fb48 	bl	80066b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TASTO_JOYSTICK_Pin */
  GPIO_InitStruct.Pin = TASTO_JOYSTICK_Pin;
 8005028:	2310      	movs	r3, #16
 800502a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800502c:	2300      	movs	r3, #0
 800502e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005030:	2301      	movs	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TASTO_JOYSTICK_GPIO_Port, &GPIO_InitStruct);
 8005034:	f107 0314 	add.w	r3, r7, #20
 8005038:	4619      	mov	r1, r3
 800503a:	4819      	ldr	r0, [pc, #100]	; (80050a0 <MX_GPIO_Init+0x114>)
 800503c:	f001 f990 	bl	8006360 <HAL_GPIO_Init>

  /*Configure GPIO pins : VENTOLINA_Pin SENSORE_TEMP_3_Pin SENSORE_TEMP_4_Pin */
  GPIO_InitStruct.Pin = VENTOLINA_Pin;
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005044:	2301      	movs	r3, #1
 8005046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504c:	2300      	movs	r3, #0
 800504e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005050:	f107 0314 	add.w	r3, r7, #20
 8005054:	4619      	mov	r1, r3
 8005056:	4812      	ldr	r0, [pc, #72]	; (80050a0 <MX_GPIO_Init+0x114>)
 8005058:	f001 f982 	bl	8006360 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSORE_TEMP_INT_Pin SENSORE_TEMP_EXT_Pin */
  GPIO_InitStruct.Pin = SENSORE_TEMP_INT_Pin|SENSORE_TEMP_EXT_Pin;
 800505c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005062:	2301      	movs	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800506a:	2300      	movs	r3, #0
 800506c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506e:	f107 0314 	add.w	r3, r7, #20
 8005072:	4619      	mov	r1, r3
 8005074:	480b      	ldr	r0, [pc, #44]	; (80050a4 <MX_GPIO_Init+0x118>)
 8005076:	f001 f973 	bl	8006360 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATO_PORTA_Pin */
  GPIO_InitStruct.Pin = STATO_PORTA_Pin;
 800507a:	2310      	movs	r3, #16
 800507c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005082:	2301      	movs	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATO_PORTA_GPIO_Port, &GPIO_InitStruct);
 8005086:	f107 0314 	add.w	r3, r7, #20
 800508a:	4619      	mov	r1, r3
 800508c:	4806      	ldr	r0, [pc, #24]	; (80050a8 <MX_GPIO_Init+0x11c>)
 800508e:	f001 f967 	bl	8006360 <HAL_GPIO_Init>

}
 8005092:	bf00      	nop
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	40020800 	.word	0x40020800
 80050a4:	40020000 	.word	0x40020000
 80050a8:	40020400 	.word	0x40020400

080050ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050b0:	b672      	cpsid	i
}
 80050b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050b4:	e7fe      	b.n	80050b4 <Error_Handler+0x8>
	...

080050b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <HAL_MspInit+0x4c>)
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	4a0f      	ldr	r2, [pc, #60]	; (8005104 <HAL_MspInit+0x4c>)
 80050c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050cc:	6453      	str	r3, [r2, #68]	; 0x44
 80050ce:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <HAL_MspInit+0x4c>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d6:	607b      	str	r3, [r7, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	603b      	str	r3, [r7, #0]
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_MspInit+0x4c>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <HAL_MspInit+0x4c>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_MspInit+0x4c>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800

08005108 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08c      	sub	sp, #48	; 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 031c 	add.w	r3, r7, #28
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2e      	ldr	r2, [pc, #184]	; (80051e0 <HAL_ADC_MspInit+0xd8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d128      	bne.n	800517c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 8005134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005138:	6453      	str	r3, [r2, #68]	; 0x44
 800513a:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	4a25      	ldr	r2, [pc, #148]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6313      	str	r3, [r2, #48]	; 0x30
 8005156:	4b23      	ldr	r3, [pc, #140]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 8005158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ASSE_X_JOYSTICK_Pin;
 8005162:	2310      	movs	r3, #16
 8005164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005166:	2303      	movs	r3, #3
 8005168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ASSE_X_JOYSTICK_GPIO_Port, &GPIO_InitStruct);
 800516e:	f107 031c 	add.w	r3, r7, #28
 8005172:	4619      	mov	r1, r3
 8005174:	481c      	ldr	r0, [pc, #112]	; (80051e8 <HAL_ADC_MspInit+0xe0>)
 8005176:	f001 f8f3 	bl	8006360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800517a:	e02c      	b.n	80051d6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <HAL_ADC_MspInit+0xe4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d127      	bne.n	80051d6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 8005190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005194:	6453      	str	r3, [r2, #68]	; 0x44
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519e:	613b      	str	r3, [r7, #16]
 80051a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6313      	str	r3, [r2, #48]	; 0x30
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_ADC_MspInit+0xdc>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ASSE_Y_JOYSTICK_Pin;
 80051be:	2320      	movs	r3, #32
 80051c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051c2:	2303      	movs	r3, #3
 80051c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ASSE_Y_JOYSTICK_GPIO_Port, &GPIO_InitStruct);
 80051ca:	f107 031c 	add.w	r3, r7, #28
 80051ce:	4619      	mov	r1, r3
 80051d0:	4805      	ldr	r0, [pc, #20]	; (80051e8 <HAL_ADC_MspInit+0xe0>)
 80051d2:	f001 f8c5 	bl	8006360 <HAL_GPIO_Init>
}
 80051d6:	bf00      	nop
 80051d8:	3730      	adds	r7, #48	; 0x30
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40012000 	.word	0x40012000
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40020000 	.word	0x40020000
 80051ec:	40012100 	.word	0x40012100

080051f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f8:	f107 031c 	add.w	r3, r7, #28
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a42      	ldr	r2, [pc, #264]	; (8005318 <HAL_I2C_MspInit+0x128>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d12d      	bne.n	800526e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	4b41      	ldr	r3, [pc, #260]	; (800531c <HAL_I2C_MspInit+0x12c>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4a40      	ldr	r2, [pc, #256]	; (800531c <HAL_I2C_MspInit+0x12c>)
 800521c:	f043 0302 	orr.w	r3, r3, #2
 8005220:	6313      	str	r3, [r2, #48]	; 0x30
 8005222:	4b3e      	ldr	r3, [pc, #248]	; (800531c <HAL_I2C_MspInit+0x12c>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ESP32_SCL_Pin|ESP32_SDA_Pin;
 800522e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005234:	2312      	movs	r3, #18
 8005236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	2303      	movs	r3, #3
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005240:	2304      	movs	r3, #4
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005244:	f107 031c 	add.w	r3, r7, #28
 8005248:	4619      	mov	r1, r3
 800524a:	4835      	ldr	r0, [pc, #212]	; (8005320 <HAL_I2C_MspInit+0x130>)
 800524c:	f001 f888 	bl	8006360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	4b31      	ldr	r3, [pc, #196]	; (800531c <HAL_I2C_MspInit+0x12c>)
 8005256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005258:	4a30      	ldr	r2, [pc, #192]	; (800531c <HAL_I2C_MspInit+0x12c>)
 800525a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800525e:	6413      	str	r3, [r2, #64]	; 0x40
 8005260:	4b2e      	ldr	r3, [pc, #184]	; (800531c <HAL_I2C_MspInit+0x12c>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800526c:	e050      	b.n	8005310 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <HAL_I2C_MspInit+0x134>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d14b      	bne.n	8005310 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	4b27      	ldr	r3, [pc, #156]	; (800531c <HAL_I2C_MspInit+0x12c>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	4a26      	ldr	r2, [pc, #152]	; (800531c <HAL_I2C_MspInit+0x12c>)
 8005282:	f043 0302 	orr.w	r3, r3, #2
 8005286:	6313      	str	r3, [r2, #48]	; 0x30
 8005288:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_I2C_MspInit+0x12c>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005294:	2300      	movs	r3, #0
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <HAL_I2C_MspInit+0x12c>)
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	4a1f      	ldr	r2, [pc, #124]	; (800531c <HAL_I2C_MspInit+0x12c>)
 800529e:	f043 0304 	orr.w	r3, r3, #4
 80052a2:	6313      	str	r3, [r2, #48]	; 0x30
 80052a4:	4b1d      	ldr	r3, [pc, #116]	; (800531c <HAL_I2C_MspInit+0x12c>)
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DISPLAY_SCL_Pin;
 80052b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052b6:	2312      	movs	r3, #18
 80052b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052be:	2303      	movs	r3, #3
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80052c2:	2304      	movs	r3, #4
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISPLAY_SCL_GPIO_Port, &GPIO_InitStruct);
 80052c6:	f107 031c 	add.w	r3, r7, #28
 80052ca:	4619      	mov	r1, r3
 80052cc:	4814      	ldr	r0, [pc, #80]	; (8005320 <HAL_I2C_MspInit+0x130>)
 80052ce:	f001 f847 	bl	8006360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISPLAY_SDA_Pin;
 80052d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052d8:	2312      	movs	r3, #18
 80052da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e0:	2303      	movs	r3, #3
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80052e4:	2304      	movs	r3, #4
 80052e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISPLAY_SDA_GPIO_Port, &GPIO_InitStruct);
 80052e8:	f107 031c 	add.w	r3, r7, #28
 80052ec:	4619      	mov	r1, r3
 80052ee:	480e      	ldr	r0, [pc, #56]	; (8005328 <HAL_I2C_MspInit+0x138>)
 80052f0:	f001 f836 	bl	8006360 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80052f4:	2300      	movs	r3, #0
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <HAL_I2C_MspInit+0x12c>)
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	4a07      	ldr	r2, [pc, #28]	; (800531c <HAL_I2C_MspInit+0x12c>)
 80052fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005302:	6413      	str	r3, [r2, #64]	; 0x40
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_I2C_MspInit+0x12c>)
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]
}
 8005310:	bf00      	nop
 8005312:	3730      	adds	r7, #48	; 0x30
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40005400 	.word	0x40005400
 800531c:	40023800 	.word	0x40023800
 8005320:	40020400 	.word	0x40020400
 8005324:	40005800 	.word	0x40005800
 8005328:	40020800 	.word	0x40020800

0800532c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a29      	ldr	r2, [pc, #164]	; (80053e0 <HAL_TIM_Base_MspInit+0xb4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10e      	bne.n	800535c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6453      	str	r3, [r2, #68]	; 0x44
 800534e:	4b25      	ldr	r3, [pc, #148]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800535a:	e03a      	b.n	80053d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	613b      	str	r3, [r7, #16]
 800536a:	4b1e      	ldr	r3, [pc, #120]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	6413      	str	r3, [r2, #64]	; 0x40
 8005376:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]
}
 8005382:	e026      	b.n	80053d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <HAL_TIM_Base_MspInit+0xbc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10e      	bne.n	80053ac <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
 8005392:	4b14      	ldr	r3, [pc, #80]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	6413      	str	r3, [r2, #64]	; 0x40
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	e012      	b.n	80053d2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <HAL_TIM_Base_MspInit+0xc0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d10d      	bne.n	80053d2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	4a09      	ldr	r2, [pc, #36]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 80053c0:	f043 0308 	orr.w	r3, r3, #8
 80053c4:	6413      	str	r3, [r2, #64]	; 0x40
 80053c6:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <HAL_TIM_Base_MspInit+0xb8>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	68bb      	ldr	r3, [r7, #8]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40023800 	.word	0x40023800
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00

080053f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a0b      	ldr	r2, [pc, #44]	; (800542c <HAL_TIM_PWM_MspInit+0x3c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10d      	bne.n	800541e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_TIM_PWM_MspInit+0x40>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a09      	ldr	r2, [pc, #36]	; (8005430 <HAL_TIM_PWM_MspInit+0x40>)
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <HAL_TIM_PWM_MspInit+0x40>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40000400 	.word	0x40000400
 8005430:	40023800 	.word	0x40023800

08005434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08c      	sub	sp, #48	; 0x30
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800543c:	f107 031c 	add.w	r3, r7, #28
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	609a      	str	r2, [r3, #8]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d13d      	bne.n	80054d2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	4b55      	ldr	r3, [pc, #340]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a54      	ldr	r2, [pc, #336]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b52      	ldr	r3, [pc, #328]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	4b4e      	ldr	r3, [pc, #312]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4a4d      	ldr	r2, [pc, #308]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 800547c:	f043 0302 	orr.w	r3, r3, #2
 8005480:	6313      	str	r3, [r2, #48]	; 0x30
 8005482:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PELTIER_Pin;
 800548e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005494:	2302      	movs	r3, #2
 8005496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005498:	2300      	movs	r3, #0
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800549c:	2300      	movs	r3, #0
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054a0:	2301      	movs	r3, #1
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PELTIER_GPIO_Port, &GPIO_InitStruct);
 80054a4:	f107 031c 	add.w	r3, r7, #28
 80054a8:	4619      	mov	r1, r3
 80054aa:	4842      	ldr	r0, [pc, #264]	; (80055b4 <HAL_TIM_MspPostInit+0x180>)
 80054ac:	f000 ff58 	bl	8006360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PELTIER_HOT_FAN_Pin;
 80054b0:	2308      	movs	r3, #8
 80054b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b4:	2302      	movs	r3, #2
 80054b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	2300      	movs	r3, #0
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054bc:	2300      	movs	r3, #0
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80054c0:	2301      	movs	r3, #1
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PELTIER_HOT_FAN_GPIO_Port, &GPIO_InitStruct);
 80054c4:	f107 031c 	add.w	r3, r7, #28
 80054c8:	4619      	mov	r1, r3
 80054ca:	483b      	ldr	r0, [pc, #236]	; (80055b8 <HAL_TIM_MspPostInit+0x184>)
 80054cc:	f000 ff48 	bl	8006360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80054d0:	e06a      	b.n	80055a8 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM3)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a39      	ldr	r2, [pc, #228]	; (80055bc <HAL_TIM_MspPostInit+0x188>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d11e      	bne.n	800551a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	4a32      	ldr	r2, [pc, #200]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6313      	str	r3, [r2, #48]	; 0x30
 80054ec:	4b30      	ldr	r3, [pc, #192]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PELTIER_COLD_FAN_Pin|PTC_FAN_Pin;
 80054f8:	23c0      	movs	r3, #192	; 0xc0
 80054fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054fc:	2302      	movs	r3, #2
 80054fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005500:	2300      	movs	r3, #0
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005504:	2300      	movs	r3, #0
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005508:	2302      	movs	r3, #2
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800550c:	f107 031c 	add.w	r3, r7, #28
 8005510:	4619      	mov	r1, r3
 8005512:	4828      	ldr	r0, [pc, #160]	; (80055b4 <HAL_TIM_MspPostInit+0x180>)
 8005514:	f000 ff24 	bl	8006360 <HAL_GPIO_Init>
}
 8005518:	e046      	b.n	80055a8 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM4)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a28      	ldr	r2, [pc, #160]	; (80055c0 <HAL_TIM_MspPostInit+0x18c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d11e      	bne.n	8005562 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	6313      	str	r3, [r2, #48]	; 0x30
 8005534:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_1_Pin|SERVO_2_Pin;
 8005540:	23c0      	movs	r3, #192	; 0xc0
 8005542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005544:	2302      	movs	r3, #2
 8005546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554c:	2300      	movs	r3, #0
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005550:	2302      	movs	r3, #2
 8005552:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005554:	f107 031c 	add.w	r3, r7, #28
 8005558:	4619      	mov	r1, r3
 800555a:	4817      	ldr	r0, [pc, #92]	; (80055b8 <HAL_TIM_MspPostInit+0x184>)
 800555c:	f000 ff00 	bl	8006360 <HAL_GPIO_Init>
}
 8005560:	e022      	b.n	80055a8 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM5)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <HAL_TIM_MspPostInit+0x190>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d11d      	bne.n	80055a8 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800556c:	2300      	movs	r3, #0
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	4a0e      	ldr	r2, [pc, #56]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	6313      	str	r3, [r2, #48]	; 0x30
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <HAL_TIM_MspPostInit+0x17c>)
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PTC_Pin;
 8005588:	2301      	movs	r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800558c:	2302      	movs	r3, #2
 800558e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005590:	2300      	movs	r3, #0
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005594:	2300      	movs	r3, #0
 8005596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005598:	2302      	movs	r3, #2
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PTC_GPIO_Port, &GPIO_InitStruct);
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	4619      	mov	r1, r3
 80055a2:	4804      	ldr	r0, [pc, #16]	; (80055b4 <HAL_TIM_MspPostInit+0x180>)
 80055a4:	f000 fedc 	bl	8006360 <HAL_GPIO_Init>
}
 80055a8:	bf00      	nop
 80055aa:	3730      	adds	r7, #48	; 0x30
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40020000 	.word	0x40020000
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40000800 	.word	0x40000800
 80055c4:	40000c00 	.word	0x40000c00

080055c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	609a      	str	r2, [r3, #8]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_UART_MspInit+0x84>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d12c      	bne.n	8005644 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055f8:	6413      	str	r3, [r2, #64]	; 0x40
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_UART_MspInit+0x88>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_UART_MspInit+0x88>)
 8005610:	f043 0304 	orr.w	r3, r3, #4
 8005614:	6313      	str	r3, [r2, #48]	; 0x30
 8005616:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <HAL_UART_MspInit+0x88>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8005622:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8005626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005628:	2302      	movs	r3, #2
 800562a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562c:	2300      	movs	r3, #0
 800562e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005630:	2303      	movs	r3, #3
 8005632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005634:	2307      	movs	r3, #7
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	4619      	mov	r1, r3
 800563e:	4805      	ldr	r0, [pc, #20]	; (8005654 <HAL_UART_MspInit+0x8c>)
 8005640:	f000 fe8e 	bl	8006360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005644:	bf00      	nop
 8005646:	3728      	adds	r7, #40	; 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40004800 	.word	0x40004800
 8005650:	40023800 	.word	0x40023800
 8005654:	40020800 	.word	0x40020800

08005658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800565c:	e7fe      	b.n	800565c <NMI_Handler+0x4>

0800565e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005662:	e7fe      	b.n	8005662 <HardFault_Handler+0x4>

08005664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005668:	e7fe      	b.n	8005668 <MemManage_Handler+0x4>

0800566a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800566a:	b480      	push	{r7}
 800566c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800566e:	e7fe      	b.n	800566e <BusFault_Handler+0x4>

08005670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005674:	e7fe      	b.n	8005674 <UsageFault_Handler+0x4>

08005676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056a4:	f000 f956 	bl	8005954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return 1;
 80056b0:	2301      	movs	r3, #1
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_kill>:

int _kill(int pid, int sig)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80056c6:	f003 fced 	bl	80090a4 <__errno>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2216      	movs	r2, #22
 80056ce:	601a      	str	r2, [r3, #0]
  return -1;
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <_exit>:

void _exit (int status)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80056e4:	f04f 31ff 	mov.w	r1, #4294967295
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ffe7 	bl	80056bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80056ee:	e7fe      	b.n	80056ee <_exit+0x12>

080056f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e00a      	b.n	8005718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005702:	f3af 8000 	nop.w
 8005706:	4601      	mov	r1, r0
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	60ba      	str	r2, [r7, #8]
 800570e:	b2ca      	uxtb	r2, r1
 8005710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	3301      	adds	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	dbf0      	blt.n	8005702 <_read+0x12>
  }

  return len;
 8005720:	687b      	ldr	r3, [r7, #4]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	e009      	b.n	8005750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	60ba      	str	r2, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	3301      	adds	r3, #1
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	dbf1      	blt.n	800573c <_write+0x12>
  }
  return len;
 8005758:	687b      	ldr	r3, [r7, #4]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_close>:

int _close(int file)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800576a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800576e:	4618      	mov	r0, r3
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800578a:	605a      	str	r2, [r3, #4]
  return 0;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <_isatty>:

int _isatty(int file)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80057a2:	2301      	movs	r3, #1
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <_sbrk+0x5c>)
 80057d6:	4b15      	ldr	r3, [pc, #84]	; (800582c <_sbrk+0x60>)
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057e0:	4b13      	ldr	r3, [pc, #76]	; (8005830 <_sbrk+0x64>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057e8:	4b11      	ldr	r3, [pc, #68]	; (8005830 <_sbrk+0x64>)
 80057ea:	4a12      	ldr	r2, [pc, #72]	; (8005834 <_sbrk+0x68>)
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057ee:	4b10      	ldr	r3, [pc, #64]	; (8005830 <_sbrk+0x64>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4413      	add	r3, r2
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d207      	bcs.n	800580c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057fc:	f003 fc52 	bl	80090a4 <__errno>
 8005800:	4603      	mov	r3, r0
 8005802:	220c      	movs	r2, #12
 8005804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	e009      	b.n	8005820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800580c:	4b08      	ldr	r3, [pc, #32]	; (8005830 <_sbrk+0x64>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <_sbrk+0x64>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4413      	add	r3, r2
 800581a:	4a05      	ldr	r2, [pc, #20]	; (8005830 <_sbrk+0x64>)
 800581c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800581e:	68fb      	ldr	r3, [r7, #12]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20020000 	.word	0x20020000
 800582c:	00000400 	.word	0x00000400
 8005830:	200005c4 	.word	0x200005c4
 8005834:	200005e0 	.word	0x200005e0

08005838 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800583c:	4b06      	ldr	r3, [pc, #24]	; (8005858 <SystemInit+0x20>)
 800583e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005842:	4a05      	ldr	r2, [pc, #20]	; (8005858 <SystemInit+0x20>)
 8005844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	e000ed00 	.word	0xe000ed00

0800585c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800585c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005860:	480d      	ldr	r0, [pc, #52]	; (8005898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005862:	490e      	ldr	r1, [pc, #56]	; (800589c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005864:	4a0e      	ldr	r2, [pc, #56]	; (80058a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005868:	e002      	b.n	8005870 <LoopCopyDataInit>

0800586a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800586a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800586c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800586e:	3304      	adds	r3, #4

08005870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005874:	d3f9      	bcc.n	800586a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005876:	4a0b      	ldr	r2, [pc, #44]	; (80058a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005878:	4c0b      	ldr	r4, [pc, #44]	; (80058a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800587a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800587c:	e001      	b.n	8005882 <LoopFillZerobss>

0800587e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800587e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005880:	3204      	adds	r2, #4

08005882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005884:	d3fb      	bcc.n	800587e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005886:	f7ff ffd7 	bl	8005838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800588a:	f003 fc11 	bl	80090b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800588e:	f7fe f841 	bl	8003914 <main>
  bx  lr    
 8005892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800589c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80058a0:	0800e0b4 	.word	0x0800e0b4
  ldr r2, =_sbss
 80058a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80058a8:	200005dc 	.word	0x200005dc

080058ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058ac:	e7fe      	b.n	80058ac <ADC_IRQHandler>
	...

080058b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058b4:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <HAL_Init+0x40>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a0d      	ldr	r2, [pc, #52]	; (80058f0 <HAL_Init+0x40>)
 80058ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_Init+0x40>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a0a      	ldr	r2, [pc, #40]	; (80058f0 <HAL_Init+0x40>)
 80058c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <HAL_Init+0x40>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <HAL_Init+0x40>)
 80058d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058d8:	2003      	movs	r0, #3
 80058da:	f000 fd0d 	bl	80062f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058de:	2000      	movs	r0, #0
 80058e0:	f000 f808 	bl	80058f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058e4:	f7ff fbe8 	bl	80050b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40023c00 	.word	0x40023c00

080058f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <HAL_InitTick+0x54>)
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <HAL_InitTick+0x58>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	4619      	mov	r1, r3
 8005906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800590a:	fbb3 f3f1 	udiv	r3, r3, r1
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fd17 	bl	8006346 <HAL_SYSTICK_Config>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e00e      	b.n	8005940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b0f      	cmp	r3, #15
 8005926:	d80a      	bhi.n	800593e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005928:	2200      	movs	r2, #0
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	f04f 30ff 	mov.w	r0, #4294967295
 8005930:	f000 fced 	bl	800630e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005934:	4a06      	ldr	r2, [pc, #24]	; (8005950 <HAL_InitTick+0x5c>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	e000      	b.n	8005940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000018 	.word	0x20000018
 800594c:	20000020 	.word	0x20000020
 8005950:	2000001c 	.word	0x2000001c

08005954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_IncTick+0x20>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_IncTick+0x24>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4413      	add	r3, r2
 8005964:	4a04      	ldr	r2, [pc, #16]	; (8005978 <HAL_IncTick+0x24>)
 8005966:	6013      	str	r3, [r2, #0]
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000020 	.word	0x20000020
 8005978:	200005c8 	.word	0x200005c8

0800597c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return uwTick;
 8005980:	4b03      	ldr	r3, [pc, #12]	; (8005990 <HAL_GetTick+0x14>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	200005c8 	.word	0x200005c8

08005994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800599c:	f7ff ffee 	bl	800597c <HAL_GetTick>
 80059a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ac:	d005      	beq.n	80059ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059ae:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <HAL_Delay+0x44>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4413      	add	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80059ba:	bf00      	nop
 80059bc:	f7ff ffde 	bl	800597c <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d8f7      	bhi.n	80059bc <HAL_Delay+0x28>
  {
  }
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000020 	.word	0x20000020

080059dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e033      	b.n	8005a5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d109      	bne.n	8005a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fb84 	bl	8005108 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d118      	bne.n	8005a4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a22:	f023 0302 	bic.w	r3, r3, #2
 8005a26:	f043 0202 	orr.w	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fab4 	bl	8005f9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	f043 0201 	orr.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
 8005a4a:	e001      	b.n	8005a50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_ADC_Start+0x1a>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e0b2      	b.n	8005be4 <HAL_ADC_Start+0x180>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d018      	beq.n	8005ac6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005aa4:	4b52      	ldr	r3, [pc, #328]	; (8005bf0 <HAL_ADC_Start+0x18c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_ADC_Start+0x190>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	0c9a      	lsrs	r2, r3, #18
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ab8:	e002      	b.n	8005ac0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f9      	bne.n	8005aba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d17a      	bne.n	8005bca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005afe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b12:	d106      	bne.n	8005b22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	f023 0206 	bic.w	r2, r3, #6
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	645a      	str	r2, [r3, #68]	; 0x44
 8005b20:	e002      	b.n	8005b28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b30:	4b31      	ldr	r3, [pc, #196]	; (8005bf8 <HAL_ADC_Start+0x194>)
 8005b32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d12a      	bne.n	8005ba0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2b      	ldr	r2, [pc, #172]	; (8005bfc <HAL_ADC_Start+0x198>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d015      	beq.n	8005b80 <HAL_ADC_Start+0x11c>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <HAL_ADC_Start+0x19c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d105      	bne.n	8005b6a <HAL_ADC_Start+0x106>
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <HAL_ADC_Start+0x194>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a25      	ldr	r2, [pc, #148]	; (8005c04 <HAL_ADC_Start+0x1a0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d136      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
 8005b74:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_ADC_Start+0x194>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d130      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d129      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b9c:	609a      	str	r2, [r3, #8]
 8005b9e:	e020      	b.n	8005be2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <HAL_ADC_Start+0x198>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d11b      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d114      	bne.n	8005be2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bc6:	609a      	str	r2, [r3, #8]
 8005bc8:	e00b      	b.n	8005be2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f043 0210 	orr.w	r2, r3, #16
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bda:	f043 0201 	orr.w	r2, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000018 	.word	0x20000018
 8005bf4:	431bde83 	.word	0x431bde83
 8005bf8:	40012300 	.word	0x40012300
 8005bfc:	40012000 	.word	0x40012000
 8005c00:	40012100 	.word	0x40012100
 8005c04:	40012200 	.word	0x40012200

08005c08 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c24:	d113      	bne.n	8005c4e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c34:	d10b      	bne.n	8005c4e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e063      	b.n	8005d16 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005c4e:	f7ff fe95 	bl	800597c <HAL_GetTick>
 8005c52:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c54:	e021      	b.n	8005c9a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d01d      	beq.n	8005c9a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_ADC_PollForConversion+0x6c>
 8005c64:	f7ff fe8a 	bl	800597c <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d212      	bcs.n	8005c9a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d00b      	beq.n	8005c9a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0204 	orr.w	r2, r3, #4
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e03d      	b.n	8005d16 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d1d6      	bne.n	8005c56 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0212 	mvn.w	r2, #18
 8005cb0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d123      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d11f      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d006      	beq.n	8005cf0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d111      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_ADC_ConfigChannel+0x1c>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e113      	b.n	8005f7c <HAL_ADC_ConfigChannel+0x244>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b09      	cmp	r3, #9
 8005d62:	d925      	bls.n	8005db0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68d9      	ldr	r1, [r3, #12]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	461a      	mov	r2, r3
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	3b1e      	subs	r3, #30
 8005d7a:	2207      	movs	r2, #7
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43da      	mvns	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	400a      	ands	r2, r1
 8005d88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68d9      	ldr	r1, [r3, #12]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4403      	add	r3, r0
 8005da2:	3b1e      	subs	r3, #30
 8005da4:	409a      	lsls	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	60da      	str	r2, [r3, #12]
 8005dae:	e022      	b.n	8005df6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6919      	ldr	r1, [r3, #16]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4413      	add	r3, r2
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43da      	mvns	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6919      	ldr	r1, [r3, #16]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4618      	mov	r0, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4403      	add	r3, r0
 8005dec:	409a      	lsls	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b06      	cmp	r3, #6
 8005dfc:	d824      	bhi.n	8005e48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3b05      	subs	r3, #5
 8005e10:	221f      	movs	r2, #31
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43da      	mvns	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	400a      	ands	r2, r1
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	3b05      	subs	r3, #5
 8005e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34
 8005e46:	e04c      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b0c      	cmp	r3, #12
 8005e4e:	d824      	bhi.n	8005e9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	3b23      	subs	r3, #35	; 0x23
 8005e62:	221f      	movs	r2, #31
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	43da      	mvns	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	400a      	ands	r2, r1
 8005e70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4618      	mov	r0, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	3b23      	subs	r3, #35	; 0x23
 8005e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
 8005e98:	e023      	b.n	8005ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3b41      	subs	r3, #65	; 0x41
 8005eac:	221f      	movs	r2, #31
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	400a      	ands	r2, r1
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4618      	mov	r0, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3b41      	subs	r3, #65	; 0x41
 8005ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ee2:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <HAL_ADC_ConfigChannel+0x250>)
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a28      	ldr	r2, [pc, #160]	; (8005f8c <HAL_ADC_ConfigChannel+0x254>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10f      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x1d8>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b12      	cmp	r3, #18
 8005ef6:	d10b      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <HAL_ADC_ConfigChannel+0x254>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d12b      	bne.n	8005f72 <HAL_ADC_ConfigChannel+0x23a>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <HAL_ADC_ConfigChannel+0x258>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d003      	beq.n	8005f2c <HAL_ADC_ConfigChannel+0x1f4>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b11      	cmp	r3, #17
 8005f2a:	d122      	bne.n	8005f72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a11      	ldr	r2, [pc, #68]	; (8005f90 <HAL_ADC_ConfigChannel+0x258>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d111      	bne.n	8005f72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f4e:	4b11      	ldr	r3, [pc, #68]	; (8005f94 <HAL_ADC_ConfigChannel+0x25c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a11      	ldr	r2, [pc, #68]	; (8005f98 <HAL_ADC_ConfigChannel+0x260>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	0c9a      	lsrs	r2, r3, #18
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f64:	e002      	b.n	8005f6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f9      	bne.n	8005f66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40012300 	.word	0x40012300
 8005f8c:	40012000 	.word	0x40012000
 8005f90:	10000012 	.word	0x10000012
 8005f94:	20000018 	.word	0x20000018
 8005f98:	431bde83 	.word	0x431bde83

08005f9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fa4:	4b79      	ldr	r3, [pc, #484]	; (800618c <ADC_Init+0x1f0>)
 8005fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	021a      	lsls	r2, r3, #8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6859      	ldr	r1, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006016:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6899      	ldr	r1, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	4a58      	ldr	r2, [pc, #352]	; (8006190 <ADC_Init+0x1f4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d022      	beq.n	800607a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006042:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6899      	ldr	r1, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6899      	ldr	r1, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	e00f      	b.n	800609a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006098:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0202 	bic.w	r2, r2, #2
 80060a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6899      	ldr	r1, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	7e1b      	ldrb	r3, [r3, #24]
 80060b4:	005a      	lsls	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01b      	beq.n	8006100 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6859      	ldr	r1, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	3b01      	subs	r3, #1
 80060f4:	035a      	lsls	r2, r3, #13
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	e007      	b.n	8006110 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800610e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800611e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	3b01      	subs	r3, #1
 800612c:	051a      	lsls	r2, r3, #20
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6899      	ldr	r1, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006152:	025a      	lsls	r2, r3, #9
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6899      	ldr	r1, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	029a      	lsls	r2, r3, #10
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]
}
 8006180:	bf00      	nop
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	40012300 	.word	0x40012300
 8006190:	0f000001 	.word	0x0f000001

08006194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <__NVIC_SetPriorityGrouping+0x44>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061b0:	4013      	ands	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061c6:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <__NVIC_SetPriorityGrouping+0x44>)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	60d3      	str	r3, [r2, #12]
}
 80061cc:	bf00      	nop
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <__NVIC_GetPriorityGrouping+0x18>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	0a1b      	lsrs	r3, r3, #8
 80061e6:	f003 0307 	and.w	r3, r3, #7
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	e000ed00 	.word	0xe000ed00

080061f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	6039      	str	r1, [r7, #0]
 8006202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006208:	2b00      	cmp	r3, #0
 800620a:	db0a      	blt.n	8006222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	490c      	ldr	r1, [pc, #48]	; (8006244 <__NVIC_SetPriority+0x4c>)
 8006212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006216:	0112      	lsls	r2, r2, #4
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	440b      	add	r3, r1
 800621c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006220:	e00a      	b.n	8006238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	4908      	ldr	r1, [pc, #32]	; (8006248 <__NVIC_SetPriority+0x50>)
 8006228:	79fb      	ldrb	r3, [r7, #7]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	3b04      	subs	r3, #4
 8006230:	0112      	lsls	r2, r2, #4
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	440b      	add	r3, r1
 8006236:	761a      	strb	r2, [r3, #24]
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	e000e100 	.word	0xe000e100
 8006248:	e000ed00 	.word	0xe000ed00

0800624c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800624c:	b480      	push	{r7}
 800624e:	b089      	sub	sp, #36	; 0x24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f1c3 0307 	rsb	r3, r3, #7
 8006266:	2b04      	cmp	r3, #4
 8006268:	bf28      	it	cs
 800626a:	2304      	movcs	r3, #4
 800626c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	3304      	adds	r3, #4
 8006272:	2b06      	cmp	r3, #6
 8006274:	d902      	bls.n	800627c <NVIC_EncodePriority+0x30>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3b03      	subs	r3, #3
 800627a:	e000      	b.n	800627e <NVIC_EncodePriority+0x32>
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006280:	f04f 32ff 	mov.w	r2, #4294967295
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43da      	mvns	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	401a      	ands	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006294:	f04f 31ff 	mov.w	r1, #4294967295
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	43d9      	mvns	r1, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a4:	4313      	orrs	r3, r2
         );
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3724      	adds	r7, #36	; 0x24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
	...

080062b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062c4:	d301      	bcc.n	80062ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062c6:	2301      	movs	r3, #1
 80062c8:	e00f      	b.n	80062ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <SysTick_Config+0x40>)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062d2:	210f      	movs	r1, #15
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	f7ff ff8e 	bl	80061f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <SysTick_Config+0x40>)
 80062de:	2200      	movs	r2, #0
 80062e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062e2:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <SysTick_Config+0x40>)
 80062e4:	2207      	movs	r2, #7
 80062e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	e000e010 	.word	0xe000e010

080062f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff47 	bl	8006194 <__NVIC_SetPriorityGrouping>
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800630e:	b580      	push	{r7, lr}
 8006310:	b086      	sub	sp, #24
 8006312:	af00      	add	r7, sp, #0
 8006314:	4603      	mov	r3, r0
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006320:	f7ff ff5c 	bl	80061dc <__NVIC_GetPriorityGrouping>
 8006324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f7ff ff8e 	bl	800624c <NVIC_EncodePriority>
 8006330:	4602      	mov	r2, r0
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff5d 	bl	80061f8 <__NVIC_SetPriority>
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff ffb0 	bl	80062b4 <SysTick_Config>
 8006354:	4603      	mov	r3, r0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006360:	b480      	push	{r7}
 8006362:	b089      	sub	sp, #36	; 0x24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006372:	2300      	movs	r3, #0
 8006374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	e165      	b.n	8006648 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800637c:	2201      	movs	r2, #1
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4013      	ands	r3, r2
 800638e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	429a      	cmp	r2, r3
 8006396:	f040 8154 	bne.w	8006642 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d005      	beq.n	80063b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d130      	bne.n	8006414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	2203      	movs	r2, #3
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	fa02 f303 	lsl.w	r3, r2, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4313      	orrs	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063e8:	2201      	movs	r2, #1
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	43db      	mvns	r3, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4013      	ands	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 0201 	and.w	r2, r3, #1
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4313      	orrs	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	2b03      	cmp	r3, #3
 800641e:	d017      	beq.n	8006450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	2203      	movs	r2, #3
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	4313      	orrs	r3, r2
 8006448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d123      	bne.n	80064a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	08da      	lsrs	r2, r3, #3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3208      	adds	r2, #8
 8006464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	220f      	movs	r2, #15
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	43db      	mvns	r3, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	4013      	ands	r3, r2
 800647e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	fa02 f303 	lsl.w	r3, r2, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4313      	orrs	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	08da      	lsrs	r2, r3, #3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3208      	adds	r2, #8
 800649e:	69b9      	ldr	r1, [r7, #24]
 80064a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	2203      	movs	r2, #3
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	43db      	mvns	r3, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4013      	ands	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f003 0203 	and.w	r2, r3, #3
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80ae 	beq.w	8006642 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	4b5d      	ldr	r3, [pc, #372]	; (8006660 <HAL_GPIO_Init+0x300>)
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	4a5c      	ldr	r2, [pc, #368]	; (8006660 <HAL_GPIO_Init+0x300>)
 80064f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064f4:	6453      	str	r3, [r2, #68]	; 0x44
 80064f6:	4b5a      	ldr	r3, [pc, #360]	; (8006660 <HAL_GPIO_Init+0x300>)
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006502:	4a58      	ldr	r2, [pc, #352]	; (8006664 <HAL_GPIO_Init+0x304>)
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	089b      	lsrs	r3, r3, #2
 8006508:	3302      	adds	r3, #2
 800650a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	220f      	movs	r2, #15
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43db      	mvns	r3, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4013      	ands	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a4f      	ldr	r2, [pc, #316]	; (8006668 <HAL_GPIO_Init+0x308>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d025      	beq.n	800657a <HAL_GPIO_Init+0x21a>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a4e      	ldr	r2, [pc, #312]	; (800666c <HAL_GPIO_Init+0x30c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01f      	beq.n	8006576 <HAL_GPIO_Init+0x216>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a4d      	ldr	r2, [pc, #308]	; (8006670 <HAL_GPIO_Init+0x310>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d019      	beq.n	8006572 <HAL_GPIO_Init+0x212>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a4c      	ldr	r2, [pc, #304]	; (8006674 <HAL_GPIO_Init+0x314>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d013      	beq.n	800656e <HAL_GPIO_Init+0x20e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a4b      	ldr	r2, [pc, #300]	; (8006678 <HAL_GPIO_Init+0x318>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00d      	beq.n	800656a <HAL_GPIO_Init+0x20a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a4a      	ldr	r2, [pc, #296]	; (800667c <HAL_GPIO_Init+0x31c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <HAL_GPIO_Init+0x206>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a49      	ldr	r2, [pc, #292]	; (8006680 <HAL_GPIO_Init+0x320>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d101      	bne.n	8006562 <HAL_GPIO_Init+0x202>
 800655e:	2306      	movs	r3, #6
 8006560:	e00c      	b.n	800657c <HAL_GPIO_Init+0x21c>
 8006562:	2307      	movs	r3, #7
 8006564:	e00a      	b.n	800657c <HAL_GPIO_Init+0x21c>
 8006566:	2305      	movs	r3, #5
 8006568:	e008      	b.n	800657c <HAL_GPIO_Init+0x21c>
 800656a:	2304      	movs	r3, #4
 800656c:	e006      	b.n	800657c <HAL_GPIO_Init+0x21c>
 800656e:	2303      	movs	r3, #3
 8006570:	e004      	b.n	800657c <HAL_GPIO_Init+0x21c>
 8006572:	2302      	movs	r3, #2
 8006574:	e002      	b.n	800657c <HAL_GPIO_Init+0x21c>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_GPIO_Init+0x21c>
 800657a:	2300      	movs	r3, #0
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	f002 0203 	and.w	r2, r2, #3
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	4093      	lsls	r3, r2
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800658c:	4935      	ldr	r1, [pc, #212]	; (8006664 <HAL_GPIO_Init+0x304>)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	089b      	lsrs	r3, r3, #2
 8006592:	3302      	adds	r3, #2
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800659a:	4b3a      	ldr	r3, [pc, #232]	; (8006684 <HAL_GPIO_Init+0x324>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	43db      	mvns	r3, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4013      	ands	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065be:	4a31      	ldr	r2, [pc, #196]	; (8006684 <HAL_GPIO_Init+0x324>)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065c4:	4b2f      	ldr	r3, [pc, #188]	; (8006684 <HAL_GPIO_Init+0x324>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	43db      	mvns	r3, r3
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	4013      	ands	r3, r2
 80065d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065e8:	4a26      	ldr	r2, [pc, #152]	; (8006684 <HAL_GPIO_Init+0x324>)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065ee:	4b25      	ldr	r3, [pc, #148]	; (8006684 <HAL_GPIO_Init+0x324>)
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	43db      	mvns	r3, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	4013      	ands	r3, r2
 80065fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4313      	orrs	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006612:	4a1c      	ldr	r2, [pc, #112]	; (8006684 <HAL_GPIO_Init+0x324>)
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006618:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <HAL_GPIO_Init+0x324>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	43db      	mvns	r3, r3
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	4013      	ands	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <HAL_GPIO_Init+0x324>)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	3301      	adds	r3, #1
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	2b0f      	cmp	r3, #15
 800664c:	f67f ae96 	bls.w	800637c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	3724      	adds	r7, #36	; 0x24
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40023800 	.word	0x40023800
 8006664:	40013800 	.word	0x40013800
 8006668:	40020000 	.word	0x40020000
 800666c:	40020400 	.word	0x40020400
 8006670:	40020800 	.word	0x40020800
 8006674:	40020c00 	.word	0x40020c00
 8006678:	40021000 	.word	0x40021000
 800667c:	40021400 	.word	0x40021400
 8006680:	40021800 	.word	0x40021800
 8006684:	40013c00 	.word	0x40013c00

08006688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	887b      	ldrh	r3, [r7, #2]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	e001      	b.n	80066aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	807b      	strh	r3, [r7, #2]
 80066c4:	4613      	mov	r3, r2
 80066c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066c8:	787b      	ldrb	r3, [r7, #1]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80066d4:	e003      	b.n	80066de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80066d6:	887b      	ldrh	r3, [r7, #2]
 80066d8:	041a      	lsls	r2, r3, #16
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	619a      	str	r2, [r3, #24]
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e12b      	b.n	8006956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fe fd6c 	bl	80051f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2224      	movs	r2, #36	; 0x24
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0201 	bic.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800673e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800674e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006750:	f000 fd0a 	bl	8007168 <HAL_RCC_GetPCLK1Freq>
 8006754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4a81      	ldr	r2, [pc, #516]	; (8006960 <HAL_I2C_Init+0x274>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d807      	bhi.n	8006770 <HAL_I2C_Init+0x84>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4a80      	ldr	r2, [pc, #512]	; (8006964 <HAL_I2C_Init+0x278>)
 8006764:	4293      	cmp	r3, r2
 8006766:	bf94      	ite	ls
 8006768:	2301      	movls	r3, #1
 800676a:	2300      	movhi	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e006      	b.n	800677e <HAL_I2C_Init+0x92>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4a7d      	ldr	r2, [pc, #500]	; (8006968 <HAL_I2C_Init+0x27c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	bf94      	ite	ls
 8006778:	2301      	movls	r3, #1
 800677a:	2300      	movhi	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e0e7      	b.n	8006956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a78      	ldr	r2, [pc, #480]	; (800696c <HAL_I2C_Init+0x280>)
 800678a:	fba2 2303 	umull	r2, r3, r2, r3
 800678e:	0c9b      	lsrs	r3, r3, #18
 8006790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a6a      	ldr	r2, [pc, #424]	; (8006960 <HAL_I2C_Init+0x274>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d802      	bhi.n	80067c0 <HAL_I2C_Init+0xd4>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	3301      	adds	r3, #1
 80067be:	e009      	b.n	80067d4 <HAL_I2C_Init+0xe8>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	4a69      	ldr	r2, [pc, #420]	; (8006970 <HAL_I2C_Init+0x284>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	099b      	lsrs	r3, r3, #6
 80067d2:	3301      	adds	r3, #1
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6812      	ldr	r2, [r2, #0]
 80067d8:	430b      	orrs	r3, r1
 80067da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	495c      	ldr	r1, [pc, #368]	; (8006960 <HAL_I2C_Init+0x274>)
 80067f0:	428b      	cmp	r3, r1
 80067f2:	d819      	bhi.n	8006828 <HAL_I2C_Init+0x13c>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1e59      	subs	r1, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006808:	400b      	ands	r3, r1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_I2C_Init+0x138>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	1e59      	subs	r1, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fbb1 f3f3 	udiv	r3, r1, r3
 800681c:	3301      	adds	r3, #1
 800681e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006822:	e051      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 8006824:	2304      	movs	r3, #4
 8006826:	e04f      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d111      	bne.n	8006854 <HAL_I2C_Init+0x168>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	1e58      	subs	r0, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	440b      	add	r3, r1
 800683e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006842:	3301      	adds	r3, #1
 8006844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006848:	2b00      	cmp	r3, #0
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e012      	b.n	800687a <HAL_I2C_Init+0x18e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	1e58      	subs	r0, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6859      	ldr	r1, [r3, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	0099      	lsls	r1, r3, #2
 8006864:	440b      	add	r3, r1
 8006866:	fbb0 f3f3 	udiv	r3, r0, r3
 800686a:	3301      	adds	r3, #1
 800686c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006870:	2b00      	cmp	r3, #0
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_I2C_Init+0x196>
 800687e:	2301      	movs	r3, #1
 8006880:	e022      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10e      	bne.n	80068a8 <HAL_I2C_Init+0x1bc>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1e58      	subs	r0, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6859      	ldr	r1, [r3, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	440b      	add	r3, r1
 8006898:	fbb0 f3f3 	udiv	r3, r0, r3
 800689c:	3301      	adds	r3, #1
 800689e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	e00f      	b.n	80068c8 <HAL_I2C_Init+0x1dc>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	1e58      	subs	r0, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6859      	ldr	r1, [r3, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	0099      	lsls	r1, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80068be:	3301      	adds	r3, #1
 80068c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	6809      	ldr	r1, [r1, #0]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69da      	ldr	r2, [r3, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6911      	ldr	r1, [r2, #16]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	68d2      	ldr	r2, [r2, #12]
 8006902:	4311      	orrs	r1, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	430b      	orrs	r3, r1
 800690a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	000186a0 	.word	0x000186a0
 8006964:	001e847f 	.word	0x001e847f
 8006968:	003d08ff 	.word	0x003d08ff
 800696c:	431bde83 	.word	0x431bde83
 8006970:	10624dd3 	.word	0x10624dd3

08006974 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	461a      	mov	r2, r3
 8006980:	460b      	mov	r3, r1
 8006982:	817b      	strh	r3, [r7, #10]
 8006984:	4613      	mov	r3, r2
 8006986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006988:	f7fe fff8 	bl	800597c <HAL_GetTick>
 800698c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b20      	cmp	r3, #32
 8006998:	f040 80e0 	bne.w	8006b5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	2319      	movs	r3, #25
 80069a2:	2201      	movs	r2, #1
 80069a4:	4970      	ldr	r1, [pc, #448]	; (8006b68 <HAL_I2C_Master_Transmit+0x1f4>)
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f964 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
 80069b4:	e0d3      	b.n	8006b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_I2C_Master_Transmit+0x50>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e0cc      	b.n	8006b5e <HAL_I2C_Master_Transmit+0x1ea>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d007      	beq.n	80069ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 0201 	orr.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2221      	movs	r2, #33	; 0x21
 80069fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2210      	movs	r2, #16
 8006a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	893a      	ldrh	r2, [r7, #8]
 8006a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a50      	ldr	r2, [pc, #320]	; (8006b6c <HAL_I2C_Master_Transmit+0x1f8>)
 8006a2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a2c:	8979      	ldrh	r1, [r7, #10]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	6a3a      	ldr	r2, [r7, #32]
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f89c 	bl	8006b70 <I2C_MasterRequestWrite>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e08d      	b.n	8006b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a42:	2300      	movs	r3, #0
 8006a44:	613b      	str	r3, [r7, #16]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006a58:	e066      	b.n	8006b28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	6a39      	ldr	r1, [r7, #32]
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 f9de 	bl	8006e20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00d      	beq.n	8006a86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d107      	bne.n	8006a82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e06b      	b.n	8006b5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	781a      	ldrb	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d11b      	bne.n	8006afc <HAL_I2C_Master_Transmit+0x188>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d017      	beq.n	8006afc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	781a      	ldrb	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	6a39      	ldr	r1, [r7, #32]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f9ce 	bl	8006ea2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00d      	beq.n	8006b28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d107      	bne.n	8006b24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e01a      	b.n	8006b5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d194      	bne.n	8006a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e000      	b.n	8006b5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b5c:	2302      	movs	r3, #2
  }
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	00100002 	.word	0x00100002
 8006b6c:	ffff0000 	.word	0xffff0000

08006b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d006      	beq.n	8006b9a <I2C_MasterRequestWrite+0x2a>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d003      	beq.n	8006b9a <I2C_MasterRequestWrite+0x2a>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b98:	d108      	bne.n	8006bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e00b      	b.n	8006bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	2b12      	cmp	r3, #18
 8006bb2:	d107      	bne.n	8006bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f84f 	bl	8006c74 <I2C_WaitOnFlagUntilTimeout>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bea:	d103      	bne.n	8006bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e035      	b.n	8006c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c00:	d108      	bne.n	8006c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c02:	897b      	ldrh	r3, [r7, #10]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c10:	611a      	str	r2, [r3, #16]
 8006c12:	e01b      	b.n	8006c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c14:	897b      	ldrh	r3, [r7, #10]
 8006c16:	11db      	asrs	r3, r3, #7
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f003 0306 	and.w	r3, r3, #6
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f063 030f 	orn	r3, r3, #15
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	490e      	ldr	r1, [pc, #56]	; (8006c6c <I2C_MasterRequestWrite+0xfc>)
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 f875 	bl	8006d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e010      	b.n	8006c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c42:	897b      	ldrh	r3, [r7, #10]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	4907      	ldr	r1, [pc, #28]	; (8006c70 <I2C_MasterRequestWrite+0x100>)
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f865 	bl	8006d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	00010008 	.word	0x00010008
 8006c70:	00010002 	.word	0x00010002

08006c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c84:	e025      	b.n	8006cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d021      	beq.n	8006cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8e:	f7fe fe75 	bl	800597c <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d116      	bne.n	8006cd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f043 0220 	orr.w	r2, r3, #32
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e023      	b.n	8006d1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	0c1b      	lsrs	r3, r3, #16
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d10d      	bne.n	8006cf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	43da      	mvns	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf0c      	ite	eq
 8006cee:	2301      	moveq	r3, #1
 8006cf0:	2300      	movne	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	e00c      	b.n	8006d12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bf0c      	ite	eq
 8006d0a:	2301      	moveq	r3, #1
 8006d0c:	2300      	movne	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	461a      	mov	r2, r3
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d0b6      	beq.n	8006c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	60f8      	str	r0, [r7, #12]
 8006d2a:	60b9      	str	r1, [r7, #8]
 8006d2c:	607a      	str	r2, [r7, #4]
 8006d2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d30:	e051      	b.n	8006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d40:	d123      	bne.n	8006d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f043 0204 	orr.w	r2, r3, #4
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e046      	b.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d021      	beq.n	8006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d92:	f7fe fdf3 	bl	800597c <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d302      	bcc.n	8006da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d116      	bne.n	8006dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e020      	b.n	8006e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	0c1b      	lsrs	r3, r3, #16
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d10c      	bne.n	8006dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	43da      	mvns	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4013      	ands	r3, r2
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	bf14      	ite	ne
 8006df2:	2301      	movne	r3, #1
 8006df4:	2300      	moveq	r3, #0
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	e00b      	b.n	8006e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	43da      	mvns	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4013      	ands	r3, r2
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	bf14      	ite	ne
 8006e0c:	2301      	movne	r3, #1
 8006e0e:	2300      	moveq	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d18d      	bne.n	8006d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e2c:	e02d      	b.n	8006e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f878 	bl	8006f24 <I2C_IsAcknowledgeFailed>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e02d      	b.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e44:	d021      	beq.n	8006e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e46:	f7fe fd99 	bl	800597c <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d302      	bcc.n	8006e5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d116      	bne.n	8006e8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f043 0220 	orr.w	r2, r3, #32
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e007      	b.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695b      	ldr	r3, [r3, #20]
 8006e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e94:	2b80      	cmp	r3, #128	; 0x80
 8006e96:	d1ca      	bne.n	8006e2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006eae:	e02d      	b.n	8006f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f837 	bl	8006f24 <I2C_IsAcknowledgeFailed>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e02d      	b.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d021      	beq.n	8006f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec8:	f7fe fd58 	bl	800597c <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d302      	bcc.n	8006ede <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d116      	bne.n	8006f0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	f043 0220 	orr.w	r2, r3, #32
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e007      	b.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d1ca      	bne.n	8006eb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3a:	d11b      	bne.n	8006f74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f043 0204 	orr.w	r2, r3, #4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e000      	b.n	8006f76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e0cc      	b.n	8007132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f98:	4b68      	ldr	r3, [pc, #416]	; (800713c <HAL_RCC_ClockConfig+0x1b8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	683a      	ldr	r2, [r7, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d90c      	bls.n	8006fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa6:	4b65      	ldr	r3, [pc, #404]	; (800713c <HAL_RCC_ClockConfig+0x1b8>)
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fae:	4b63      	ldr	r3, [pc, #396]	; (800713c <HAL_RCC_ClockConfig+0x1b8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d001      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e0b8      	b.n	8007132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d020      	beq.n	800700e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fd8:	4b59      	ldr	r3, [pc, #356]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	4a58      	ldr	r2, [pc, #352]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0308 	and.w	r3, r3, #8
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ff0:	4b53      	ldr	r3, [pc, #332]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4a52      	ldr	r2, [pc, #328]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ffc:	4b50      	ldr	r3, [pc, #320]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	494d      	ldr	r1, [pc, #308]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	4313      	orrs	r3, r2
 800700c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d044      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d107      	bne.n	8007032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007022:	4b47      	ldr	r3, [pc, #284]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d119      	bne.n	8007062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e07f      	b.n	8007132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b02      	cmp	r3, #2
 8007038:	d003      	beq.n	8007042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800703e:	2b03      	cmp	r3, #3
 8007040:	d107      	bne.n	8007052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007042:	4b3f      	ldr	r3, [pc, #252]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e06f      	b.n	8007132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007052:	4b3b      	ldr	r3, [pc, #236]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e067      	b.n	8007132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007062:	4b37      	ldr	r3, [pc, #220]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f023 0203 	bic.w	r2, r3, #3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	4934      	ldr	r1, [pc, #208]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	4313      	orrs	r3, r2
 8007072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007074:	f7fe fc82 	bl	800597c <HAL_GetTick>
 8007078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707a:	e00a      	b.n	8007092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800707c:	f7fe fc7e 	bl	800597c <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f241 3288 	movw	r2, #5000	; 0x1388
 800708a:	4293      	cmp	r3, r2
 800708c:	d901      	bls.n	8007092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e04f      	b.n	8007132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007092:	4b2b      	ldr	r3, [pc, #172]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 020c 	and.w	r2, r3, #12
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d1eb      	bne.n	800707c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <HAL_RCC_ClockConfig+0x1b8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d20c      	bcs.n	80070cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b22      	ldr	r3, [pc, #136]	; (800713c <HAL_RCC_ClockConfig+0x1b8>)
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ba:	4b20      	ldr	r3, [pc, #128]	; (800713c <HAL_RCC_ClockConfig+0x1b8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d001      	beq.n	80070cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e032      	b.n	8007132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d8:	4b19      	ldr	r3, [pc, #100]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	4916      	ldr	r1, [pc, #88]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0308 	and.w	r3, r3, #8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070f6:	4b12      	ldr	r3, [pc, #72]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	490e      	ldr	r1, [pc, #56]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	4313      	orrs	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800710a:	f000 f855 	bl	80071b8 <HAL_RCC_GetSysClockFreq>
 800710e:	4602      	mov	r2, r0
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	091b      	lsrs	r3, r3, #4
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	490a      	ldr	r1, [pc, #40]	; (8007144 <HAL_RCC_ClockConfig+0x1c0>)
 800711c:	5ccb      	ldrb	r3, [r1, r3]
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <HAL_RCC_ClockConfig+0x1c4>)
 8007124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <HAL_RCC_ClockConfig+0x1c8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fbe2 	bl	80058f4 <HAL_InitTick>

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	40023c00 	.word	0x40023c00
 8007140:	40023800 	.word	0x40023800
 8007144:	0800dbe8 	.word	0x0800dbe8
 8007148:	20000018 	.word	0x20000018
 800714c:	2000001c 	.word	0x2000001c

08007150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007154:	4b03      	ldr	r3, [pc, #12]	; (8007164 <HAL_RCC_GetHCLKFreq+0x14>)
 8007156:	681b      	ldr	r3, [r3, #0]
}
 8007158:	4618      	mov	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20000018 	.word	0x20000018

08007168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800716c:	f7ff fff0 	bl	8007150 <HAL_RCC_GetHCLKFreq>
 8007170:	4602      	mov	r2, r0
 8007172:	4b05      	ldr	r3, [pc, #20]	; (8007188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	0a9b      	lsrs	r3, r3, #10
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	4903      	ldr	r1, [pc, #12]	; (800718c <HAL_RCC_GetPCLK1Freq+0x24>)
 800717e:	5ccb      	ldrb	r3, [r1, r3]
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40023800 	.word	0x40023800
 800718c:	0800dbf8 	.word	0x0800dbf8

08007190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007194:	f7ff ffdc 	bl	8007150 <HAL_RCC_GetHCLKFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	0b5b      	lsrs	r3, r3, #13
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	4903      	ldr	r1, [pc, #12]	; (80071b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	40023800 	.word	0x40023800
 80071b4:	0800dbf8 	.word	0x0800dbf8

080071b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071bc:	b0ae      	sub	sp, #184	; 0xb8
 80071be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071de:	4bcb      	ldr	r3, [pc, #812]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 030c 	and.w	r3, r3, #12
 80071e6:	2b0c      	cmp	r3, #12
 80071e8:	f200 8206 	bhi.w	80075f8 <HAL_RCC_GetSysClockFreq+0x440>
 80071ec:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007229 	.word	0x08007229
 80071f8:	080075f9 	.word	0x080075f9
 80071fc:	080075f9 	.word	0x080075f9
 8007200:	080075f9 	.word	0x080075f9
 8007204:	08007231 	.word	0x08007231
 8007208:	080075f9 	.word	0x080075f9
 800720c:	080075f9 	.word	0x080075f9
 8007210:	080075f9 	.word	0x080075f9
 8007214:	08007239 	.word	0x08007239
 8007218:	080075f9 	.word	0x080075f9
 800721c:	080075f9 	.word	0x080075f9
 8007220:	080075f9 	.word	0x080075f9
 8007224:	08007429 	.word	0x08007429
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007228:	4bb9      	ldr	r3, [pc, #740]	; (8007510 <HAL_RCC_GetSysClockFreq+0x358>)
 800722a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800722e:	e1e7      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007230:	4bb8      	ldr	r3, [pc, #736]	; (8007514 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007236:	e1e3      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007238:	4bb4      	ldr	r3, [pc, #720]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007244:	4bb1      	ldr	r3, [pc, #708]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d071      	beq.n	8007334 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007250:	4bae      	ldr	r3, [pc, #696]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	099b      	lsrs	r3, r3, #6
 8007256:	2200      	movs	r2, #0
 8007258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800725c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800726c:	2300      	movs	r3, #0
 800726e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007276:	4622      	mov	r2, r4
 8007278:	462b      	mov	r3, r5
 800727a:	f04f 0000 	mov.w	r0, #0
 800727e:	f04f 0100 	mov.w	r1, #0
 8007282:	0159      	lsls	r1, r3, #5
 8007284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007288:	0150      	lsls	r0, r2, #5
 800728a:	4602      	mov	r2, r0
 800728c:	460b      	mov	r3, r1
 800728e:	4621      	mov	r1, r4
 8007290:	1a51      	subs	r1, r2, r1
 8007292:	6439      	str	r1, [r7, #64]	; 0x40
 8007294:	4629      	mov	r1, r5
 8007296:	eb63 0301 	sbc.w	r3, r3, r1
 800729a:	647b      	str	r3, [r7, #68]	; 0x44
 800729c:	f04f 0200 	mov.w	r2, #0
 80072a0:	f04f 0300 	mov.w	r3, #0
 80072a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80072a8:	4649      	mov	r1, r9
 80072aa:	018b      	lsls	r3, r1, #6
 80072ac:	4641      	mov	r1, r8
 80072ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80072b2:	4641      	mov	r1, r8
 80072b4:	018a      	lsls	r2, r1, #6
 80072b6:	4641      	mov	r1, r8
 80072b8:	1a51      	subs	r1, r2, r1
 80072ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80072bc:	4649      	mov	r1, r9
 80072be:	eb63 0301 	sbc.w	r3, r3, r1
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80072d0:	4649      	mov	r1, r9
 80072d2:	00cb      	lsls	r3, r1, #3
 80072d4:	4641      	mov	r1, r8
 80072d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072da:	4641      	mov	r1, r8
 80072dc:	00ca      	lsls	r2, r1, #3
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	4622      	mov	r2, r4
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30
 80072ea:	462b      	mov	r3, r5
 80072ec:	460a      	mov	r2, r1
 80072ee:	eb42 0303 	adc.w	r3, r2, r3
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007300:	4629      	mov	r1, r5
 8007302:	024b      	lsls	r3, r1, #9
 8007304:	4621      	mov	r1, r4
 8007306:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800730a:	4621      	mov	r1, r4
 800730c:	024a      	lsls	r2, r1, #9
 800730e:	4610      	mov	r0, r2
 8007310:	4619      	mov	r1, r3
 8007312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800731c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007320:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007324:	f7f9 fcd0 	bl	8000cc8 <__aeabi_uldivmod>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4613      	mov	r3, r2
 800732e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007332:	e067      	b.n	8007404 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007334:	4b75      	ldr	r3, [pc, #468]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	099b      	lsrs	r3, r3, #6
 800733a:	2200      	movs	r2, #0
 800733c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007340:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007344:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734c:	67bb      	str	r3, [r7, #120]	; 0x78
 800734e:	2300      	movs	r3, #0
 8007350:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007352:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007356:	4622      	mov	r2, r4
 8007358:	462b      	mov	r3, r5
 800735a:	f04f 0000 	mov.w	r0, #0
 800735e:	f04f 0100 	mov.w	r1, #0
 8007362:	0159      	lsls	r1, r3, #5
 8007364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007368:	0150      	lsls	r0, r2, #5
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4621      	mov	r1, r4
 8007370:	1a51      	subs	r1, r2, r1
 8007372:	62b9      	str	r1, [r7, #40]	; 0x28
 8007374:	4629      	mov	r1, r5
 8007376:	eb63 0301 	sbc.w	r3, r3, r1
 800737a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007388:	4649      	mov	r1, r9
 800738a:	018b      	lsls	r3, r1, #6
 800738c:	4641      	mov	r1, r8
 800738e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007392:	4641      	mov	r1, r8
 8007394:	018a      	lsls	r2, r1, #6
 8007396:	4641      	mov	r1, r8
 8007398:	ebb2 0a01 	subs.w	sl, r2, r1
 800739c:	4649      	mov	r1, r9
 800739e:	eb63 0b01 	sbc.w	fp, r3, r1
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073b6:	4692      	mov	sl, r2
 80073b8:	469b      	mov	fp, r3
 80073ba:	4623      	mov	r3, r4
 80073bc:	eb1a 0303 	adds.w	r3, sl, r3
 80073c0:	623b      	str	r3, [r7, #32]
 80073c2:	462b      	mov	r3, r5
 80073c4:	eb4b 0303 	adc.w	r3, fp, r3
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	f04f 0300 	mov.w	r3, #0
 80073d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80073d6:	4629      	mov	r1, r5
 80073d8:	028b      	lsls	r3, r1, #10
 80073da:	4621      	mov	r1, r4
 80073dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073e0:	4621      	mov	r1, r4
 80073e2:	028a      	lsls	r2, r1, #10
 80073e4:	4610      	mov	r0, r2
 80073e6:	4619      	mov	r1, r3
 80073e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ec:	2200      	movs	r2, #0
 80073ee:	673b      	str	r3, [r7, #112]	; 0x70
 80073f0:	677a      	str	r2, [r7, #116]	; 0x74
 80073f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80073f6:	f7f9 fc67 	bl	8000cc8 <__aeabi_uldivmod>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4613      	mov	r3, r2
 8007400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007404:	4b41      	ldr	r3, [pc, #260]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	3301      	adds	r3, #1
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800741a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800741e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007426:	e0eb      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007428:	4b38      	ldr	r3, [pc, #224]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007434:	4b35      	ldr	r3, [pc, #212]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d06b      	beq.n	8007518 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007440:	4b32      	ldr	r3, [pc, #200]	; (800750c <HAL_RCC_GetSysClockFreq+0x354>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	099b      	lsrs	r3, r3, #6
 8007446:	2200      	movs	r2, #0
 8007448:	66bb      	str	r3, [r7, #104]	; 0x68
 800744a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800744c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	663b      	str	r3, [r7, #96]	; 0x60
 8007454:	2300      	movs	r3, #0
 8007456:	667b      	str	r3, [r7, #100]	; 0x64
 8007458:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800745c:	4622      	mov	r2, r4
 800745e:	462b      	mov	r3, r5
 8007460:	f04f 0000 	mov.w	r0, #0
 8007464:	f04f 0100 	mov.w	r1, #0
 8007468:	0159      	lsls	r1, r3, #5
 800746a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800746e:	0150      	lsls	r0, r2, #5
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4621      	mov	r1, r4
 8007476:	1a51      	subs	r1, r2, r1
 8007478:	61b9      	str	r1, [r7, #24]
 800747a:	4629      	mov	r1, r5
 800747c:	eb63 0301 	sbc.w	r3, r3, r1
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800748e:	4659      	mov	r1, fp
 8007490:	018b      	lsls	r3, r1, #6
 8007492:	4651      	mov	r1, sl
 8007494:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007498:	4651      	mov	r1, sl
 800749a:	018a      	lsls	r2, r1, #6
 800749c:	4651      	mov	r1, sl
 800749e:	ebb2 0801 	subs.w	r8, r2, r1
 80074a2:	4659      	mov	r1, fp
 80074a4:	eb63 0901 	sbc.w	r9, r3, r1
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074bc:	4690      	mov	r8, r2
 80074be:	4699      	mov	r9, r3
 80074c0:	4623      	mov	r3, r4
 80074c2:	eb18 0303 	adds.w	r3, r8, r3
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	462b      	mov	r3, r5
 80074ca:	eb49 0303 	adc.w	r3, r9, r3
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80074dc:	4629      	mov	r1, r5
 80074de:	024b      	lsls	r3, r1, #9
 80074e0:	4621      	mov	r1, r4
 80074e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80074e6:	4621      	mov	r1, r4
 80074e8:	024a      	lsls	r2, r1, #9
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074f2:	2200      	movs	r2, #0
 80074f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80074f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80074f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074fc:	f7f9 fbe4 	bl	8000cc8 <__aeabi_uldivmod>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4613      	mov	r3, r2
 8007506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800750a:	e065      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x420>
 800750c:	40023800 	.word	0x40023800
 8007510:	00f42400 	.word	0x00f42400
 8007514:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007518:	4b3d      	ldr	r3, [pc, #244]	; (8007610 <HAL_RCC_GetSysClockFreq+0x458>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	099b      	lsrs	r3, r3, #6
 800751e:	2200      	movs	r2, #0
 8007520:	4618      	mov	r0, r3
 8007522:	4611      	mov	r1, r2
 8007524:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007528:	653b      	str	r3, [r7, #80]	; 0x50
 800752a:	2300      	movs	r3, #0
 800752c:	657b      	str	r3, [r7, #84]	; 0x54
 800752e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007532:	4642      	mov	r2, r8
 8007534:	464b      	mov	r3, r9
 8007536:	f04f 0000 	mov.w	r0, #0
 800753a:	f04f 0100 	mov.w	r1, #0
 800753e:	0159      	lsls	r1, r3, #5
 8007540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007544:	0150      	lsls	r0, r2, #5
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4641      	mov	r1, r8
 800754c:	1a51      	subs	r1, r2, r1
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	4649      	mov	r1, r9
 8007552:	eb63 0301 	sbc.w	r3, r3, r1
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007564:	4659      	mov	r1, fp
 8007566:	018b      	lsls	r3, r1, #6
 8007568:	4651      	mov	r1, sl
 800756a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800756e:	4651      	mov	r1, sl
 8007570:	018a      	lsls	r2, r1, #6
 8007572:	4651      	mov	r1, sl
 8007574:	1a54      	subs	r4, r2, r1
 8007576:	4659      	mov	r1, fp
 8007578:	eb63 0501 	sbc.w	r5, r3, r1
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	00eb      	lsls	r3, r5, #3
 8007586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800758a:	00e2      	lsls	r2, r4, #3
 800758c:	4614      	mov	r4, r2
 800758e:	461d      	mov	r5, r3
 8007590:	4643      	mov	r3, r8
 8007592:	18e3      	adds	r3, r4, r3
 8007594:	603b      	str	r3, [r7, #0]
 8007596:	464b      	mov	r3, r9
 8007598:	eb45 0303 	adc.w	r3, r5, r3
 800759c:	607b      	str	r3, [r7, #4]
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075aa:	4629      	mov	r1, r5
 80075ac:	028b      	lsls	r3, r1, #10
 80075ae:	4621      	mov	r1, r4
 80075b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075b4:	4621      	mov	r1, r4
 80075b6:	028a      	lsls	r2, r1, #10
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075c0:	2200      	movs	r2, #0
 80075c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80075c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075ca:	f7f9 fb7d 	bl	8000cc8 <__aeabi_uldivmod>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4613      	mov	r3, r2
 80075d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <HAL_RCC_GetSysClockFreq+0x458>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	0f1b      	lsrs	r3, r3, #28
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80075e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80075ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80075f6:	e003      	b.n	8007600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <HAL_RCC_GetSysClockFreq+0x45c>)
 80075fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80075fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007604:	4618      	mov	r0, r3
 8007606:	37b8      	adds	r7, #184	; 0xb8
 8007608:	46bd      	mov	sp, r7
 800760a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800760e:	bf00      	nop
 8007610:	40023800 	.word	0x40023800
 8007614:	00f42400 	.word	0x00f42400

08007618 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e28d      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 8083 	beq.w	800773e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007638:	4b94      	ldr	r3, [pc, #592]	; (800788c <HAL_RCC_OscConfig+0x274>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 030c 	and.w	r3, r3, #12
 8007640:	2b04      	cmp	r3, #4
 8007642:	d019      	beq.n	8007678 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007644:	4b91      	ldr	r3, [pc, #580]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800764c:	2b08      	cmp	r3, #8
 800764e:	d106      	bne.n	800765e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007650:	4b8e      	ldr	r3, [pc, #568]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800765c:	d00c      	beq.n	8007678 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800765e:	4b8b      	ldr	r3, [pc, #556]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007666:	2b0c      	cmp	r3, #12
 8007668:	d112      	bne.n	8007690 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800766a:	4b88      	ldr	r3, [pc, #544]	; (800788c <HAL_RCC_OscConfig+0x274>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007676:	d10b      	bne.n	8007690 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007678:	4b84      	ldr	r3, [pc, #528]	; (800788c <HAL_RCC_OscConfig+0x274>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d05b      	beq.n	800773c <HAL_RCC_OscConfig+0x124>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d157      	bne.n	800773c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e25a      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007698:	d106      	bne.n	80076a8 <HAL_RCC_OscConfig+0x90>
 800769a:	4b7c      	ldr	r3, [pc, #496]	; (800788c <HAL_RCC_OscConfig+0x274>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a7b      	ldr	r2, [pc, #492]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	e01d      	b.n	80076e4 <HAL_RCC_OscConfig+0xcc>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076b0:	d10c      	bne.n	80076cc <HAL_RCC_OscConfig+0xb4>
 80076b2:	4b76      	ldr	r3, [pc, #472]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a75      	ldr	r2, [pc, #468]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	4b73      	ldr	r3, [pc, #460]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a72      	ldr	r2, [pc, #456]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	e00b      	b.n	80076e4 <HAL_RCC_OscConfig+0xcc>
 80076cc:	4b6f      	ldr	r3, [pc, #444]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a6e      	ldr	r2, [pc, #440]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	4b6c      	ldr	r3, [pc, #432]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a6b      	ldr	r2, [pc, #428]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80076de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d013      	beq.n	8007714 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ec:	f7fe f946 	bl	800597c <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076f2:	e008      	b.n	8007706 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076f4:	f7fe f942 	bl	800597c <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	2b64      	cmp	r3, #100	; 0x64
 8007700:	d901      	bls.n	8007706 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e21f      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007706:	4b61      	ldr	r3, [pc, #388]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f0      	beq.n	80076f4 <HAL_RCC_OscConfig+0xdc>
 8007712:	e014      	b.n	800773e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fe f932 	bl	800597c <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800771c:	f7fe f92e 	bl	800597c <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b64      	cmp	r3, #100	; 0x64
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e20b      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800772e:	4b57      	ldr	r3, [pc, #348]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f0      	bne.n	800771c <HAL_RCC_OscConfig+0x104>
 800773a:	e000      	b.n	800773e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800773c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d06f      	beq.n	800782a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800774a:	4b50      	ldr	r3, [pc, #320]	; (800788c <HAL_RCC_OscConfig+0x274>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f003 030c 	and.w	r3, r3, #12
 8007752:	2b00      	cmp	r3, #0
 8007754:	d017      	beq.n	8007786 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007756:	4b4d      	ldr	r3, [pc, #308]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800775e:	2b08      	cmp	r3, #8
 8007760:	d105      	bne.n	800776e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007762:	4b4a      	ldr	r3, [pc, #296]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00b      	beq.n	8007786 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800776e:	4b47      	ldr	r3, [pc, #284]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007776:	2b0c      	cmp	r3, #12
 8007778:	d11c      	bne.n	80077b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800777a:	4b44      	ldr	r3, [pc, #272]	; (800788c <HAL_RCC_OscConfig+0x274>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d116      	bne.n	80077b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007786:	4b41      	ldr	r3, [pc, #260]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <HAL_RCC_OscConfig+0x186>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d001      	beq.n	800779e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e1d3      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800779e:	4b3b      	ldr	r3, [pc, #236]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4937      	ldr	r1, [pc, #220]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80077ae:	4313      	orrs	r3, r2
 80077b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077b2:	e03a      	b.n	800782a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d020      	beq.n	80077fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077bc:	4b34      	ldr	r3, [pc, #208]	; (8007890 <HAL_RCC_OscConfig+0x278>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c2:	f7fe f8db 	bl	800597c <HAL_GetTick>
 80077c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077ca:	f7fe f8d7 	bl	800597c <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e1b4      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e8:	4b28      	ldr	r3, [pc, #160]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	4925      	ldr	r1, [pc, #148]	; (800788c <HAL_RCC_OscConfig+0x274>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	600b      	str	r3, [r1, #0]
 80077fc:	e015      	b.n	800782a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077fe:	4b24      	ldr	r3, [pc, #144]	; (8007890 <HAL_RCC_OscConfig+0x278>)
 8007800:	2200      	movs	r2, #0
 8007802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007804:	f7fe f8ba 	bl	800597c <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800780a:	e008      	b.n	800781e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800780c:	f7fe f8b6 	bl	800597c <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d901      	bls.n	800781e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e193      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f0      	bne.n	800780c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d036      	beq.n	80078a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d016      	beq.n	800786c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800783e:	4b15      	ldr	r3, [pc, #84]	; (8007894 <HAL_RCC_OscConfig+0x27c>)
 8007840:	2201      	movs	r2, #1
 8007842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007844:	f7fe f89a 	bl	800597c <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800784c:	f7fe f896 	bl	800597c <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e173      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800785e:	4b0b      	ldr	r3, [pc, #44]	; (800788c <HAL_RCC_OscConfig+0x274>)
 8007860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0f0      	beq.n	800784c <HAL_RCC_OscConfig+0x234>
 800786a:	e01b      	b.n	80078a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <HAL_RCC_OscConfig+0x27c>)
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007872:	f7fe f883 	bl	800597c <HAL_GetTick>
 8007876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007878:	e00e      	b.n	8007898 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800787a:	f7fe f87f 	bl	800597c <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d907      	bls.n	8007898 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e15c      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
 800788c:	40023800 	.word	0x40023800
 8007890:	42470000 	.word	0x42470000
 8007894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007898:	4b8a      	ldr	r3, [pc, #552]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 800789a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800789c:	f003 0302 	and.w	r3, r3, #2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1ea      	bne.n	800787a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8097 	beq.w	80079e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078b2:	2300      	movs	r3, #0
 80078b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078b6:	4b83      	ldr	r3, [pc, #524]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10f      	bne.n	80078e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078c2:	2300      	movs	r3, #0
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	4b7f      	ldr	r3, [pc, #508]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	4a7e      	ldr	r2, [pc, #504]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80078cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6413      	str	r3, [r2, #64]	; 0x40
 80078d2:	4b7c      	ldr	r3, [pc, #496]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078de:	2301      	movs	r3, #1
 80078e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e2:	4b79      	ldr	r3, [pc, #484]	; (8007ac8 <HAL_RCC_OscConfig+0x4b0>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d118      	bne.n	8007920 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078ee:	4b76      	ldr	r3, [pc, #472]	; (8007ac8 <HAL_RCC_OscConfig+0x4b0>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a75      	ldr	r2, [pc, #468]	; (8007ac8 <HAL_RCC_OscConfig+0x4b0>)
 80078f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078fa:	f7fe f83f 	bl	800597c <HAL_GetTick>
 80078fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007900:	e008      	b.n	8007914 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007902:	f7fe f83b 	bl	800597c <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e118      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007914:	4b6c      	ldr	r3, [pc, #432]	; (8007ac8 <HAL_RCC_OscConfig+0x4b0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d106      	bne.n	8007936 <HAL_RCC_OscConfig+0x31e>
 8007928:	4b66      	ldr	r3, [pc, #408]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	4a65      	ldr	r2, [pc, #404]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6713      	str	r3, [r2, #112]	; 0x70
 8007934:	e01c      	b.n	8007970 <HAL_RCC_OscConfig+0x358>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b05      	cmp	r3, #5
 800793c:	d10c      	bne.n	8007958 <HAL_RCC_OscConfig+0x340>
 800793e:	4b61      	ldr	r3, [pc, #388]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	4a60      	ldr	r2, [pc, #384]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007944:	f043 0304 	orr.w	r3, r3, #4
 8007948:	6713      	str	r3, [r2, #112]	; 0x70
 800794a:	4b5e      	ldr	r3, [pc, #376]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	4a5d      	ldr	r2, [pc, #372]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007950:	f043 0301 	orr.w	r3, r3, #1
 8007954:	6713      	str	r3, [r2, #112]	; 0x70
 8007956:	e00b      	b.n	8007970 <HAL_RCC_OscConfig+0x358>
 8007958:	4b5a      	ldr	r3, [pc, #360]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795c:	4a59      	ldr	r2, [pc, #356]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	6713      	str	r3, [r2, #112]	; 0x70
 8007964:	4b57      	ldr	r3, [pc, #348]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007968:	4a56      	ldr	r2, [pc, #344]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 800796a:	f023 0304 	bic.w	r3, r3, #4
 800796e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d015      	beq.n	80079a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007978:	f7fe f800 	bl	800597c <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797e:	e00a      	b.n	8007996 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007980:	f7fd fffc 	bl	800597c <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	f241 3288 	movw	r2, #5000	; 0x1388
 800798e:	4293      	cmp	r3, r2
 8007990:	d901      	bls.n	8007996 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e0d7      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007996:	4b4b      	ldr	r3, [pc, #300]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0ee      	beq.n	8007980 <HAL_RCC_OscConfig+0x368>
 80079a2:	e014      	b.n	80079ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a4:	f7fd ffea 	bl	800597c <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079aa:	e00a      	b.n	80079c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ac:	f7fd ffe6 	bl	800597c <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e0c1      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c2:	4b40      	ldr	r3, [pc, #256]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1ee      	bne.n	80079ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d105      	bne.n	80079e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079d4:	4b3b      	ldr	r3, [pc, #236]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	4a3a      	ldr	r2, [pc, #232]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80079da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80ad 	beq.w	8007b44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079ea:	4b36      	ldr	r3, [pc, #216]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 030c 	and.w	r3, r3, #12
 80079f2:	2b08      	cmp	r3, #8
 80079f4:	d060      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d145      	bne.n	8007a8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079fe:	4b33      	ldr	r3, [pc, #204]	; (8007acc <HAL_RCC_OscConfig+0x4b4>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a04:	f7fd ffba 	bl	800597c <HAL_GetTick>
 8007a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a0a:	e008      	b.n	8007a1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a0c:	f7fd ffb6 	bl	800597c <HAL_GetTick>
 8007a10:	4602      	mov	r2, r0
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	1ad3      	subs	r3, r2, r3
 8007a16:	2b02      	cmp	r3, #2
 8007a18:	d901      	bls.n	8007a1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e093      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1e:	4b29      	ldr	r3, [pc, #164]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1f0      	bne.n	8007a0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69da      	ldr	r2, [r3, #28]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	019b      	lsls	r3, r3, #6
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	3b01      	subs	r3, #1
 8007a44:	041b      	lsls	r3, r3, #16
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4c:	061b      	lsls	r3, r3, #24
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a54:	071b      	lsls	r3, r3, #28
 8007a56:	491b      	ldr	r1, [pc, #108]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	; (8007acc <HAL_RCC_OscConfig+0x4b4>)
 8007a5e:	2201      	movs	r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a62:	f7fd ff8b 	bl	800597c <HAL_GetTick>
 8007a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a6a:	f7fd ff87 	bl	800597c <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d901      	bls.n	8007a7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e064      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7c:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d0f0      	beq.n	8007a6a <HAL_RCC_OscConfig+0x452>
 8007a88:	e05c      	b.n	8007b44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a8a:	4b10      	ldr	r3, [pc, #64]	; (8007acc <HAL_RCC_OscConfig+0x4b4>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a90:	f7fd ff74 	bl	800597c <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a98:	f7fd ff70 	bl	800597c <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e04d      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aaa:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <HAL_RCC_OscConfig+0x4ac>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f0      	bne.n	8007a98 <HAL_RCC_OscConfig+0x480>
 8007ab6:	e045      	b.n	8007b44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d107      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e040      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	40007000 	.word	0x40007000
 8007acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ad0:	4b1f      	ldr	r3, [pc, #124]	; (8007b50 <HAL_RCC_OscConfig+0x538>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d030      	beq.n	8007b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d129      	bne.n	8007b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d122      	bne.n	8007b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b00:	4013      	ands	r3, r2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d119      	bne.n	8007b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d10f      	bne.n	8007b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d107      	bne.n	8007b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d001      	beq.n	8007b44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40023800 	.word	0x40023800

08007b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e041      	b.n	8007bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7fd fbd6 	bl	800532c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4610      	mov	r0, r2
 8007b94:	f000 fb38 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
	...

08007bf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d001      	beq.n	8007c0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e046      	b.n	8007c9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a23      	ldr	r2, [pc, #140]	; (8007ca8 <HAL_TIM_Base_Start+0xb4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d022      	beq.n	8007c64 <HAL_TIM_Base_Start+0x70>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c26:	d01d      	beq.n	8007c64 <HAL_TIM_Base_Start+0x70>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1f      	ldr	r2, [pc, #124]	; (8007cac <HAL_TIM_Base_Start+0xb8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d018      	beq.n	8007c64 <HAL_TIM_Base_Start+0x70>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <HAL_TIM_Base_Start+0xbc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d013      	beq.n	8007c64 <HAL_TIM_Base_Start+0x70>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <HAL_TIM_Base_Start+0xc0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00e      	beq.n	8007c64 <HAL_TIM_Base_Start+0x70>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1b      	ldr	r2, [pc, #108]	; (8007cb8 <HAL_TIM_Base_Start+0xc4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d009      	beq.n	8007c64 <HAL_TIM_Base_Start+0x70>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <HAL_TIM_Base_Start+0xc8>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d004      	beq.n	8007c64 <HAL_TIM_Base_Start+0x70>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a18      	ldr	r2, [pc, #96]	; (8007cc0 <HAL_TIM_Base_Start+0xcc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d111      	bne.n	8007c88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b06      	cmp	r3, #6
 8007c74:	d010      	beq.n	8007c98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0201 	orr.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c86:	e007      	b.n	8007c98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40000800 	.word	0x40000800
 8007cb4:	40000c00 	.word	0x40000c00
 8007cb8:	40010400 	.word	0x40010400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40001800 	.word	0x40001800

08007cc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e041      	b.n	8007d5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7fd fb80 	bl	80053f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f000 fa80 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <HAL_TIM_PWM_Start+0x24>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	bf14      	ite	ne
 8007d80:	2301      	movne	r3, #1
 8007d82:	2300      	moveq	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	e022      	b.n	8007dce <HAL_TIM_PWM_Start+0x6a>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d109      	bne.n	8007da2 <HAL_TIM_PWM_Start+0x3e>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	bf14      	ite	ne
 8007d9a:	2301      	movne	r3, #1
 8007d9c:	2300      	moveq	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	e015      	b.n	8007dce <HAL_TIM_PWM_Start+0x6a>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d109      	bne.n	8007dbc <HAL_TIM_PWM_Start+0x58>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	bf14      	ite	ne
 8007db4:	2301      	movne	r3, #1
 8007db6:	2300      	moveq	r3, #0
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	e008      	b.n	8007dce <HAL_TIM_PWM_Start+0x6a>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	bf14      	ite	ne
 8007dc8:	2301      	movne	r3, #1
 8007dca:	2300      	moveq	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e07c      	b.n	8007ed0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <HAL_TIM_PWM_Start+0x82>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007de4:	e013      	b.n	8007e0e <HAL_TIM_PWM_Start+0xaa>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d104      	bne.n	8007df6 <HAL_TIM_PWM_Start+0x92>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007df4:	e00b      	b.n	8007e0e <HAL_TIM_PWM_Start+0xaa>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d104      	bne.n	8007e06 <HAL_TIM_PWM_Start+0xa2>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e04:	e003      	b.n	8007e0e <HAL_TIM_PWM_Start+0xaa>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2201      	movs	r2, #1
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fce0 	bl	80087dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2d      	ldr	r2, [pc, #180]	; (8007ed8 <HAL_TIM_PWM_Start+0x174>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <HAL_TIM_PWM_Start+0xcc>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a2c      	ldr	r2, [pc, #176]	; (8007edc <HAL_TIM_PWM_Start+0x178>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d101      	bne.n	8007e34 <HAL_TIM_PWM_Start+0xd0>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <HAL_TIM_PWM_Start+0xd2>
 8007e34:	2300      	movs	r3, #0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d007      	beq.n	8007e4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a22      	ldr	r2, [pc, #136]	; (8007ed8 <HAL_TIM_PWM_Start+0x174>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d022      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x136>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5c:	d01d      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x136>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a1f      	ldr	r2, [pc, #124]	; (8007ee0 <HAL_TIM_PWM_Start+0x17c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d018      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x136>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_TIM_PWM_Start+0x180>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x136>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <HAL_TIM_PWM_Start+0x184>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00e      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x136>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a16      	ldr	r2, [pc, #88]	; (8007edc <HAL_TIM_PWM_Start+0x178>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d009      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x136>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a18      	ldr	r2, [pc, #96]	; (8007eec <HAL_TIM_PWM_Start+0x188>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIM_PWM_Start+0x136>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <HAL_TIM_PWM_Start+0x18c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d111      	bne.n	8007ebe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b06      	cmp	r3, #6
 8007eaa:	d010      	beq.n	8007ece <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ebc:	e007      	b.n	8007ece <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0201 	orr.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40010400 	.word	0x40010400
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40000c00 	.word	0x40000c00
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	40001800 	.word	0x40001800

08007ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e0ae      	b.n	8008070 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b0c      	cmp	r3, #12
 8007f1e:	f200 809f 	bhi.w	8008060 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f22:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f28:	08007f5d 	.word	0x08007f5d
 8007f2c:	08008061 	.word	0x08008061
 8007f30:	08008061 	.word	0x08008061
 8007f34:	08008061 	.word	0x08008061
 8007f38:	08007f9d 	.word	0x08007f9d
 8007f3c:	08008061 	.word	0x08008061
 8007f40:	08008061 	.word	0x08008061
 8007f44:	08008061 	.word	0x08008061
 8007f48:	08007fdf 	.word	0x08007fdf
 8007f4c:	08008061 	.word	0x08008061
 8007f50:	08008061 	.word	0x08008061
 8007f54:	08008061 	.word	0x08008061
 8007f58:	0800801f 	.word	0x0800801f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f9f0 	bl	8008348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699a      	ldr	r2, [r3, #24]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0208 	orr.w	r2, r2, #8
 8007f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0204 	bic.w	r2, r2, #4
 8007f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6999      	ldr	r1, [r3, #24]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	691a      	ldr	r2, [r3, #16]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	619a      	str	r2, [r3, #24]
      break;
 8007f9a:	e064      	b.n	8008066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fa40 	bl	8008428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6999      	ldr	r1, [r3, #24]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	021a      	lsls	r2, r3, #8
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	619a      	str	r2, [r3, #24]
      break;
 8007fdc:	e043      	b.n	8008066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fa95 	bl	8008514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	69da      	ldr	r2, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0208 	orr.w	r2, r2, #8
 8007ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0204 	bic.w	r2, r2, #4
 8008008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69d9      	ldr	r1, [r3, #28]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	61da      	str	r2, [r3, #28]
      break;
 800801c:	e023      	b.n	8008066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fae9 	bl	80085fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69da      	ldr	r2, [r3, #28]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69d9      	ldr	r1, [r3, #28]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	021a      	lsls	r2, r3, #8
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	61da      	str	r2, [r3, #28]
      break;
 800805e:	e002      	b.n	8008066 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	75fb      	strb	r3, [r7, #23]
      break;
 8008064:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_TIM_ConfigClockSource+0x1c>
 8008090:	2302      	movs	r3, #2
 8008092:	e0b4      	b.n	80081fe <HAL_TIM_ConfigClockSource+0x186>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080cc:	d03e      	beq.n	800814c <HAL_TIM_ConfigClockSource+0xd4>
 80080ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d2:	f200 8087 	bhi.w	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080da:	f000 8086 	beq.w	80081ea <HAL_TIM_ConfigClockSource+0x172>
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e2:	d87f      	bhi.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b70      	cmp	r3, #112	; 0x70
 80080e6:	d01a      	beq.n	800811e <HAL_TIM_ConfigClockSource+0xa6>
 80080e8:	2b70      	cmp	r3, #112	; 0x70
 80080ea:	d87b      	bhi.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 80080ec:	2b60      	cmp	r3, #96	; 0x60
 80080ee:	d050      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x11a>
 80080f0:	2b60      	cmp	r3, #96	; 0x60
 80080f2:	d877      	bhi.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 80080f4:	2b50      	cmp	r3, #80	; 0x50
 80080f6:	d03c      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0xfa>
 80080f8:	2b50      	cmp	r3, #80	; 0x50
 80080fa:	d873      	bhi.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b40      	cmp	r3, #64	; 0x40
 80080fe:	d058      	beq.n	80081b2 <HAL_TIM_ConfigClockSource+0x13a>
 8008100:	2b40      	cmp	r3, #64	; 0x40
 8008102:	d86f      	bhi.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b30      	cmp	r3, #48	; 0x30
 8008106:	d064      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008108:	2b30      	cmp	r3, #48	; 0x30
 800810a:	d86b      	bhi.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 800810c:	2b20      	cmp	r3, #32
 800810e:	d060      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008110:	2b20      	cmp	r3, #32
 8008112:	d867      	bhi.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d05c      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0x15a>
 8008118:	2b10      	cmp	r3, #16
 800811a:	d05a      	beq.n	80081d2 <HAL_TIM_ConfigClockSource+0x15a>
 800811c:	e062      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	6899      	ldr	r1, [r3, #8]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f000 fb35 	bl	800879c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	609a      	str	r2, [r3, #8]
      break;
 800814a:	e04f      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	6899      	ldr	r1, [r3, #8]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	f000 fb1e 	bl	800879c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800816e:	609a      	str	r2, [r3, #8]
      break;
 8008170:	e03c      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	461a      	mov	r2, r3
 8008180:	f000 fa92 	bl	80086a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2150      	movs	r1, #80	; 0x50
 800818a:	4618      	mov	r0, r3
 800818c:	f000 faeb 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 8008190:	e02c      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	6859      	ldr	r1, [r3, #4]
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	461a      	mov	r2, r3
 80081a0:	f000 fab1 	bl	8008706 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2160      	movs	r1, #96	; 0x60
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fadb 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 80081b0:	e01c      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	6859      	ldr	r1, [r3, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	461a      	mov	r2, r3
 80081c0:	f000 fa72 	bl	80086a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2140      	movs	r1, #64	; 0x40
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 facb 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 80081d0:	e00c      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f000 fac2 	bl	8008766 <TIM_ITRx_SetConfig>
      break;
 80081e2:	e003      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
      break;
 80081e8:	e000      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a40      	ldr	r2, [pc, #256]	; (800831c <TIM_Base_SetConfig+0x114>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d013      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008226:	d00f      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a3d      	ldr	r2, [pc, #244]	; (8008320 <TIM_Base_SetConfig+0x118>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d00b      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a3c      	ldr	r2, [pc, #240]	; (8008324 <TIM_Base_SetConfig+0x11c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d007      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a3b      	ldr	r2, [pc, #236]	; (8008328 <TIM_Base_SetConfig+0x120>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a3a      	ldr	r2, [pc, #232]	; (800832c <TIM_Base_SetConfig+0x124>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d108      	bne.n	800825a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800824e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2f      	ldr	r2, [pc, #188]	; (800831c <TIM_Base_SetConfig+0x114>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d02b      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008268:	d027      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2c      	ldr	r2, [pc, #176]	; (8008320 <TIM_Base_SetConfig+0x118>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d023      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2b      	ldr	r2, [pc, #172]	; (8008324 <TIM_Base_SetConfig+0x11c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01f      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a2a      	ldr	r2, [pc, #168]	; (8008328 <TIM_Base_SetConfig+0x120>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d01b      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a29      	ldr	r2, [pc, #164]	; (800832c <TIM_Base_SetConfig+0x124>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d017      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a28      	ldr	r2, [pc, #160]	; (8008330 <TIM_Base_SetConfig+0x128>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d013      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a27      	ldr	r2, [pc, #156]	; (8008334 <TIM_Base_SetConfig+0x12c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00f      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a26      	ldr	r2, [pc, #152]	; (8008338 <TIM_Base_SetConfig+0x130>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00b      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a25      	ldr	r2, [pc, #148]	; (800833c <TIM_Base_SetConfig+0x134>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a24      	ldr	r2, [pc, #144]	; (8008340 <TIM_Base_SetConfig+0x138>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_Base_SetConfig+0xb2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a23      	ldr	r2, [pc, #140]	; (8008344 <TIM_Base_SetConfig+0x13c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d108      	bne.n	80082cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a0a      	ldr	r2, [pc, #40]	; (800831c <TIM_Base_SetConfig+0x114>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_Base_SetConfig+0xf8>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a0c      	ldr	r2, [pc, #48]	; (800832c <TIM_Base_SetConfig+0x124>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d103      	bne.n	8008308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	615a      	str	r2, [r3, #20]
}
 800830e:	bf00      	nop
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800
 8008328:	40000c00 	.word	0x40000c00
 800832c:	40010400 	.word	0x40010400
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800
 800833c:	40001800 	.word	0x40001800
 8008340:	40001c00 	.word	0x40001c00
 8008344:	40002000 	.word	0x40002000

08008348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	f023 0201 	bic.w	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f023 0302 	bic.w	r3, r3, #2
 8008390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a20      	ldr	r2, [pc, #128]	; (8008420 <TIM_OC1_SetConfig+0xd8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_OC1_SetConfig+0x64>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a1f      	ldr	r2, [pc, #124]	; (8008424 <TIM_OC1_SetConfig+0xdc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d10c      	bne.n	80083c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f023 0308 	bic.w	r3, r3, #8
 80083b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f023 0304 	bic.w	r3, r3, #4
 80083c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a15      	ldr	r2, [pc, #84]	; (8008420 <TIM_OC1_SetConfig+0xd8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC1_SetConfig+0x8e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a14      	ldr	r2, [pc, #80]	; (8008424 <TIM_OC1_SetConfig+0xdc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d111      	bne.n	80083fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	621a      	str	r2, [r3, #32]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	40010000 	.word	0x40010000
 8008424:	40010400 	.word	0x40010400

08008428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f023 0210 	bic.w	r2, r3, #16
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800845e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f023 0320 	bic.w	r3, r3, #32
 8008472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a22      	ldr	r2, [pc, #136]	; (800850c <TIM_OC2_SetConfig+0xe4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_OC2_SetConfig+0x68>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a21      	ldr	r2, [pc, #132]	; (8008510 <TIM_OC2_SetConfig+0xe8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d10d      	bne.n	80084ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a17      	ldr	r2, [pc, #92]	; (800850c <TIM_OC2_SetConfig+0xe4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_OC2_SetConfig+0x94>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a16      	ldr	r2, [pc, #88]	; (8008510 <TIM_OC2_SetConfig+0xe8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d113      	bne.n	80084e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	40010000 	.word	0x40010000
 8008510:	40010400 	.word	0x40010400

08008514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800855c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <TIM_OC3_SetConfig+0xe0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d003      	beq.n	800857a <TIM_OC3_SetConfig+0x66>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <TIM_OC3_SetConfig+0xe4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d10d      	bne.n	8008596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a16      	ldr	r2, [pc, #88]	; (80085f4 <TIM_OC3_SetConfig+0xe0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_OC3_SetConfig+0x92>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a15      	ldr	r2, [pc, #84]	; (80085f8 <TIM_OC3_SetConfig+0xe4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d113      	bne.n	80085ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	621a      	str	r2, [r3, #32]
}
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40010400 	.word	0x40010400

080085fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a1b      	ldr	r3, [r3, #32]
 8008616:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800862a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	021b      	lsls	r3, r3, #8
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	031b      	lsls	r3, r3, #12
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a12      	ldr	r2, [pc, #72]	; (80086a0 <TIM_OC4_SetConfig+0xa4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d003      	beq.n	8008664 <TIM_OC4_SetConfig+0x68>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a11      	ldr	r2, [pc, #68]	; (80086a4 <TIM_OC4_SetConfig+0xa8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d109      	bne.n	8008678 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800866a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	019b      	lsls	r3, r3, #6
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40010400 	.word	0x40010400

080086a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f023 0201 	bic.w	r2, r3, #1
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f023 030a 	bic.w	r3, r3, #10
 80086e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008706:	b480      	push	{r7}
 8008708:	b087      	sub	sp, #28
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f023 0210 	bic.w	r2, r3, #16
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	031b      	lsls	r3, r3, #12
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	4313      	orrs	r3, r2
 800873a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008742:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008766:	b480      	push	{r7}
 8008768:	b085      	sub	sp, #20
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	f043 0307 	orr.w	r3, r3, #7
 8008788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	609a      	str	r2, [r3, #8]
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	021a      	lsls	r2, r3, #8
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	431a      	orrs	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	609a      	str	r2, [r3, #8]
}
 80087d0:	bf00      	nop
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f003 031f 	and.w	r3, r3, #31
 80087ee:	2201      	movs	r2, #1
 80087f0:	fa02 f303 	lsl.w	r3, r2, r3
 80087f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	43db      	mvns	r3, r3
 80087fe:	401a      	ands	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a1a      	ldr	r2, [r3, #32]
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f003 031f 	and.w	r3, r3, #31
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	fa01 f303 	lsl.w	r3, r1, r3
 8008814:	431a      	orrs	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	621a      	str	r2, [r3, #32]
}
 800881a:	bf00      	nop
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
	...

08008828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800883c:	2302      	movs	r3, #2
 800883e:	e05a      	b.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008866:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a21      	ldr	r2, [pc, #132]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d022      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800888c:	d01d      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a1d      	ldr	r2, [pc, #116]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d018      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a1b      	ldr	r2, [pc, #108]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d013      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a1a      	ldr	r2, [pc, #104]	; (8008910 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d00e      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a18      	ldr	r2, [pc, #96]	; (8008914 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d009      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a17      	ldr	r2, [pc, #92]	; (8008918 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d004      	beq.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a15      	ldr	r2, [pc, #84]	; (800891c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d10c      	bne.n	80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	40010000 	.word	0x40010000
 8008908:	40000400 	.word	0x40000400
 800890c:	40000800 	.word	0x40000800
 8008910:	40000c00 	.word	0x40000c00
 8008914:	40010400 	.word	0x40010400
 8008918:	40014000 	.word	0x40014000
 800891c:	40001800 	.word	0x40001800

08008920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e03f      	b.n	80089b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7fc fe3e 	bl	80055c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2224      	movs	r2, #36	; 0x24
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008962:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f929 	bl	8008bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008978:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	695a      	ldr	r2, [r3, #20]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008988:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008998:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b08a      	sub	sp, #40	; 0x28
 80089be:	af02      	add	r7, sp, #8
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	603b      	str	r3, [r7, #0]
 80089c6:	4613      	mov	r3, r2
 80089c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d17c      	bne.n	8008ad4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_UART_Transmit+0x2c>
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e075      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_UART_Transmit+0x3e>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e06e      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2221      	movs	r2, #33	; 0x21
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a0e:	f7fc ffb5 	bl	800597c <HAL_GetTick>
 8008a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	88fa      	ldrh	r2, [r7, #6]
 8008a18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	88fa      	ldrh	r2, [r7, #6]
 8008a1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a28:	d108      	bne.n	8008a3c <HAL_UART_Transmit+0x82>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d104      	bne.n	8008a3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	e003      	b.n	8008a44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a4c:	e02a      	b.n	8008aa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2200      	movs	r2, #0
 8008a56:	2180      	movs	r1, #128	; 0x80
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f840 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e036      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	881b      	ldrh	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	3302      	adds	r3, #2
 8008a82:	61bb      	str	r3, [r7, #24]
 8008a84:	e007      	b.n	8008a96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	781a      	ldrb	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	3301      	adds	r3, #1
 8008a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1cf      	bne.n	8008a4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2140      	movs	r1, #64	; 0x40
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 f810 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e006      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e000      	b.n	8008ad6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ad4:	2302      	movs	r3, #2
  }
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b090      	sub	sp, #64	; 0x40
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	603b      	str	r3, [r7, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aee:	e050      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	d04c      	beq.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d007      	beq.n	8008b0e <UART_WaitOnFlagUntilTimeout+0x30>
 8008afe:	f7fc ff3d 	bl	800597c <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d241      	bcs.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	330c      	adds	r3, #12
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	330c      	adds	r3, #12
 8008b2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b2e:	637a      	str	r2, [r7, #52]	; 0x34
 8008b30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e5      	bne.n	8008b0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3314      	adds	r3, #20
 8008b48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	613b      	str	r3, [r7, #16]
   return(result);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f023 0301 	bic.w	r3, r3, #1
 8008b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3314      	adds	r3, #20
 8008b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b62:	623a      	str	r2, [r7, #32]
 8008b64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	69f9      	ldr	r1, [r7, #28]
 8008b68:	6a3a      	ldr	r2, [r7, #32]
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e00f      	b.n	8008bb2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	68ba      	ldr	r2, [r7, #8]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	bf0c      	ite	eq
 8008ba2:	2301      	moveq	r3, #1
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d09f      	beq.n	8008af0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3740      	adds	r7, #64	; 0x40
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc0:	b0c0      	sub	sp, #256	; 0x100
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd8:	68d9      	ldr	r1, [r3, #12]
 8008bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	ea40 0301 	orr.w	r3, r0, r1
 8008be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c14:	f021 010c 	bic.w	r1, r1, #12
 8008c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c22:	430b      	orrs	r3, r1
 8008c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c36:	6999      	ldr	r1, [r3, #24]
 8008c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	ea40 0301 	orr.w	r3, r0, r1
 8008c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	4b8f      	ldr	r3, [pc, #572]	; (8008e88 <UART_SetConfig+0x2cc>)
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d005      	beq.n	8008c5c <UART_SetConfig+0xa0>
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4b8d      	ldr	r3, [pc, #564]	; (8008e8c <UART_SetConfig+0x2d0>)
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d104      	bne.n	8008c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c5c:	f7fe fa98 	bl	8007190 <HAL_RCC_GetPCLK2Freq>
 8008c60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c64:	e003      	b.n	8008c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c66:	f7fe fa7f 	bl	8007168 <HAL_RCC_GetPCLK1Freq>
 8008c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c78:	f040 810c 	bne.w	8008e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c8e:	4622      	mov	r2, r4
 8008c90:	462b      	mov	r3, r5
 8008c92:	1891      	adds	r1, r2, r2
 8008c94:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c96:	415b      	adcs	r3, r3
 8008c98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	eb12 0801 	adds.w	r8, r2, r1
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	eb43 0901 	adc.w	r9, r3, r1
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cbe:	4690      	mov	r8, r2
 8008cc0:	4699      	mov	r9, r3
 8008cc2:	4623      	mov	r3, r4
 8008cc4:	eb18 0303 	adds.w	r3, r8, r3
 8008cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ccc:	462b      	mov	r3, r5
 8008cce:	eb49 0303 	adc.w	r3, r9, r3
 8008cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008cea:	460b      	mov	r3, r1
 8008cec:	18db      	adds	r3, r3, r3
 8008cee:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	eb42 0303 	adc.w	r3, r2, r3
 8008cf6:	657b      	str	r3, [r7, #84]	; 0x54
 8008cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d00:	f7f7 ffe2 	bl	8000cc8 <__aeabi_uldivmod>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4b61      	ldr	r3, [pc, #388]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d0e:	095b      	lsrs	r3, r3, #5
 8008d10:	011c      	lsls	r4, r3, #4
 8008d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008d24:	4642      	mov	r2, r8
 8008d26:	464b      	mov	r3, r9
 8008d28:	1891      	adds	r1, r2, r2
 8008d2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008d2c:	415b      	adcs	r3, r3
 8008d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008d34:	4641      	mov	r1, r8
 8008d36:	eb12 0a01 	adds.w	sl, r2, r1
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d54:	4692      	mov	sl, r2
 8008d56:	469b      	mov	fp, r3
 8008d58:	4643      	mov	r3, r8
 8008d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d62:	464b      	mov	r3, r9
 8008d64:	eb4b 0303 	adc.w	r3, fp, r3
 8008d68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d80:	460b      	mov	r3, r1
 8008d82:	18db      	adds	r3, r3, r3
 8008d84:	643b      	str	r3, [r7, #64]	; 0x40
 8008d86:	4613      	mov	r3, r2
 8008d88:	eb42 0303 	adc.w	r3, r2, r3
 8008d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d96:	f7f7 ff97 	bl	8000cc8 <__aeabi_uldivmod>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4b3b      	ldr	r3, [pc, #236]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008da2:	fba3 2301 	umull	r2, r3, r3, r1
 8008da6:	095b      	lsrs	r3, r3, #5
 8008da8:	2264      	movs	r2, #100	; 0x64
 8008daa:	fb02 f303 	mul.w	r3, r2, r3
 8008dae:	1acb      	subs	r3, r1, r3
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008db6:	4b36      	ldr	r3, [pc, #216]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008db8:	fba3 2302 	umull	r2, r3, r3, r2
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008dc4:	441c      	add	r4, r3
 8008dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008dd8:	4642      	mov	r2, r8
 8008dda:	464b      	mov	r3, r9
 8008ddc:	1891      	adds	r1, r2, r2
 8008dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8008de0:	415b      	adcs	r3, r3
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008de8:	4641      	mov	r1, r8
 8008dea:	1851      	adds	r1, r2, r1
 8008dec:	6339      	str	r1, [r7, #48]	; 0x30
 8008dee:	4649      	mov	r1, r9
 8008df0:	414b      	adcs	r3, r1
 8008df2:	637b      	str	r3, [r7, #52]	; 0x34
 8008df4:	f04f 0200 	mov.w	r2, #0
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008e00:	4659      	mov	r1, fp
 8008e02:	00cb      	lsls	r3, r1, #3
 8008e04:	4651      	mov	r1, sl
 8008e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e0a:	4651      	mov	r1, sl
 8008e0c:	00ca      	lsls	r2, r1, #3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	4603      	mov	r3, r0
 8008e14:	4642      	mov	r2, r8
 8008e16:	189b      	adds	r3, r3, r2
 8008e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e1c:	464b      	mov	r3, r9
 8008e1e:	460a      	mov	r2, r1
 8008e20:	eb42 0303 	adc.w	r3, r2, r3
 8008e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	18db      	adds	r3, r3, r3
 8008e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e42:	4613      	mov	r3, r2
 8008e44:	eb42 0303 	adc.w	r3, r2, r3
 8008e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e52:	f7f7 ff39 	bl	8000cc8 <__aeabi_uldivmod>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e60:	095b      	lsrs	r3, r3, #5
 8008e62:	2164      	movs	r1, #100	; 0x64
 8008e64:	fb01 f303 	mul.w	r3, r1, r3
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	3332      	adds	r3, #50	; 0x32
 8008e6e:	4a08      	ldr	r2, [pc, #32]	; (8008e90 <UART_SetConfig+0x2d4>)
 8008e70:	fba2 2303 	umull	r2, r3, r2, r3
 8008e74:	095b      	lsrs	r3, r3, #5
 8008e76:	f003 0207 	and.w	r2, r3, #7
 8008e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4422      	add	r2, r4
 8008e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e84:	e105      	b.n	8009092 <UART_SetConfig+0x4d6>
 8008e86:	bf00      	nop
 8008e88:	40011000 	.word	0x40011000
 8008e8c:	40011400 	.word	0x40011400
 8008e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	464b      	mov	r3, r9
 8008eaa:	1891      	adds	r1, r2, r2
 8008eac:	6239      	str	r1, [r7, #32]
 8008eae:	415b      	adcs	r3, r3
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eb6:	4641      	mov	r1, r8
 8008eb8:	1854      	adds	r4, r2, r1
 8008eba:	4649      	mov	r1, r9
 8008ebc:	eb43 0501 	adc.w	r5, r3, r1
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	f04f 0300 	mov.w	r3, #0
 8008ec8:	00eb      	lsls	r3, r5, #3
 8008eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ece:	00e2      	lsls	r2, r4, #3
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	461d      	mov	r5, r3
 8008ed4:	4643      	mov	r3, r8
 8008ed6:	18e3      	adds	r3, r4, r3
 8008ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008edc:	464b      	mov	r3, r9
 8008ede:	eb45 0303 	adc.w	r3, r5, r3
 8008ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ef2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ef6:	f04f 0200 	mov.w	r2, #0
 8008efa:	f04f 0300 	mov.w	r3, #0
 8008efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008f02:	4629      	mov	r1, r5
 8008f04:	008b      	lsls	r3, r1, #2
 8008f06:	4621      	mov	r1, r4
 8008f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f0c:	4621      	mov	r1, r4
 8008f0e:	008a      	lsls	r2, r1, #2
 8008f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008f14:	f7f7 fed8 	bl	8000cc8 <__aeabi_uldivmod>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4b60      	ldr	r3, [pc, #384]	; (80090a0 <UART_SetConfig+0x4e4>)
 8008f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	011c      	lsls	r4, r3, #4
 8008f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008f38:	4642      	mov	r2, r8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	61b9      	str	r1, [r7, #24]
 8008f40:	415b      	adcs	r3, r3
 8008f42:	61fb      	str	r3, [r7, #28]
 8008f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f48:	4641      	mov	r1, r8
 8008f4a:	1851      	adds	r1, r2, r1
 8008f4c:	6139      	str	r1, [r7, #16]
 8008f4e:	4649      	mov	r1, r9
 8008f50:	414b      	adcs	r3, r1
 8008f52:	617b      	str	r3, [r7, #20]
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f60:	4659      	mov	r1, fp
 8008f62:	00cb      	lsls	r3, r1, #3
 8008f64:	4651      	mov	r1, sl
 8008f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f6a:	4651      	mov	r1, sl
 8008f6c:	00ca      	lsls	r2, r1, #3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	4642      	mov	r2, r8
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f7c:	464b      	mov	r3, r9
 8008f7e:	460a      	mov	r2, r1
 8008f80:	eb42 0303 	adc.w	r3, r2, r3
 8008f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f94:	f04f 0200 	mov.w	r2, #0
 8008f98:	f04f 0300 	mov.w	r3, #0
 8008f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	008b      	lsls	r3, r1, #2
 8008fa4:	4641      	mov	r1, r8
 8008fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008faa:	4641      	mov	r1, r8
 8008fac:	008a      	lsls	r2, r1, #2
 8008fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008fb2:	f7f7 fe89 	bl	8000cc8 <__aeabi_uldivmod>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <UART_SetConfig+0x4e4>)
 8008fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	2164      	movs	r1, #100	; 0x64
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	3332      	adds	r3, #50	; 0x32
 8008fce:	4a34      	ldr	r2, [pc, #208]	; (80090a0 <UART_SetConfig+0x4e4>)
 8008fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fda:	441c      	add	r4, r3
 8008fdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8008fe4:	677a      	str	r2, [r7, #116]	; 0x74
 8008fe6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008fea:	4642      	mov	r2, r8
 8008fec:	464b      	mov	r3, r9
 8008fee:	1891      	adds	r1, r2, r2
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	415b      	adcs	r3, r3
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	1851      	adds	r1, r2, r1
 8008ffe:	6039      	str	r1, [r7, #0]
 8009000:	4649      	mov	r1, r9
 8009002:	414b      	adcs	r3, r1
 8009004:	607b      	str	r3, [r7, #4]
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009012:	4659      	mov	r1, fp
 8009014:	00cb      	lsls	r3, r1, #3
 8009016:	4651      	mov	r1, sl
 8009018:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800901c:	4651      	mov	r1, sl
 800901e:	00ca      	lsls	r2, r1, #3
 8009020:	4610      	mov	r0, r2
 8009022:	4619      	mov	r1, r3
 8009024:	4603      	mov	r3, r0
 8009026:	4642      	mov	r2, r8
 8009028:	189b      	adds	r3, r3, r2
 800902a:	66bb      	str	r3, [r7, #104]	; 0x68
 800902c:	464b      	mov	r3, r9
 800902e:	460a      	mov	r2, r1
 8009030:	eb42 0303 	adc.w	r3, r2, r3
 8009034:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	663b      	str	r3, [r7, #96]	; 0x60
 8009040:	667a      	str	r2, [r7, #100]	; 0x64
 8009042:	f04f 0200 	mov.w	r2, #0
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800904e:	4649      	mov	r1, r9
 8009050:	008b      	lsls	r3, r1, #2
 8009052:	4641      	mov	r1, r8
 8009054:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009058:	4641      	mov	r1, r8
 800905a:	008a      	lsls	r2, r1, #2
 800905c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009060:	f7f7 fe32 	bl	8000cc8 <__aeabi_uldivmod>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <UART_SetConfig+0x4e4>)
 800906a:	fba3 1302 	umull	r1, r3, r3, r2
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	2164      	movs	r1, #100	; 0x64
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	3332      	adds	r3, #50	; 0x32
 800907c:	4a08      	ldr	r2, [pc, #32]	; (80090a0 <UART_SetConfig+0x4e4>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	f003 020f 	and.w	r2, r3, #15
 8009088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4422      	add	r2, r4
 8009090:	609a      	str	r2, [r3, #8]
}
 8009092:	bf00      	nop
 8009094:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009098:	46bd      	mov	sp, r7
 800909a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800909e:	bf00      	nop
 80090a0:	51eb851f 	.word	0x51eb851f

080090a4 <__errno>:
 80090a4:	4b01      	ldr	r3, [pc, #4]	; (80090ac <__errno+0x8>)
 80090a6:	6818      	ldr	r0, [r3, #0]
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	20000024 	.word	0x20000024

080090b0 <__libc_init_array>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	4d0d      	ldr	r5, [pc, #52]	; (80090e8 <__libc_init_array+0x38>)
 80090b4:	4c0d      	ldr	r4, [pc, #52]	; (80090ec <__libc_init_array+0x3c>)
 80090b6:	1b64      	subs	r4, r4, r5
 80090b8:	10a4      	asrs	r4, r4, #2
 80090ba:	2600      	movs	r6, #0
 80090bc:	42a6      	cmp	r6, r4
 80090be:	d109      	bne.n	80090d4 <__libc_init_array+0x24>
 80090c0:	4d0b      	ldr	r5, [pc, #44]	; (80090f0 <__libc_init_array+0x40>)
 80090c2:	4c0c      	ldr	r4, [pc, #48]	; (80090f4 <__libc_init_array+0x44>)
 80090c4:	f004 fc90 	bl	800d9e8 <_init>
 80090c8:	1b64      	subs	r4, r4, r5
 80090ca:	10a4      	asrs	r4, r4, #2
 80090cc:	2600      	movs	r6, #0
 80090ce:	42a6      	cmp	r6, r4
 80090d0:	d105      	bne.n	80090de <__libc_init_array+0x2e>
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d8:	4798      	blx	r3
 80090da:	3601      	adds	r6, #1
 80090dc:	e7ee      	b.n	80090bc <__libc_init_array+0xc>
 80090de:	f855 3b04 	ldr.w	r3, [r5], #4
 80090e2:	4798      	blx	r3
 80090e4:	3601      	adds	r6, #1
 80090e6:	e7f2      	b.n	80090ce <__libc_init_array+0x1e>
 80090e8:	0800e0ac 	.word	0x0800e0ac
 80090ec:	0800e0ac 	.word	0x0800e0ac
 80090f0:	0800e0ac 	.word	0x0800e0ac
 80090f4:	0800e0b0 	.word	0x0800e0b0

080090f8 <memset>:
 80090f8:	4402      	add	r2, r0
 80090fa:	4603      	mov	r3, r0
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d100      	bne.n	8009102 <memset+0xa>
 8009100:	4770      	bx	lr
 8009102:	f803 1b01 	strb.w	r1, [r3], #1
 8009106:	e7f9      	b.n	80090fc <memset+0x4>

08009108 <__cvt>:
 8009108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	ec55 4b10 	vmov	r4, r5, d0
 8009110:	2d00      	cmp	r5, #0
 8009112:	460e      	mov	r6, r1
 8009114:	4619      	mov	r1, r3
 8009116:	462b      	mov	r3, r5
 8009118:	bfbb      	ittet	lt
 800911a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800911e:	461d      	movlt	r5, r3
 8009120:	2300      	movge	r3, #0
 8009122:	232d      	movlt	r3, #45	; 0x2d
 8009124:	700b      	strb	r3, [r1, #0]
 8009126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009128:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800912c:	4691      	mov	r9, r2
 800912e:	f023 0820 	bic.w	r8, r3, #32
 8009132:	bfbc      	itt	lt
 8009134:	4622      	movlt	r2, r4
 8009136:	4614      	movlt	r4, r2
 8009138:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800913c:	d005      	beq.n	800914a <__cvt+0x42>
 800913e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009142:	d100      	bne.n	8009146 <__cvt+0x3e>
 8009144:	3601      	adds	r6, #1
 8009146:	2102      	movs	r1, #2
 8009148:	e000      	b.n	800914c <__cvt+0x44>
 800914a:	2103      	movs	r1, #3
 800914c:	ab03      	add	r3, sp, #12
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	ab02      	add	r3, sp, #8
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	ec45 4b10 	vmov	d0, r4, r5
 8009158:	4653      	mov	r3, sl
 800915a:	4632      	mov	r2, r6
 800915c:	f001 fdac 	bl	800acb8 <_dtoa_r>
 8009160:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009164:	4607      	mov	r7, r0
 8009166:	d102      	bne.n	800916e <__cvt+0x66>
 8009168:	f019 0f01 	tst.w	r9, #1
 800916c:	d022      	beq.n	80091b4 <__cvt+0xac>
 800916e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009172:	eb07 0906 	add.w	r9, r7, r6
 8009176:	d110      	bne.n	800919a <__cvt+0x92>
 8009178:	783b      	ldrb	r3, [r7, #0]
 800917a:	2b30      	cmp	r3, #48	; 0x30
 800917c:	d10a      	bne.n	8009194 <__cvt+0x8c>
 800917e:	2200      	movs	r2, #0
 8009180:	2300      	movs	r3, #0
 8009182:	4620      	mov	r0, r4
 8009184:	4629      	mov	r1, r5
 8009186:	f7f7 fcbf 	bl	8000b08 <__aeabi_dcmpeq>
 800918a:	b918      	cbnz	r0, 8009194 <__cvt+0x8c>
 800918c:	f1c6 0601 	rsb	r6, r6, #1
 8009190:	f8ca 6000 	str.w	r6, [sl]
 8009194:	f8da 3000 	ldr.w	r3, [sl]
 8009198:	4499      	add	r9, r3
 800919a:	2200      	movs	r2, #0
 800919c:	2300      	movs	r3, #0
 800919e:	4620      	mov	r0, r4
 80091a0:	4629      	mov	r1, r5
 80091a2:	f7f7 fcb1 	bl	8000b08 <__aeabi_dcmpeq>
 80091a6:	b108      	cbz	r0, 80091ac <__cvt+0xa4>
 80091a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80091ac:	2230      	movs	r2, #48	; 0x30
 80091ae:	9b03      	ldr	r3, [sp, #12]
 80091b0:	454b      	cmp	r3, r9
 80091b2:	d307      	bcc.n	80091c4 <__cvt+0xbc>
 80091b4:	9b03      	ldr	r3, [sp, #12]
 80091b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091b8:	1bdb      	subs	r3, r3, r7
 80091ba:	4638      	mov	r0, r7
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	b004      	add	sp, #16
 80091c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c4:	1c59      	adds	r1, r3, #1
 80091c6:	9103      	str	r1, [sp, #12]
 80091c8:	701a      	strb	r2, [r3, #0]
 80091ca:	e7f0      	b.n	80091ae <__cvt+0xa6>

080091cc <__exponent>:
 80091cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ce:	4603      	mov	r3, r0
 80091d0:	2900      	cmp	r1, #0
 80091d2:	bfb8      	it	lt
 80091d4:	4249      	neglt	r1, r1
 80091d6:	f803 2b02 	strb.w	r2, [r3], #2
 80091da:	bfb4      	ite	lt
 80091dc:	222d      	movlt	r2, #45	; 0x2d
 80091de:	222b      	movge	r2, #43	; 0x2b
 80091e0:	2909      	cmp	r1, #9
 80091e2:	7042      	strb	r2, [r0, #1]
 80091e4:	dd2a      	ble.n	800923c <__exponent+0x70>
 80091e6:	f10d 0407 	add.w	r4, sp, #7
 80091ea:	46a4      	mov	ip, r4
 80091ec:	270a      	movs	r7, #10
 80091ee:	46a6      	mov	lr, r4
 80091f0:	460a      	mov	r2, r1
 80091f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80091f6:	fb07 1516 	mls	r5, r7, r6, r1
 80091fa:	3530      	adds	r5, #48	; 0x30
 80091fc:	2a63      	cmp	r2, #99	; 0x63
 80091fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8009202:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009206:	4631      	mov	r1, r6
 8009208:	dcf1      	bgt.n	80091ee <__exponent+0x22>
 800920a:	3130      	adds	r1, #48	; 0x30
 800920c:	f1ae 0502 	sub.w	r5, lr, #2
 8009210:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009214:	1c44      	adds	r4, r0, #1
 8009216:	4629      	mov	r1, r5
 8009218:	4561      	cmp	r1, ip
 800921a:	d30a      	bcc.n	8009232 <__exponent+0x66>
 800921c:	f10d 0209 	add.w	r2, sp, #9
 8009220:	eba2 020e 	sub.w	r2, r2, lr
 8009224:	4565      	cmp	r5, ip
 8009226:	bf88      	it	hi
 8009228:	2200      	movhi	r2, #0
 800922a:	4413      	add	r3, r2
 800922c:	1a18      	subs	r0, r3, r0
 800922e:	b003      	add	sp, #12
 8009230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009236:	f804 2f01 	strb.w	r2, [r4, #1]!
 800923a:	e7ed      	b.n	8009218 <__exponent+0x4c>
 800923c:	2330      	movs	r3, #48	; 0x30
 800923e:	3130      	adds	r1, #48	; 0x30
 8009240:	7083      	strb	r3, [r0, #2]
 8009242:	70c1      	strb	r1, [r0, #3]
 8009244:	1d03      	adds	r3, r0, #4
 8009246:	e7f1      	b.n	800922c <__exponent+0x60>

08009248 <_printf_float>:
 8009248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	ed2d 8b02 	vpush	{d8}
 8009250:	b08d      	sub	sp, #52	; 0x34
 8009252:	460c      	mov	r4, r1
 8009254:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009258:	4616      	mov	r6, r2
 800925a:	461f      	mov	r7, r3
 800925c:	4605      	mov	r5, r0
 800925e:	f002 fe89 	bl	800bf74 <_localeconv_r>
 8009262:	f8d0 a000 	ldr.w	sl, [r0]
 8009266:	4650      	mov	r0, sl
 8009268:	f7f6 ffd2 	bl	8000210 <strlen>
 800926c:	2300      	movs	r3, #0
 800926e:	930a      	str	r3, [sp, #40]	; 0x28
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	f8d8 3000 	ldr.w	r3, [r8]
 8009278:	f894 b018 	ldrb.w	fp, [r4, #24]
 800927c:	3307      	adds	r3, #7
 800927e:	f023 0307 	bic.w	r3, r3, #7
 8009282:	f103 0208 	add.w	r2, r3, #8
 8009286:	f8c8 2000 	str.w	r2, [r8]
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009292:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009296:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800929a:	9307      	str	r3, [sp, #28]
 800929c:	f8cd 8018 	str.w	r8, [sp, #24]
 80092a0:	ee08 0a10 	vmov	s16, r0
 80092a4:	4b9f      	ldr	r3, [pc, #636]	; (8009524 <_printf_float+0x2dc>)
 80092a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092aa:	f04f 32ff 	mov.w	r2, #4294967295
 80092ae:	f7f7 fc5d 	bl	8000b6c <__aeabi_dcmpun>
 80092b2:	bb88      	cbnz	r0, 8009318 <_printf_float+0xd0>
 80092b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092b8:	4b9a      	ldr	r3, [pc, #616]	; (8009524 <_printf_float+0x2dc>)
 80092ba:	f04f 32ff 	mov.w	r2, #4294967295
 80092be:	f7f7 fc37 	bl	8000b30 <__aeabi_dcmple>
 80092c2:	bb48      	cbnz	r0, 8009318 <_printf_float+0xd0>
 80092c4:	2200      	movs	r2, #0
 80092c6:	2300      	movs	r3, #0
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 fc26 	bl	8000b1c <__aeabi_dcmplt>
 80092d0:	b110      	cbz	r0, 80092d8 <_printf_float+0x90>
 80092d2:	232d      	movs	r3, #45	; 0x2d
 80092d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092d8:	4b93      	ldr	r3, [pc, #588]	; (8009528 <_printf_float+0x2e0>)
 80092da:	4894      	ldr	r0, [pc, #592]	; (800952c <_printf_float+0x2e4>)
 80092dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092e0:	bf94      	ite	ls
 80092e2:	4698      	movls	r8, r3
 80092e4:	4680      	movhi	r8, r0
 80092e6:	2303      	movs	r3, #3
 80092e8:	6123      	str	r3, [r4, #16]
 80092ea:	9b05      	ldr	r3, [sp, #20]
 80092ec:	f023 0204 	bic.w	r2, r3, #4
 80092f0:	6022      	str	r2, [r4, #0]
 80092f2:	f04f 0900 	mov.w	r9, #0
 80092f6:	9700      	str	r7, [sp, #0]
 80092f8:	4633      	mov	r3, r6
 80092fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f9d8 	bl	80096b4 <_printf_common>
 8009304:	3001      	adds	r0, #1
 8009306:	f040 8090 	bne.w	800942a <_printf_float+0x1e2>
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	b00d      	add	sp, #52	; 0x34
 8009310:	ecbd 8b02 	vpop	{d8}
 8009314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009318:	4642      	mov	r2, r8
 800931a:	464b      	mov	r3, r9
 800931c:	4640      	mov	r0, r8
 800931e:	4649      	mov	r1, r9
 8009320:	f7f7 fc24 	bl	8000b6c <__aeabi_dcmpun>
 8009324:	b140      	cbz	r0, 8009338 <_printf_float+0xf0>
 8009326:	464b      	mov	r3, r9
 8009328:	2b00      	cmp	r3, #0
 800932a:	bfbc      	itt	lt
 800932c:	232d      	movlt	r3, #45	; 0x2d
 800932e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009332:	487f      	ldr	r0, [pc, #508]	; (8009530 <_printf_float+0x2e8>)
 8009334:	4b7f      	ldr	r3, [pc, #508]	; (8009534 <_printf_float+0x2ec>)
 8009336:	e7d1      	b.n	80092dc <_printf_float+0x94>
 8009338:	6863      	ldr	r3, [r4, #4]
 800933a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800933e:	9206      	str	r2, [sp, #24]
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	d13f      	bne.n	80093c4 <_printf_float+0x17c>
 8009344:	2306      	movs	r3, #6
 8009346:	6063      	str	r3, [r4, #4]
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	6861      	ldr	r1, [r4, #4]
 800934c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009350:	2300      	movs	r3, #0
 8009352:	9303      	str	r3, [sp, #12]
 8009354:	ab0a      	add	r3, sp, #40	; 0x28
 8009356:	e9cd b301 	strd	fp, r3, [sp, #4]
 800935a:	ab09      	add	r3, sp, #36	; 0x24
 800935c:	ec49 8b10 	vmov	d0, r8, r9
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	6022      	str	r2, [r4, #0]
 8009364:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009368:	4628      	mov	r0, r5
 800936a:	f7ff fecd 	bl	8009108 <__cvt>
 800936e:	9b06      	ldr	r3, [sp, #24]
 8009370:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009372:	2b47      	cmp	r3, #71	; 0x47
 8009374:	4680      	mov	r8, r0
 8009376:	d108      	bne.n	800938a <_printf_float+0x142>
 8009378:	1cc8      	adds	r0, r1, #3
 800937a:	db02      	blt.n	8009382 <_printf_float+0x13a>
 800937c:	6863      	ldr	r3, [r4, #4]
 800937e:	4299      	cmp	r1, r3
 8009380:	dd41      	ble.n	8009406 <_printf_float+0x1be>
 8009382:	f1ab 0b02 	sub.w	fp, fp, #2
 8009386:	fa5f fb8b 	uxtb.w	fp, fp
 800938a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800938e:	d820      	bhi.n	80093d2 <_printf_float+0x18a>
 8009390:	3901      	subs	r1, #1
 8009392:	465a      	mov	r2, fp
 8009394:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009398:	9109      	str	r1, [sp, #36]	; 0x24
 800939a:	f7ff ff17 	bl	80091cc <__exponent>
 800939e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093a0:	1813      	adds	r3, r2, r0
 80093a2:	2a01      	cmp	r2, #1
 80093a4:	4681      	mov	r9, r0
 80093a6:	6123      	str	r3, [r4, #16]
 80093a8:	dc02      	bgt.n	80093b0 <_printf_float+0x168>
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	07d2      	lsls	r2, r2, #31
 80093ae:	d501      	bpl.n	80093b4 <_printf_float+0x16c>
 80093b0:	3301      	adds	r3, #1
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d09c      	beq.n	80092f6 <_printf_float+0xae>
 80093bc:	232d      	movs	r3, #45	; 0x2d
 80093be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093c2:	e798      	b.n	80092f6 <_printf_float+0xae>
 80093c4:	9a06      	ldr	r2, [sp, #24]
 80093c6:	2a47      	cmp	r2, #71	; 0x47
 80093c8:	d1be      	bne.n	8009348 <_printf_float+0x100>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1bc      	bne.n	8009348 <_printf_float+0x100>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e7b9      	b.n	8009346 <_printf_float+0xfe>
 80093d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80093d6:	d118      	bne.n	800940a <_printf_float+0x1c2>
 80093d8:	2900      	cmp	r1, #0
 80093da:	6863      	ldr	r3, [r4, #4]
 80093dc:	dd0b      	ble.n	80093f6 <_printf_float+0x1ae>
 80093de:	6121      	str	r1, [r4, #16]
 80093e0:	b913      	cbnz	r3, 80093e8 <_printf_float+0x1a0>
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	07d0      	lsls	r0, r2, #31
 80093e6:	d502      	bpl.n	80093ee <_printf_float+0x1a6>
 80093e8:	3301      	adds	r3, #1
 80093ea:	440b      	add	r3, r1
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80093f0:	f04f 0900 	mov.w	r9, #0
 80093f4:	e7de      	b.n	80093b4 <_printf_float+0x16c>
 80093f6:	b913      	cbnz	r3, 80093fe <_printf_float+0x1b6>
 80093f8:	6822      	ldr	r2, [r4, #0]
 80093fa:	07d2      	lsls	r2, r2, #31
 80093fc:	d501      	bpl.n	8009402 <_printf_float+0x1ba>
 80093fe:	3302      	adds	r3, #2
 8009400:	e7f4      	b.n	80093ec <_printf_float+0x1a4>
 8009402:	2301      	movs	r3, #1
 8009404:	e7f2      	b.n	80093ec <_printf_float+0x1a4>
 8009406:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800940a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940c:	4299      	cmp	r1, r3
 800940e:	db05      	blt.n	800941c <_printf_float+0x1d4>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	6121      	str	r1, [r4, #16]
 8009414:	07d8      	lsls	r0, r3, #31
 8009416:	d5ea      	bpl.n	80093ee <_printf_float+0x1a6>
 8009418:	1c4b      	adds	r3, r1, #1
 800941a:	e7e7      	b.n	80093ec <_printf_float+0x1a4>
 800941c:	2900      	cmp	r1, #0
 800941e:	bfd4      	ite	le
 8009420:	f1c1 0202 	rsble	r2, r1, #2
 8009424:	2201      	movgt	r2, #1
 8009426:	4413      	add	r3, r2
 8009428:	e7e0      	b.n	80093ec <_printf_float+0x1a4>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	055a      	lsls	r2, r3, #21
 800942e:	d407      	bmi.n	8009440 <_printf_float+0x1f8>
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	4642      	mov	r2, r8
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	d12c      	bne.n	8009498 <_printf_float+0x250>
 800943e:	e764      	b.n	800930a <_printf_float+0xc2>
 8009440:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009444:	f240 80e0 	bls.w	8009608 <_printf_float+0x3c0>
 8009448:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800944c:	2200      	movs	r2, #0
 800944e:	2300      	movs	r3, #0
 8009450:	f7f7 fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8009454:	2800      	cmp	r0, #0
 8009456:	d034      	beq.n	80094c2 <_printf_float+0x27a>
 8009458:	4a37      	ldr	r2, [pc, #220]	; (8009538 <_printf_float+0x2f0>)
 800945a:	2301      	movs	r3, #1
 800945c:	4631      	mov	r1, r6
 800945e:	4628      	mov	r0, r5
 8009460:	47b8      	blx	r7
 8009462:	3001      	adds	r0, #1
 8009464:	f43f af51 	beq.w	800930a <_printf_float+0xc2>
 8009468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800946c:	429a      	cmp	r2, r3
 800946e:	db02      	blt.n	8009476 <_printf_float+0x22e>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	07d8      	lsls	r0, r3, #31
 8009474:	d510      	bpl.n	8009498 <_printf_float+0x250>
 8009476:	ee18 3a10 	vmov	r3, s16
 800947a:	4652      	mov	r2, sl
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f af41 	beq.w	800930a <_printf_float+0xc2>
 8009488:	f04f 0800 	mov.w	r8, #0
 800948c:	f104 091a 	add.w	r9, r4, #26
 8009490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009492:	3b01      	subs	r3, #1
 8009494:	4543      	cmp	r3, r8
 8009496:	dc09      	bgt.n	80094ac <_printf_float+0x264>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	079b      	lsls	r3, r3, #30
 800949c:	f100 8105 	bmi.w	80096aa <_printf_float+0x462>
 80094a0:	68e0      	ldr	r0, [r4, #12]
 80094a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a4:	4298      	cmp	r0, r3
 80094a6:	bfb8      	it	lt
 80094a8:	4618      	movlt	r0, r3
 80094aa:	e730      	b.n	800930e <_printf_float+0xc6>
 80094ac:	2301      	movs	r3, #1
 80094ae:	464a      	mov	r2, r9
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f af27 	beq.w	800930a <_printf_float+0xc2>
 80094bc:	f108 0801 	add.w	r8, r8, #1
 80094c0:	e7e6      	b.n	8009490 <_printf_float+0x248>
 80094c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dc39      	bgt.n	800953c <_printf_float+0x2f4>
 80094c8:	4a1b      	ldr	r2, [pc, #108]	; (8009538 <_printf_float+0x2f0>)
 80094ca:	2301      	movs	r3, #1
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	f43f af19 	beq.w	800930a <_printf_float+0xc2>
 80094d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094dc:	4313      	orrs	r3, r2
 80094de:	d102      	bne.n	80094e6 <_printf_float+0x29e>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	07d9      	lsls	r1, r3, #31
 80094e4:	d5d8      	bpl.n	8009498 <_printf_float+0x250>
 80094e6:	ee18 3a10 	vmov	r3, s16
 80094ea:	4652      	mov	r2, sl
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	f43f af09 	beq.w	800930a <_printf_float+0xc2>
 80094f8:	f04f 0900 	mov.w	r9, #0
 80094fc:	f104 0a1a 	add.w	sl, r4, #26
 8009500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009502:	425b      	negs	r3, r3
 8009504:	454b      	cmp	r3, r9
 8009506:	dc01      	bgt.n	800950c <_printf_float+0x2c4>
 8009508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800950a:	e792      	b.n	8009432 <_printf_float+0x1ea>
 800950c:	2301      	movs	r3, #1
 800950e:	4652      	mov	r2, sl
 8009510:	4631      	mov	r1, r6
 8009512:	4628      	mov	r0, r5
 8009514:	47b8      	blx	r7
 8009516:	3001      	adds	r0, #1
 8009518:	f43f aef7 	beq.w	800930a <_printf_float+0xc2>
 800951c:	f109 0901 	add.w	r9, r9, #1
 8009520:	e7ee      	b.n	8009500 <_printf_float+0x2b8>
 8009522:	bf00      	nop
 8009524:	7fefffff 	.word	0x7fefffff
 8009528:	0800dc04 	.word	0x0800dc04
 800952c:	0800dc08 	.word	0x0800dc08
 8009530:	0800dc10 	.word	0x0800dc10
 8009534:	0800dc0c 	.word	0x0800dc0c
 8009538:	0800dc14 	.word	0x0800dc14
 800953c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800953e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009540:	429a      	cmp	r2, r3
 8009542:	bfa8      	it	ge
 8009544:	461a      	movge	r2, r3
 8009546:	2a00      	cmp	r2, #0
 8009548:	4691      	mov	r9, r2
 800954a:	dc37      	bgt.n	80095bc <_printf_float+0x374>
 800954c:	f04f 0b00 	mov.w	fp, #0
 8009550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009554:	f104 021a 	add.w	r2, r4, #26
 8009558:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	eba3 0309 	sub.w	r3, r3, r9
 8009560:	455b      	cmp	r3, fp
 8009562:	dc33      	bgt.n	80095cc <_printf_float+0x384>
 8009564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009568:	429a      	cmp	r2, r3
 800956a:	db3b      	blt.n	80095e4 <_printf_float+0x39c>
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	07da      	lsls	r2, r3, #31
 8009570:	d438      	bmi.n	80095e4 <_printf_float+0x39c>
 8009572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009574:	9a05      	ldr	r2, [sp, #20]
 8009576:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009578:	1a9a      	subs	r2, r3, r2
 800957a:	eba3 0901 	sub.w	r9, r3, r1
 800957e:	4591      	cmp	r9, r2
 8009580:	bfa8      	it	ge
 8009582:	4691      	movge	r9, r2
 8009584:	f1b9 0f00 	cmp.w	r9, #0
 8009588:	dc35      	bgt.n	80095f6 <_printf_float+0x3ae>
 800958a:	f04f 0800 	mov.w	r8, #0
 800958e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009592:	f104 0a1a 	add.w	sl, r4, #26
 8009596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	eba3 0309 	sub.w	r3, r3, r9
 80095a0:	4543      	cmp	r3, r8
 80095a2:	f77f af79 	ble.w	8009498 <_printf_float+0x250>
 80095a6:	2301      	movs	r3, #1
 80095a8:	4652      	mov	r2, sl
 80095aa:	4631      	mov	r1, r6
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b8      	blx	r7
 80095b0:	3001      	adds	r0, #1
 80095b2:	f43f aeaa 	beq.w	800930a <_printf_float+0xc2>
 80095b6:	f108 0801 	add.w	r8, r8, #1
 80095ba:	e7ec      	b.n	8009596 <_printf_float+0x34e>
 80095bc:	4613      	mov	r3, r2
 80095be:	4631      	mov	r1, r6
 80095c0:	4642      	mov	r2, r8
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	d1c0      	bne.n	800954c <_printf_float+0x304>
 80095ca:	e69e      	b.n	800930a <_printf_float+0xc2>
 80095cc:	2301      	movs	r3, #1
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	9205      	str	r2, [sp, #20]
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	f43f ae97 	beq.w	800930a <_printf_float+0xc2>
 80095dc:	9a05      	ldr	r2, [sp, #20]
 80095de:	f10b 0b01 	add.w	fp, fp, #1
 80095e2:	e7b9      	b.n	8009558 <_printf_float+0x310>
 80095e4:	ee18 3a10 	vmov	r3, s16
 80095e8:	4652      	mov	r2, sl
 80095ea:	4631      	mov	r1, r6
 80095ec:	4628      	mov	r0, r5
 80095ee:	47b8      	blx	r7
 80095f0:	3001      	adds	r0, #1
 80095f2:	d1be      	bne.n	8009572 <_printf_float+0x32a>
 80095f4:	e689      	b.n	800930a <_printf_float+0xc2>
 80095f6:	9a05      	ldr	r2, [sp, #20]
 80095f8:	464b      	mov	r3, r9
 80095fa:	4442      	add	r2, r8
 80095fc:	4631      	mov	r1, r6
 80095fe:	4628      	mov	r0, r5
 8009600:	47b8      	blx	r7
 8009602:	3001      	adds	r0, #1
 8009604:	d1c1      	bne.n	800958a <_printf_float+0x342>
 8009606:	e680      	b.n	800930a <_printf_float+0xc2>
 8009608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800960a:	2a01      	cmp	r2, #1
 800960c:	dc01      	bgt.n	8009612 <_printf_float+0x3ca>
 800960e:	07db      	lsls	r3, r3, #31
 8009610:	d538      	bpl.n	8009684 <_printf_float+0x43c>
 8009612:	2301      	movs	r3, #1
 8009614:	4642      	mov	r2, r8
 8009616:	4631      	mov	r1, r6
 8009618:	4628      	mov	r0, r5
 800961a:	47b8      	blx	r7
 800961c:	3001      	adds	r0, #1
 800961e:	f43f ae74 	beq.w	800930a <_printf_float+0xc2>
 8009622:	ee18 3a10 	vmov	r3, s16
 8009626:	4652      	mov	r2, sl
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	47b8      	blx	r7
 800962e:	3001      	adds	r0, #1
 8009630:	f43f ae6b 	beq.w	800930a <_printf_float+0xc2>
 8009634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009638:	2200      	movs	r2, #0
 800963a:	2300      	movs	r3, #0
 800963c:	f7f7 fa64 	bl	8000b08 <__aeabi_dcmpeq>
 8009640:	b9d8      	cbnz	r0, 800967a <_printf_float+0x432>
 8009642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009644:	f108 0201 	add.w	r2, r8, #1
 8009648:	3b01      	subs	r3, #1
 800964a:	4631      	mov	r1, r6
 800964c:	4628      	mov	r0, r5
 800964e:	47b8      	blx	r7
 8009650:	3001      	adds	r0, #1
 8009652:	d10e      	bne.n	8009672 <_printf_float+0x42a>
 8009654:	e659      	b.n	800930a <_printf_float+0xc2>
 8009656:	2301      	movs	r3, #1
 8009658:	4652      	mov	r2, sl
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f ae52 	beq.w	800930a <_printf_float+0xc2>
 8009666:	f108 0801 	add.w	r8, r8, #1
 800966a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966c:	3b01      	subs	r3, #1
 800966e:	4543      	cmp	r3, r8
 8009670:	dcf1      	bgt.n	8009656 <_printf_float+0x40e>
 8009672:	464b      	mov	r3, r9
 8009674:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009678:	e6dc      	b.n	8009434 <_printf_float+0x1ec>
 800967a:	f04f 0800 	mov.w	r8, #0
 800967e:	f104 0a1a 	add.w	sl, r4, #26
 8009682:	e7f2      	b.n	800966a <_printf_float+0x422>
 8009684:	2301      	movs	r3, #1
 8009686:	4642      	mov	r2, r8
 8009688:	e7df      	b.n	800964a <_printf_float+0x402>
 800968a:	2301      	movs	r3, #1
 800968c:	464a      	mov	r2, r9
 800968e:	4631      	mov	r1, r6
 8009690:	4628      	mov	r0, r5
 8009692:	47b8      	blx	r7
 8009694:	3001      	adds	r0, #1
 8009696:	f43f ae38 	beq.w	800930a <_printf_float+0xc2>
 800969a:	f108 0801 	add.w	r8, r8, #1
 800969e:	68e3      	ldr	r3, [r4, #12]
 80096a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096a2:	1a5b      	subs	r3, r3, r1
 80096a4:	4543      	cmp	r3, r8
 80096a6:	dcf0      	bgt.n	800968a <_printf_float+0x442>
 80096a8:	e6fa      	b.n	80094a0 <_printf_float+0x258>
 80096aa:	f04f 0800 	mov.w	r8, #0
 80096ae:	f104 0919 	add.w	r9, r4, #25
 80096b2:	e7f4      	b.n	800969e <_printf_float+0x456>

080096b4 <_printf_common>:
 80096b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b8:	4616      	mov	r6, r2
 80096ba:	4699      	mov	r9, r3
 80096bc:	688a      	ldr	r2, [r1, #8]
 80096be:	690b      	ldr	r3, [r1, #16]
 80096c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096c4:	4293      	cmp	r3, r2
 80096c6:	bfb8      	it	lt
 80096c8:	4613      	movlt	r3, r2
 80096ca:	6033      	str	r3, [r6, #0]
 80096cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096d0:	4607      	mov	r7, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	b10a      	cbz	r2, 80096da <_printf_common+0x26>
 80096d6:	3301      	adds	r3, #1
 80096d8:	6033      	str	r3, [r6, #0]
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	0699      	lsls	r1, r3, #26
 80096de:	bf42      	ittt	mi
 80096e0:	6833      	ldrmi	r3, [r6, #0]
 80096e2:	3302      	addmi	r3, #2
 80096e4:	6033      	strmi	r3, [r6, #0]
 80096e6:	6825      	ldr	r5, [r4, #0]
 80096e8:	f015 0506 	ands.w	r5, r5, #6
 80096ec:	d106      	bne.n	80096fc <_printf_common+0x48>
 80096ee:	f104 0a19 	add.w	sl, r4, #25
 80096f2:	68e3      	ldr	r3, [r4, #12]
 80096f4:	6832      	ldr	r2, [r6, #0]
 80096f6:	1a9b      	subs	r3, r3, r2
 80096f8:	42ab      	cmp	r3, r5
 80096fa:	dc26      	bgt.n	800974a <_printf_common+0x96>
 80096fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009700:	1e13      	subs	r3, r2, #0
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	bf18      	it	ne
 8009706:	2301      	movne	r3, #1
 8009708:	0692      	lsls	r2, r2, #26
 800970a:	d42b      	bmi.n	8009764 <_printf_common+0xb0>
 800970c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009710:	4649      	mov	r1, r9
 8009712:	4638      	mov	r0, r7
 8009714:	47c0      	blx	r8
 8009716:	3001      	adds	r0, #1
 8009718:	d01e      	beq.n	8009758 <_printf_common+0xa4>
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	68e5      	ldr	r5, [r4, #12]
 800971e:	6832      	ldr	r2, [r6, #0]
 8009720:	f003 0306 	and.w	r3, r3, #6
 8009724:	2b04      	cmp	r3, #4
 8009726:	bf08      	it	eq
 8009728:	1aad      	subeq	r5, r5, r2
 800972a:	68a3      	ldr	r3, [r4, #8]
 800972c:	6922      	ldr	r2, [r4, #16]
 800972e:	bf0c      	ite	eq
 8009730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009734:	2500      	movne	r5, #0
 8009736:	4293      	cmp	r3, r2
 8009738:	bfc4      	itt	gt
 800973a:	1a9b      	subgt	r3, r3, r2
 800973c:	18ed      	addgt	r5, r5, r3
 800973e:	2600      	movs	r6, #0
 8009740:	341a      	adds	r4, #26
 8009742:	42b5      	cmp	r5, r6
 8009744:	d11a      	bne.n	800977c <_printf_common+0xc8>
 8009746:	2000      	movs	r0, #0
 8009748:	e008      	b.n	800975c <_printf_common+0xa8>
 800974a:	2301      	movs	r3, #1
 800974c:	4652      	mov	r2, sl
 800974e:	4649      	mov	r1, r9
 8009750:	4638      	mov	r0, r7
 8009752:	47c0      	blx	r8
 8009754:	3001      	adds	r0, #1
 8009756:	d103      	bne.n	8009760 <_printf_common+0xac>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009760:	3501      	adds	r5, #1
 8009762:	e7c6      	b.n	80096f2 <_printf_common+0x3e>
 8009764:	18e1      	adds	r1, r4, r3
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	2030      	movs	r0, #48	; 0x30
 800976a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800976e:	4422      	add	r2, r4
 8009770:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009774:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009778:	3302      	adds	r3, #2
 800977a:	e7c7      	b.n	800970c <_printf_common+0x58>
 800977c:	2301      	movs	r3, #1
 800977e:	4622      	mov	r2, r4
 8009780:	4649      	mov	r1, r9
 8009782:	4638      	mov	r0, r7
 8009784:	47c0      	blx	r8
 8009786:	3001      	adds	r0, #1
 8009788:	d0e6      	beq.n	8009758 <_printf_common+0xa4>
 800978a:	3601      	adds	r6, #1
 800978c:	e7d9      	b.n	8009742 <_printf_common+0x8e>
	...

08009790 <_printf_i>:
 8009790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	7e0f      	ldrb	r7, [r1, #24]
 8009796:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009798:	2f78      	cmp	r7, #120	; 0x78
 800979a:	4691      	mov	r9, r2
 800979c:	4680      	mov	r8, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	469a      	mov	sl, r3
 80097a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097a6:	d807      	bhi.n	80097b8 <_printf_i+0x28>
 80097a8:	2f62      	cmp	r7, #98	; 0x62
 80097aa:	d80a      	bhi.n	80097c2 <_printf_i+0x32>
 80097ac:	2f00      	cmp	r7, #0
 80097ae:	f000 80d8 	beq.w	8009962 <_printf_i+0x1d2>
 80097b2:	2f58      	cmp	r7, #88	; 0x58
 80097b4:	f000 80a3 	beq.w	80098fe <_printf_i+0x16e>
 80097b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097c0:	e03a      	b.n	8009838 <_printf_i+0xa8>
 80097c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097c6:	2b15      	cmp	r3, #21
 80097c8:	d8f6      	bhi.n	80097b8 <_printf_i+0x28>
 80097ca:	a101      	add	r1, pc, #4	; (adr r1, 80097d0 <_printf_i+0x40>)
 80097cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097d0:	08009829 	.word	0x08009829
 80097d4:	0800983d 	.word	0x0800983d
 80097d8:	080097b9 	.word	0x080097b9
 80097dc:	080097b9 	.word	0x080097b9
 80097e0:	080097b9 	.word	0x080097b9
 80097e4:	080097b9 	.word	0x080097b9
 80097e8:	0800983d 	.word	0x0800983d
 80097ec:	080097b9 	.word	0x080097b9
 80097f0:	080097b9 	.word	0x080097b9
 80097f4:	080097b9 	.word	0x080097b9
 80097f8:	080097b9 	.word	0x080097b9
 80097fc:	08009949 	.word	0x08009949
 8009800:	0800986d 	.word	0x0800986d
 8009804:	0800992b 	.word	0x0800992b
 8009808:	080097b9 	.word	0x080097b9
 800980c:	080097b9 	.word	0x080097b9
 8009810:	0800996b 	.word	0x0800996b
 8009814:	080097b9 	.word	0x080097b9
 8009818:	0800986d 	.word	0x0800986d
 800981c:	080097b9 	.word	0x080097b9
 8009820:	080097b9 	.word	0x080097b9
 8009824:	08009933 	.word	0x08009933
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	1d1a      	adds	r2, r3, #4
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	602a      	str	r2, [r5, #0]
 8009830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009838:	2301      	movs	r3, #1
 800983a:	e0a3      	b.n	8009984 <_printf_i+0x1f4>
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	6829      	ldr	r1, [r5, #0]
 8009840:	0606      	lsls	r6, r0, #24
 8009842:	f101 0304 	add.w	r3, r1, #4
 8009846:	d50a      	bpl.n	800985e <_printf_i+0xce>
 8009848:	680e      	ldr	r6, [r1, #0]
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	2e00      	cmp	r6, #0
 800984e:	da03      	bge.n	8009858 <_printf_i+0xc8>
 8009850:	232d      	movs	r3, #45	; 0x2d
 8009852:	4276      	negs	r6, r6
 8009854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009858:	485e      	ldr	r0, [pc, #376]	; (80099d4 <_printf_i+0x244>)
 800985a:	230a      	movs	r3, #10
 800985c:	e019      	b.n	8009892 <_printf_i+0x102>
 800985e:	680e      	ldr	r6, [r1, #0]
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009866:	bf18      	it	ne
 8009868:	b236      	sxthne	r6, r6
 800986a:	e7ef      	b.n	800984c <_printf_i+0xbc>
 800986c:	682b      	ldr	r3, [r5, #0]
 800986e:	6820      	ldr	r0, [r4, #0]
 8009870:	1d19      	adds	r1, r3, #4
 8009872:	6029      	str	r1, [r5, #0]
 8009874:	0601      	lsls	r1, r0, #24
 8009876:	d501      	bpl.n	800987c <_printf_i+0xec>
 8009878:	681e      	ldr	r6, [r3, #0]
 800987a:	e002      	b.n	8009882 <_printf_i+0xf2>
 800987c:	0646      	lsls	r6, r0, #25
 800987e:	d5fb      	bpl.n	8009878 <_printf_i+0xe8>
 8009880:	881e      	ldrh	r6, [r3, #0]
 8009882:	4854      	ldr	r0, [pc, #336]	; (80099d4 <_printf_i+0x244>)
 8009884:	2f6f      	cmp	r7, #111	; 0x6f
 8009886:	bf0c      	ite	eq
 8009888:	2308      	moveq	r3, #8
 800988a:	230a      	movne	r3, #10
 800988c:	2100      	movs	r1, #0
 800988e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009892:	6865      	ldr	r5, [r4, #4]
 8009894:	60a5      	str	r5, [r4, #8]
 8009896:	2d00      	cmp	r5, #0
 8009898:	bfa2      	ittt	ge
 800989a:	6821      	ldrge	r1, [r4, #0]
 800989c:	f021 0104 	bicge.w	r1, r1, #4
 80098a0:	6021      	strge	r1, [r4, #0]
 80098a2:	b90e      	cbnz	r6, 80098a8 <_printf_i+0x118>
 80098a4:	2d00      	cmp	r5, #0
 80098a6:	d04d      	beq.n	8009944 <_printf_i+0x1b4>
 80098a8:	4615      	mov	r5, r2
 80098aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80098ae:	fb03 6711 	mls	r7, r3, r1, r6
 80098b2:	5dc7      	ldrb	r7, [r0, r7]
 80098b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80098b8:	4637      	mov	r7, r6
 80098ba:	42bb      	cmp	r3, r7
 80098bc:	460e      	mov	r6, r1
 80098be:	d9f4      	bls.n	80098aa <_printf_i+0x11a>
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	d10b      	bne.n	80098dc <_printf_i+0x14c>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	07de      	lsls	r6, r3, #31
 80098c8:	d508      	bpl.n	80098dc <_printf_i+0x14c>
 80098ca:	6923      	ldr	r3, [r4, #16]
 80098cc:	6861      	ldr	r1, [r4, #4]
 80098ce:	4299      	cmp	r1, r3
 80098d0:	bfde      	ittt	le
 80098d2:	2330      	movle	r3, #48	; 0x30
 80098d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098dc:	1b52      	subs	r2, r2, r5
 80098de:	6122      	str	r2, [r4, #16]
 80098e0:	f8cd a000 	str.w	sl, [sp]
 80098e4:	464b      	mov	r3, r9
 80098e6:	aa03      	add	r2, sp, #12
 80098e8:	4621      	mov	r1, r4
 80098ea:	4640      	mov	r0, r8
 80098ec:	f7ff fee2 	bl	80096b4 <_printf_common>
 80098f0:	3001      	adds	r0, #1
 80098f2:	d14c      	bne.n	800998e <_printf_i+0x1fe>
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	b004      	add	sp, #16
 80098fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fe:	4835      	ldr	r0, [pc, #212]	; (80099d4 <_printf_i+0x244>)
 8009900:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009904:	6829      	ldr	r1, [r5, #0]
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	f851 6b04 	ldr.w	r6, [r1], #4
 800990c:	6029      	str	r1, [r5, #0]
 800990e:	061d      	lsls	r5, r3, #24
 8009910:	d514      	bpl.n	800993c <_printf_i+0x1ac>
 8009912:	07df      	lsls	r7, r3, #31
 8009914:	bf44      	itt	mi
 8009916:	f043 0320 	orrmi.w	r3, r3, #32
 800991a:	6023      	strmi	r3, [r4, #0]
 800991c:	b91e      	cbnz	r6, 8009926 <_printf_i+0x196>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	f023 0320 	bic.w	r3, r3, #32
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	2310      	movs	r3, #16
 8009928:	e7b0      	b.n	800988c <_printf_i+0xfc>
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	f043 0320 	orr.w	r3, r3, #32
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	2378      	movs	r3, #120	; 0x78
 8009934:	4828      	ldr	r0, [pc, #160]	; (80099d8 <_printf_i+0x248>)
 8009936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800993a:	e7e3      	b.n	8009904 <_printf_i+0x174>
 800993c:	0659      	lsls	r1, r3, #25
 800993e:	bf48      	it	mi
 8009940:	b2b6      	uxthmi	r6, r6
 8009942:	e7e6      	b.n	8009912 <_printf_i+0x182>
 8009944:	4615      	mov	r5, r2
 8009946:	e7bb      	b.n	80098c0 <_printf_i+0x130>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	6826      	ldr	r6, [r4, #0]
 800994c:	6961      	ldr	r1, [r4, #20]
 800994e:	1d18      	adds	r0, r3, #4
 8009950:	6028      	str	r0, [r5, #0]
 8009952:	0635      	lsls	r5, r6, #24
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	d501      	bpl.n	800995c <_printf_i+0x1cc>
 8009958:	6019      	str	r1, [r3, #0]
 800995a:	e002      	b.n	8009962 <_printf_i+0x1d2>
 800995c:	0670      	lsls	r0, r6, #25
 800995e:	d5fb      	bpl.n	8009958 <_printf_i+0x1c8>
 8009960:	8019      	strh	r1, [r3, #0]
 8009962:	2300      	movs	r3, #0
 8009964:	6123      	str	r3, [r4, #16]
 8009966:	4615      	mov	r5, r2
 8009968:	e7ba      	b.n	80098e0 <_printf_i+0x150>
 800996a:	682b      	ldr	r3, [r5, #0]
 800996c:	1d1a      	adds	r2, r3, #4
 800996e:	602a      	str	r2, [r5, #0]
 8009970:	681d      	ldr	r5, [r3, #0]
 8009972:	6862      	ldr	r2, [r4, #4]
 8009974:	2100      	movs	r1, #0
 8009976:	4628      	mov	r0, r5
 8009978:	f7f6 fc52 	bl	8000220 <memchr>
 800997c:	b108      	cbz	r0, 8009982 <_printf_i+0x1f2>
 800997e:	1b40      	subs	r0, r0, r5
 8009980:	6060      	str	r0, [r4, #4]
 8009982:	6863      	ldr	r3, [r4, #4]
 8009984:	6123      	str	r3, [r4, #16]
 8009986:	2300      	movs	r3, #0
 8009988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800998c:	e7a8      	b.n	80098e0 <_printf_i+0x150>
 800998e:	6923      	ldr	r3, [r4, #16]
 8009990:	462a      	mov	r2, r5
 8009992:	4649      	mov	r1, r9
 8009994:	4640      	mov	r0, r8
 8009996:	47d0      	blx	sl
 8009998:	3001      	adds	r0, #1
 800999a:	d0ab      	beq.n	80098f4 <_printf_i+0x164>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	079b      	lsls	r3, r3, #30
 80099a0:	d413      	bmi.n	80099ca <_printf_i+0x23a>
 80099a2:	68e0      	ldr	r0, [r4, #12]
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	4298      	cmp	r0, r3
 80099a8:	bfb8      	it	lt
 80099aa:	4618      	movlt	r0, r3
 80099ac:	e7a4      	b.n	80098f8 <_printf_i+0x168>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4632      	mov	r2, r6
 80099b2:	4649      	mov	r1, r9
 80099b4:	4640      	mov	r0, r8
 80099b6:	47d0      	blx	sl
 80099b8:	3001      	adds	r0, #1
 80099ba:	d09b      	beq.n	80098f4 <_printf_i+0x164>
 80099bc:	3501      	adds	r5, #1
 80099be:	68e3      	ldr	r3, [r4, #12]
 80099c0:	9903      	ldr	r1, [sp, #12]
 80099c2:	1a5b      	subs	r3, r3, r1
 80099c4:	42ab      	cmp	r3, r5
 80099c6:	dcf2      	bgt.n	80099ae <_printf_i+0x21e>
 80099c8:	e7eb      	b.n	80099a2 <_printf_i+0x212>
 80099ca:	2500      	movs	r5, #0
 80099cc:	f104 0619 	add.w	r6, r4, #25
 80099d0:	e7f5      	b.n	80099be <_printf_i+0x22e>
 80099d2:	bf00      	nop
 80099d4:	0800dc16 	.word	0x0800dc16
 80099d8:	0800dc27 	.word	0x0800dc27

080099dc <_scanf_float>:
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	b087      	sub	sp, #28
 80099e2:	4617      	mov	r7, r2
 80099e4:	9303      	str	r3, [sp, #12]
 80099e6:	688b      	ldr	r3, [r1, #8]
 80099e8:	1e5a      	subs	r2, r3, #1
 80099ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80099ee:	bf83      	ittte	hi
 80099f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80099f4:	195b      	addhi	r3, r3, r5
 80099f6:	9302      	strhi	r3, [sp, #8]
 80099f8:	2300      	movls	r3, #0
 80099fa:	bf86      	itte	hi
 80099fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a00:	608b      	strhi	r3, [r1, #8]
 8009a02:	9302      	strls	r3, [sp, #8]
 8009a04:	680b      	ldr	r3, [r1, #0]
 8009a06:	468b      	mov	fp, r1
 8009a08:	2500      	movs	r5, #0
 8009a0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009a0e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009a12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009a16:	4680      	mov	r8, r0
 8009a18:	460c      	mov	r4, r1
 8009a1a:	465e      	mov	r6, fp
 8009a1c:	46aa      	mov	sl, r5
 8009a1e:	46a9      	mov	r9, r5
 8009a20:	9501      	str	r5, [sp, #4]
 8009a22:	68a2      	ldr	r2, [r4, #8]
 8009a24:	b152      	cbz	r2, 8009a3c <_scanf_float+0x60>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b4e      	cmp	r3, #78	; 0x4e
 8009a2c:	d864      	bhi.n	8009af8 <_scanf_float+0x11c>
 8009a2e:	2b40      	cmp	r3, #64	; 0x40
 8009a30:	d83c      	bhi.n	8009aac <_scanf_float+0xd0>
 8009a32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009a36:	b2c8      	uxtb	r0, r1
 8009a38:	280e      	cmp	r0, #14
 8009a3a:	d93a      	bls.n	8009ab2 <_scanf_float+0xd6>
 8009a3c:	f1b9 0f00 	cmp.w	r9, #0
 8009a40:	d003      	beq.n	8009a4a <_scanf_float+0x6e>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a4e:	f1ba 0f01 	cmp.w	sl, #1
 8009a52:	f200 8113 	bhi.w	8009c7c <_scanf_float+0x2a0>
 8009a56:	455e      	cmp	r6, fp
 8009a58:	f200 8105 	bhi.w	8009c66 <_scanf_float+0x28a>
 8009a5c:	2501      	movs	r5, #1
 8009a5e:	4628      	mov	r0, r5
 8009a60:	b007      	add	sp, #28
 8009a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009a6a:	2a0d      	cmp	r2, #13
 8009a6c:	d8e6      	bhi.n	8009a3c <_scanf_float+0x60>
 8009a6e:	a101      	add	r1, pc, #4	; (adr r1, 8009a74 <_scanf_float+0x98>)
 8009a70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a74:	08009bb3 	.word	0x08009bb3
 8009a78:	08009a3d 	.word	0x08009a3d
 8009a7c:	08009a3d 	.word	0x08009a3d
 8009a80:	08009a3d 	.word	0x08009a3d
 8009a84:	08009c13 	.word	0x08009c13
 8009a88:	08009beb 	.word	0x08009beb
 8009a8c:	08009a3d 	.word	0x08009a3d
 8009a90:	08009a3d 	.word	0x08009a3d
 8009a94:	08009bc1 	.word	0x08009bc1
 8009a98:	08009a3d 	.word	0x08009a3d
 8009a9c:	08009a3d 	.word	0x08009a3d
 8009aa0:	08009a3d 	.word	0x08009a3d
 8009aa4:	08009a3d 	.word	0x08009a3d
 8009aa8:	08009b79 	.word	0x08009b79
 8009aac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009ab0:	e7db      	b.n	8009a6a <_scanf_float+0x8e>
 8009ab2:	290e      	cmp	r1, #14
 8009ab4:	d8c2      	bhi.n	8009a3c <_scanf_float+0x60>
 8009ab6:	a001      	add	r0, pc, #4	; (adr r0, 8009abc <_scanf_float+0xe0>)
 8009ab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009abc:	08009b6b 	.word	0x08009b6b
 8009ac0:	08009a3d 	.word	0x08009a3d
 8009ac4:	08009b6b 	.word	0x08009b6b
 8009ac8:	08009bff 	.word	0x08009bff
 8009acc:	08009a3d 	.word	0x08009a3d
 8009ad0:	08009b19 	.word	0x08009b19
 8009ad4:	08009b55 	.word	0x08009b55
 8009ad8:	08009b55 	.word	0x08009b55
 8009adc:	08009b55 	.word	0x08009b55
 8009ae0:	08009b55 	.word	0x08009b55
 8009ae4:	08009b55 	.word	0x08009b55
 8009ae8:	08009b55 	.word	0x08009b55
 8009aec:	08009b55 	.word	0x08009b55
 8009af0:	08009b55 	.word	0x08009b55
 8009af4:	08009b55 	.word	0x08009b55
 8009af8:	2b6e      	cmp	r3, #110	; 0x6e
 8009afa:	d809      	bhi.n	8009b10 <_scanf_float+0x134>
 8009afc:	2b60      	cmp	r3, #96	; 0x60
 8009afe:	d8b2      	bhi.n	8009a66 <_scanf_float+0x8a>
 8009b00:	2b54      	cmp	r3, #84	; 0x54
 8009b02:	d077      	beq.n	8009bf4 <_scanf_float+0x218>
 8009b04:	2b59      	cmp	r3, #89	; 0x59
 8009b06:	d199      	bne.n	8009a3c <_scanf_float+0x60>
 8009b08:	2d07      	cmp	r5, #7
 8009b0a:	d197      	bne.n	8009a3c <_scanf_float+0x60>
 8009b0c:	2508      	movs	r5, #8
 8009b0e:	e029      	b.n	8009b64 <_scanf_float+0x188>
 8009b10:	2b74      	cmp	r3, #116	; 0x74
 8009b12:	d06f      	beq.n	8009bf4 <_scanf_float+0x218>
 8009b14:	2b79      	cmp	r3, #121	; 0x79
 8009b16:	e7f6      	b.n	8009b06 <_scanf_float+0x12a>
 8009b18:	6821      	ldr	r1, [r4, #0]
 8009b1a:	05c8      	lsls	r0, r1, #23
 8009b1c:	d51a      	bpl.n	8009b54 <_scanf_float+0x178>
 8009b1e:	9b02      	ldr	r3, [sp, #8]
 8009b20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009b24:	6021      	str	r1, [r4, #0]
 8009b26:	f109 0901 	add.w	r9, r9, #1
 8009b2a:	b11b      	cbz	r3, 8009b34 <_scanf_float+0x158>
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	3201      	adds	r2, #1
 8009b30:	9302      	str	r3, [sp, #8]
 8009b32:	60a2      	str	r2, [r4, #8]
 8009b34:	68a3      	ldr	r3, [r4, #8]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	60a3      	str	r3, [r4, #8]
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	607b      	str	r3, [r7, #4]
 8009b48:	f340 8084 	ble.w	8009c54 <_scanf_float+0x278>
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	603b      	str	r3, [r7, #0]
 8009b52:	e766      	b.n	8009a22 <_scanf_float+0x46>
 8009b54:	eb1a 0f05 	cmn.w	sl, r5
 8009b58:	f47f af70 	bne.w	8009a3c <_scanf_float+0x60>
 8009b5c:	6822      	ldr	r2, [r4, #0]
 8009b5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009b62:	6022      	str	r2, [r4, #0]
 8009b64:	f806 3b01 	strb.w	r3, [r6], #1
 8009b68:	e7e4      	b.n	8009b34 <_scanf_float+0x158>
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	0610      	lsls	r0, r2, #24
 8009b6e:	f57f af65 	bpl.w	8009a3c <_scanf_float+0x60>
 8009b72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b76:	e7f4      	b.n	8009b62 <_scanf_float+0x186>
 8009b78:	f1ba 0f00 	cmp.w	sl, #0
 8009b7c:	d10e      	bne.n	8009b9c <_scanf_float+0x1c0>
 8009b7e:	f1b9 0f00 	cmp.w	r9, #0
 8009b82:	d10e      	bne.n	8009ba2 <_scanf_float+0x1c6>
 8009b84:	6822      	ldr	r2, [r4, #0]
 8009b86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009b8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009b8e:	d108      	bne.n	8009ba2 <_scanf_float+0x1c6>
 8009b90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b94:	6022      	str	r2, [r4, #0]
 8009b96:	f04f 0a01 	mov.w	sl, #1
 8009b9a:	e7e3      	b.n	8009b64 <_scanf_float+0x188>
 8009b9c:	f1ba 0f02 	cmp.w	sl, #2
 8009ba0:	d055      	beq.n	8009c4e <_scanf_float+0x272>
 8009ba2:	2d01      	cmp	r5, #1
 8009ba4:	d002      	beq.n	8009bac <_scanf_float+0x1d0>
 8009ba6:	2d04      	cmp	r5, #4
 8009ba8:	f47f af48 	bne.w	8009a3c <_scanf_float+0x60>
 8009bac:	3501      	adds	r5, #1
 8009bae:	b2ed      	uxtb	r5, r5
 8009bb0:	e7d8      	b.n	8009b64 <_scanf_float+0x188>
 8009bb2:	f1ba 0f01 	cmp.w	sl, #1
 8009bb6:	f47f af41 	bne.w	8009a3c <_scanf_float+0x60>
 8009bba:	f04f 0a02 	mov.w	sl, #2
 8009bbe:	e7d1      	b.n	8009b64 <_scanf_float+0x188>
 8009bc0:	b97d      	cbnz	r5, 8009be2 <_scanf_float+0x206>
 8009bc2:	f1b9 0f00 	cmp.w	r9, #0
 8009bc6:	f47f af3c 	bne.w	8009a42 <_scanf_float+0x66>
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009bd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009bd4:	f47f af39 	bne.w	8009a4a <_scanf_float+0x6e>
 8009bd8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009bdc:	6022      	str	r2, [r4, #0]
 8009bde:	2501      	movs	r5, #1
 8009be0:	e7c0      	b.n	8009b64 <_scanf_float+0x188>
 8009be2:	2d03      	cmp	r5, #3
 8009be4:	d0e2      	beq.n	8009bac <_scanf_float+0x1d0>
 8009be6:	2d05      	cmp	r5, #5
 8009be8:	e7de      	b.n	8009ba8 <_scanf_float+0x1cc>
 8009bea:	2d02      	cmp	r5, #2
 8009bec:	f47f af26 	bne.w	8009a3c <_scanf_float+0x60>
 8009bf0:	2503      	movs	r5, #3
 8009bf2:	e7b7      	b.n	8009b64 <_scanf_float+0x188>
 8009bf4:	2d06      	cmp	r5, #6
 8009bf6:	f47f af21 	bne.w	8009a3c <_scanf_float+0x60>
 8009bfa:	2507      	movs	r5, #7
 8009bfc:	e7b2      	b.n	8009b64 <_scanf_float+0x188>
 8009bfe:	6822      	ldr	r2, [r4, #0]
 8009c00:	0591      	lsls	r1, r2, #22
 8009c02:	f57f af1b 	bpl.w	8009a3c <_scanf_float+0x60>
 8009c06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c10:	e7a8      	b.n	8009b64 <_scanf_float+0x188>
 8009c12:	6822      	ldr	r2, [r4, #0]
 8009c14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009c18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009c1c:	d006      	beq.n	8009c2c <_scanf_float+0x250>
 8009c1e:	0550      	lsls	r0, r2, #21
 8009c20:	f57f af0c 	bpl.w	8009a3c <_scanf_float+0x60>
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	f43f af0f 	beq.w	8009a4a <_scanf_float+0x6e>
 8009c2c:	0591      	lsls	r1, r2, #22
 8009c2e:	bf58      	it	pl
 8009c30:	9901      	ldrpl	r1, [sp, #4]
 8009c32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009c36:	bf58      	it	pl
 8009c38:	eba9 0101 	subpl.w	r1, r9, r1
 8009c3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009c40:	bf58      	it	pl
 8009c42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009c46:	6022      	str	r2, [r4, #0]
 8009c48:	f04f 0900 	mov.w	r9, #0
 8009c4c:	e78a      	b.n	8009b64 <_scanf_float+0x188>
 8009c4e:	f04f 0a03 	mov.w	sl, #3
 8009c52:	e787      	b.n	8009b64 <_scanf_float+0x188>
 8009c54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c58:	4639      	mov	r1, r7
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4798      	blx	r3
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f43f aedf 	beq.w	8009a22 <_scanf_float+0x46>
 8009c64:	e6ea      	b.n	8009a3c <_scanf_float+0x60>
 8009c66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c6e:	463a      	mov	r2, r7
 8009c70:	4640      	mov	r0, r8
 8009c72:	4798      	blx	r3
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	6123      	str	r3, [r4, #16]
 8009c7a:	e6ec      	b.n	8009a56 <_scanf_float+0x7a>
 8009c7c:	1e6b      	subs	r3, r5, #1
 8009c7e:	2b06      	cmp	r3, #6
 8009c80:	d825      	bhi.n	8009cce <_scanf_float+0x2f2>
 8009c82:	2d02      	cmp	r5, #2
 8009c84:	d836      	bhi.n	8009cf4 <_scanf_float+0x318>
 8009c86:	455e      	cmp	r6, fp
 8009c88:	f67f aee8 	bls.w	8009a5c <_scanf_float+0x80>
 8009c8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c94:	463a      	mov	r2, r7
 8009c96:	4640      	mov	r0, r8
 8009c98:	4798      	blx	r3
 8009c9a:	6923      	ldr	r3, [r4, #16]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	6123      	str	r3, [r4, #16]
 8009ca0:	e7f1      	b.n	8009c86 <_scanf_float+0x2aa>
 8009ca2:	9802      	ldr	r0, [sp, #8]
 8009ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ca8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009cac:	9002      	str	r0, [sp, #8]
 8009cae:	463a      	mov	r2, r7
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	4798      	blx	r3
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cbe:	fa5f fa8a 	uxtb.w	sl, sl
 8009cc2:	f1ba 0f02 	cmp.w	sl, #2
 8009cc6:	d1ec      	bne.n	8009ca2 <_scanf_float+0x2c6>
 8009cc8:	3d03      	subs	r5, #3
 8009cca:	b2ed      	uxtb	r5, r5
 8009ccc:	1b76      	subs	r6, r6, r5
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	05da      	lsls	r2, r3, #23
 8009cd2:	d52f      	bpl.n	8009d34 <_scanf_float+0x358>
 8009cd4:	055b      	lsls	r3, r3, #21
 8009cd6:	d510      	bpl.n	8009cfa <_scanf_float+0x31e>
 8009cd8:	455e      	cmp	r6, fp
 8009cda:	f67f aebf 	bls.w	8009a5c <_scanf_float+0x80>
 8009cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ce2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ce6:	463a      	mov	r2, r7
 8009ce8:	4640      	mov	r0, r8
 8009cea:	4798      	blx	r3
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	6123      	str	r3, [r4, #16]
 8009cf2:	e7f1      	b.n	8009cd8 <_scanf_float+0x2fc>
 8009cf4:	46aa      	mov	sl, r5
 8009cf6:	9602      	str	r6, [sp, #8]
 8009cf8:	e7df      	b.n	8009cba <_scanf_float+0x2de>
 8009cfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	2965      	cmp	r1, #101	; 0x65
 8009d02:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d06:	f106 35ff 	add.w	r5, r6, #4294967295
 8009d0a:	6123      	str	r3, [r4, #16]
 8009d0c:	d00c      	beq.n	8009d28 <_scanf_float+0x34c>
 8009d0e:	2945      	cmp	r1, #69	; 0x45
 8009d10:	d00a      	beq.n	8009d28 <_scanf_float+0x34c>
 8009d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d16:	463a      	mov	r2, r7
 8009d18:	4640      	mov	r0, r8
 8009d1a:	4798      	blx	r3
 8009d1c:	6923      	ldr	r3, [r4, #16]
 8009d1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	1eb5      	subs	r5, r6, #2
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d2c:	463a      	mov	r2, r7
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4798      	blx	r3
 8009d32:	462e      	mov	r6, r5
 8009d34:	6825      	ldr	r5, [r4, #0]
 8009d36:	f015 0510 	ands.w	r5, r5, #16
 8009d3a:	d159      	bne.n	8009df0 <_scanf_float+0x414>
 8009d3c:	7035      	strb	r5, [r6, #0]
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d48:	d11b      	bne.n	8009d82 <_scanf_float+0x3a6>
 8009d4a:	9b01      	ldr	r3, [sp, #4]
 8009d4c:	454b      	cmp	r3, r9
 8009d4e:	eba3 0209 	sub.w	r2, r3, r9
 8009d52:	d123      	bne.n	8009d9c <_scanf_float+0x3c0>
 8009d54:	2200      	movs	r2, #0
 8009d56:	4659      	mov	r1, fp
 8009d58:	4640      	mov	r0, r8
 8009d5a:	f000 fe97 	bl	800aa8c <_strtod_r>
 8009d5e:	6822      	ldr	r2, [r4, #0]
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	f012 0f02 	tst.w	r2, #2
 8009d66:	ec57 6b10 	vmov	r6, r7, d0
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	d021      	beq.n	8009db2 <_scanf_float+0x3d6>
 8009d6e:	9903      	ldr	r1, [sp, #12]
 8009d70:	1d1a      	adds	r2, r3, #4
 8009d72:	600a      	str	r2, [r1, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	e9c3 6700 	strd	r6, r7, [r3]
 8009d7a:	68e3      	ldr	r3, [r4, #12]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	60e3      	str	r3, [r4, #12]
 8009d80:	e66d      	b.n	8009a5e <_scanf_float+0x82>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0e5      	beq.n	8009d54 <_scanf_float+0x378>
 8009d88:	9905      	ldr	r1, [sp, #20]
 8009d8a:	230a      	movs	r3, #10
 8009d8c:	462a      	mov	r2, r5
 8009d8e:	3101      	adds	r1, #1
 8009d90:	4640      	mov	r0, r8
 8009d92:	f000 ff03 	bl	800ab9c <_strtol_r>
 8009d96:	9b04      	ldr	r3, [sp, #16]
 8009d98:	9e05      	ldr	r6, [sp, #20]
 8009d9a:	1ac2      	subs	r2, r0, r3
 8009d9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009da0:	429e      	cmp	r6, r3
 8009da2:	bf28      	it	cs
 8009da4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009da8:	4912      	ldr	r1, [pc, #72]	; (8009df4 <_scanf_float+0x418>)
 8009daa:	4630      	mov	r0, r6
 8009dac:	f000 f82c 	bl	8009e08 <siprintf>
 8009db0:	e7d0      	b.n	8009d54 <_scanf_float+0x378>
 8009db2:	9903      	ldr	r1, [sp, #12]
 8009db4:	f012 0f04 	tst.w	r2, #4
 8009db8:	f103 0204 	add.w	r2, r3, #4
 8009dbc:	600a      	str	r2, [r1, #0]
 8009dbe:	d1d9      	bne.n	8009d74 <_scanf_float+0x398>
 8009dc0:	f8d3 8000 	ldr.w	r8, [r3]
 8009dc4:	ee10 2a10 	vmov	r2, s0
 8009dc8:	ee10 0a10 	vmov	r0, s0
 8009dcc:	463b      	mov	r3, r7
 8009dce:	4639      	mov	r1, r7
 8009dd0:	f7f6 fecc 	bl	8000b6c <__aeabi_dcmpun>
 8009dd4:	b128      	cbz	r0, 8009de2 <_scanf_float+0x406>
 8009dd6:	4808      	ldr	r0, [pc, #32]	; (8009df8 <_scanf_float+0x41c>)
 8009dd8:	f000 f810 	bl	8009dfc <nanf>
 8009ddc:	ed88 0a00 	vstr	s0, [r8]
 8009de0:	e7cb      	b.n	8009d7a <_scanf_float+0x39e>
 8009de2:	4630      	mov	r0, r6
 8009de4:	4639      	mov	r1, r7
 8009de6:	f7f6 ff1f 	bl	8000c28 <__aeabi_d2f>
 8009dea:	f8c8 0000 	str.w	r0, [r8]
 8009dee:	e7c4      	b.n	8009d7a <_scanf_float+0x39e>
 8009df0:	2500      	movs	r5, #0
 8009df2:	e634      	b.n	8009a5e <_scanf_float+0x82>
 8009df4:	0800dc38 	.word	0x0800dc38
 8009df8:	0800e040 	.word	0x0800e040

08009dfc <nanf>:
 8009dfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e04 <nanf+0x8>
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	7fc00000 	.word	0x7fc00000

08009e08 <siprintf>:
 8009e08:	b40e      	push	{r1, r2, r3}
 8009e0a:	b500      	push	{lr}
 8009e0c:	b09c      	sub	sp, #112	; 0x70
 8009e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009e10:	9002      	str	r0, [sp, #8]
 8009e12:	9006      	str	r0, [sp, #24]
 8009e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e18:	4809      	ldr	r0, [pc, #36]	; (8009e40 <siprintf+0x38>)
 8009e1a:	9107      	str	r1, [sp, #28]
 8009e1c:	9104      	str	r1, [sp, #16]
 8009e1e:	4909      	ldr	r1, [pc, #36]	; (8009e44 <siprintf+0x3c>)
 8009e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e24:	9105      	str	r1, [sp, #20]
 8009e26:	6800      	ldr	r0, [r0, #0]
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	a902      	add	r1, sp, #8
 8009e2c:	f002 fee2 	bl	800cbf4 <_svfiprintf_r>
 8009e30:	9b02      	ldr	r3, [sp, #8]
 8009e32:	2200      	movs	r2, #0
 8009e34:	701a      	strb	r2, [r3, #0]
 8009e36:	b01c      	add	sp, #112	; 0x70
 8009e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e3c:	b003      	add	sp, #12
 8009e3e:	4770      	bx	lr
 8009e40:	20000024 	.word	0x20000024
 8009e44:	ffff0208 	.word	0xffff0208

08009e48 <sulp>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	460d      	mov	r5, r1
 8009e4e:	ec45 4b10 	vmov	d0, r4, r5
 8009e52:	4616      	mov	r6, r2
 8009e54:	f002 fc2c 	bl	800c6b0 <__ulp>
 8009e58:	ec51 0b10 	vmov	r0, r1, d0
 8009e5c:	b17e      	cbz	r6, 8009e7e <sulp+0x36>
 8009e5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009e62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd09      	ble.n	8009e7e <sulp+0x36>
 8009e6a:	051b      	lsls	r3, r3, #20
 8009e6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009e70:	2400      	movs	r4, #0
 8009e72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009e76:	4622      	mov	r2, r4
 8009e78:	462b      	mov	r3, r5
 8009e7a:	f7f6 fbdd 	bl	8000638 <__aeabi_dmul>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}

08009e80 <_strtod_l>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	ed2d 8b02 	vpush	{d8}
 8009e88:	b09d      	sub	sp, #116	; 0x74
 8009e8a:	461f      	mov	r7, r3
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9318      	str	r3, [sp, #96]	; 0x60
 8009e90:	4ba2      	ldr	r3, [pc, #648]	; (800a11c <_strtod_l+0x29c>)
 8009e92:	9213      	str	r2, [sp, #76]	; 0x4c
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	4688      	mov	r8, r1
 8009e9e:	f7f6 f9b7 	bl	8000210 <strlen>
 8009ea2:	f04f 0a00 	mov.w	sl, #0
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	f04f 0b00 	mov.w	fp, #0
 8009eac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009eb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eb2:	781a      	ldrb	r2, [r3, #0]
 8009eb4:	2a2b      	cmp	r2, #43	; 0x2b
 8009eb6:	d04e      	beq.n	8009f56 <_strtod_l+0xd6>
 8009eb8:	d83b      	bhi.n	8009f32 <_strtod_l+0xb2>
 8009eba:	2a0d      	cmp	r2, #13
 8009ebc:	d834      	bhi.n	8009f28 <_strtod_l+0xa8>
 8009ebe:	2a08      	cmp	r2, #8
 8009ec0:	d834      	bhi.n	8009f2c <_strtod_l+0xac>
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	d03e      	beq.n	8009f44 <_strtod_l+0xc4>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8009eca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009ecc:	7833      	ldrb	r3, [r6, #0]
 8009ece:	2b30      	cmp	r3, #48	; 0x30
 8009ed0:	f040 80b0 	bne.w	800a034 <_strtod_l+0x1b4>
 8009ed4:	7873      	ldrb	r3, [r6, #1]
 8009ed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009eda:	2b58      	cmp	r3, #88	; 0x58
 8009edc:	d168      	bne.n	8009fb0 <_strtod_l+0x130>
 8009ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	ab18      	add	r3, sp, #96	; 0x60
 8009ee4:	9702      	str	r7, [sp, #8]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	4a8d      	ldr	r2, [pc, #564]	; (800a120 <_strtod_l+0x2a0>)
 8009eea:	ab19      	add	r3, sp, #100	; 0x64
 8009eec:	a917      	add	r1, sp, #92	; 0x5c
 8009eee:	4620      	mov	r0, r4
 8009ef0:	f001 fd38 	bl	800b964 <__gethex>
 8009ef4:	f010 0707 	ands.w	r7, r0, #7
 8009ef8:	4605      	mov	r5, r0
 8009efa:	d005      	beq.n	8009f08 <_strtod_l+0x88>
 8009efc:	2f06      	cmp	r7, #6
 8009efe:	d12c      	bne.n	8009f5a <_strtod_l+0xda>
 8009f00:	3601      	adds	r6, #1
 8009f02:	2300      	movs	r3, #0
 8009f04:	9617      	str	r6, [sp, #92]	; 0x5c
 8009f06:	930a      	str	r3, [sp, #40]	; 0x28
 8009f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f040 8590 	bne.w	800aa30 <_strtod_l+0xbb0>
 8009f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f12:	b1eb      	cbz	r3, 8009f50 <_strtod_l+0xd0>
 8009f14:	4652      	mov	r2, sl
 8009f16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009f1a:	ec43 2b10 	vmov	d0, r2, r3
 8009f1e:	b01d      	add	sp, #116	; 0x74
 8009f20:	ecbd 8b02 	vpop	{d8}
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	2a20      	cmp	r2, #32
 8009f2a:	d1cc      	bne.n	8009ec6 <_strtod_l+0x46>
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f30:	e7be      	b.n	8009eb0 <_strtod_l+0x30>
 8009f32:	2a2d      	cmp	r2, #45	; 0x2d
 8009f34:	d1c7      	bne.n	8009ec6 <_strtod_l+0x46>
 8009f36:	2201      	movs	r2, #1
 8009f38:	920a      	str	r2, [sp, #40]	; 0x28
 8009f3a:	1c5a      	adds	r2, r3, #1
 8009f3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f3e:	785b      	ldrb	r3, [r3, #1]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1c2      	bne.n	8009eca <_strtod_l+0x4a>
 8009f44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f46:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f040 856e 	bne.w	800aa2c <_strtod_l+0xbac>
 8009f50:	4652      	mov	r2, sl
 8009f52:	465b      	mov	r3, fp
 8009f54:	e7e1      	b.n	8009f1a <_strtod_l+0x9a>
 8009f56:	2200      	movs	r2, #0
 8009f58:	e7ee      	b.n	8009f38 <_strtod_l+0xb8>
 8009f5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009f5c:	b13a      	cbz	r2, 8009f6e <_strtod_l+0xee>
 8009f5e:	2135      	movs	r1, #53	; 0x35
 8009f60:	a81a      	add	r0, sp, #104	; 0x68
 8009f62:	f002 fcb0 	bl	800c8c6 <__copybits>
 8009f66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f002 f86f 	bl	800c04c <_Bfree>
 8009f6e:	3f01      	subs	r7, #1
 8009f70:	2f04      	cmp	r7, #4
 8009f72:	d806      	bhi.n	8009f82 <_strtod_l+0x102>
 8009f74:	e8df f007 	tbb	[pc, r7]
 8009f78:	1714030a 	.word	0x1714030a
 8009f7c:	0a          	.byte	0x0a
 8009f7d:	00          	.byte	0x00
 8009f7e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009f82:	0728      	lsls	r0, r5, #28
 8009f84:	d5c0      	bpl.n	8009f08 <_strtod_l+0x88>
 8009f86:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009f8a:	e7bd      	b.n	8009f08 <_strtod_l+0x88>
 8009f8c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009f90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f9e:	e7f0      	b.n	8009f82 <_strtod_l+0x102>
 8009fa0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a124 <_strtod_l+0x2a4>
 8009fa4:	e7ed      	b.n	8009f82 <_strtod_l+0x102>
 8009fa6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009faa:	f04f 3aff 	mov.w	sl, #4294967295
 8009fae:	e7e8      	b.n	8009f82 <_strtod_l+0x102>
 8009fb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	2b30      	cmp	r3, #48	; 0x30
 8009fba:	d0f9      	beq.n	8009fb0 <_strtod_l+0x130>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d0a3      	beq.n	8009f08 <_strtod_l+0x88>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f04f 0900 	mov.w	r9, #0
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fca:	9308      	str	r3, [sp, #32]
 8009fcc:	f8cd 901c 	str.w	r9, [sp, #28]
 8009fd0:	464f      	mov	r7, r9
 8009fd2:	220a      	movs	r2, #10
 8009fd4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009fd6:	7806      	ldrb	r6, [r0, #0]
 8009fd8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009fdc:	b2d9      	uxtb	r1, r3
 8009fde:	2909      	cmp	r1, #9
 8009fe0:	d92a      	bls.n	800a038 <_strtod_l+0x1b8>
 8009fe2:	9905      	ldr	r1, [sp, #20]
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	f002 ff1f 	bl	800ce28 <strncmp>
 8009fea:	b398      	cbz	r0, 800a054 <_strtod_l+0x1d4>
 8009fec:	2000      	movs	r0, #0
 8009fee:	4632      	mov	r2, r6
 8009ff0:	463d      	mov	r5, r7
 8009ff2:	9005      	str	r0, [sp, #20]
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2a65      	cmp	r2, #101	; 0x65
 8009ff8:	d001      	beq.n	8009ffe <_strtod_l+0x17e>
 8009ffa:	2a45      	cmp	r2, #69	; 0x45
 8009ffc:	d118      	bne.n	800a030 <_strtod_l+0x1b0>
 8009ffe:	b91d      	cbnz	r5, 800a008 <_strtod_l+0x188>
 800a000:	9a04      	ldr	r2, [sp, #16]
 800a002:	4302      	orrs	r2, r0
 800a004:	d09e      	beq.n	8009f44 <_strtod_l+0xc4>
 800a006:	2500      	movs	r5, #0
 800a008:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a00c:	f108 0201 	add.w	r2, r8, #1
 800a010:	9217      	str	r2, [sp, #92]	; 0x5c
 800a012:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a016:	2a2b      	cmp	r2, #43	; 0x2b
 800a018:	d075      	beq.n	800a106 <_strtod_l+0x286>
 800a01a:	2a2d      	cmp	r2, #45	; 0x2d
 800a01c:	d07b      	beq.n	800a116 <_strtod_l+0x296>
 800a01e:	f04f 0c00 	mov.w	ip, #0
 800a022:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a026:	2909      	cmp	r1, #9
 800a028:	f240 8082 	bls.w	800a130 <_strtod_l+0x2b0>
 800a02c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a030:	2600      	movs	r6, #0
 800a032:	e09d      	b.n	800a170 <_strtod_l+0x2f0>
 800a034:	2300      	movs	r3, #0
 800a036:	e7c4      	b.n	8009fc2 <_strtod_l+0x142>
 800a038:	2f08      	cmp	r7, #8
 800a03a:	bfd8      	it	le
 800a03c:	9907      	ldrle	r1, [sp, #28]
 800a03e:	f100 0001 	add.w	r0, r0, #1
 800a042:	bfda      	itte	le
 800a044:	fb02 3301 	mlale	r3, r2, r1, r3
 800a048:	9307      	strle	r3, [sp, #28]
 800a04a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a04e:	3701      	adds	r7, #1
 800a050:	9017      	str	r0, [sp, #92]	; 0x5c
 800a052:	e7bf      	b.n	8009fd4 <_strtod_l+0x154>
 800a054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a056:	195a      	adds	r2, r3, r5
 800a058:	9217      	str	r2, [sp, #92]	; 0x5c
 800a05a:	5d5a      	ldrb	r2, [r3, r5]
 800a05c:	2f00      	cmp	r7, #0
 800a05e:	d037      	beq.n	800a0d0 <_strtod_l+0x250>
 800a060:	9005      	str	r0, [sp, #20]
 800a062:	463d      	mov	r5, r7
 800a064:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a068:	2b09      	cmp	r3, #9
 800a06a:	d912      	bls.n	800a092 <_strtod_l+0x212>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e7c2      	b.n	8009ff6 <_strtod_l+0x176>
 800a070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	9217      	str	r2, [sp, #92]	; 0x5c
 800a076:	785a      	ldrb	r2, [r3, #1]
 800a078:	3001      	adds	r0, #1
 800a07a:	2a30      	cmp	r2, #48	; 0x30
 800a07c:	d0f8      	beq.n	800a070 <_strtod_l+0x1f0>
 800a07e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a082:	2b08      	cmp	r3, #8
 800a084:	f200 84d9 	bhi.w	800aa3a <_strtod_l+0xbba>
 800a088:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a08a:	9005      	str	r0, [sp, #20]
 800a08c:	2000      	movs	r0, #0
 800a08e:	9308      	str	r3, [sp, #32]
 800a090:	4605      	mov	r5, r0
 800a092:	3a30      	subs	r2, #48	; 0x30
 800a094:	f100 0301 	add.w	r3, r0, #1
 800a098:	d014      	beq.n	800a0c4 <_strtod_l+0x244>
 800a09a:	9905      	ldr	r1, [sp, #20]
 800a09c:	4419      	add	r1, r3
 800a09e:	9105      	str	r1, [sp, #20]
 800a0a0:	462b      	mov	r3, r5
 800a0a2:	eb00 0e05 	add.w	lr, r0, r5
 800a0a6:	210a      	movs	r1, #10
 800a0a8:	4573      	cmp	r3, lr
 800a0aa:	d113      	bne.n	800a0d4 <_strtod_l+0x254>
 800a0ac:	182b      	adds	r3, r5, r0
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	f105 0501 	add.w	r5, r5, #1
 800a0b4:	4405      	add	r5, r0
 800a0b6:	dc1c      	bgt.n	800a0f2 <_strtod_l+0x272>
 800a0b8:	9907      	ldr	r1, [sp, #28]
 800a0ba:	230a      	movs	r3, #10
 800a0bc:	fb03 2301 	mla	r3, r3, r1, r2
 800a0c0:	9307      	str	r3, [sp, #28]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0c6:	1c51      	adds	r1, r2, #1
 800a0c8:	9117      	str	r1, [sp, #92]	; 0x5c
 800a0ca:	7852      	ldrb	r2, [r2, #1]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	e7c9      	b.n	800a064 <_strtod_l+0x1e4>
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	e7d2      	b.n	800a07a <_strtod_l+0x1fa>
 800a0d4:	2b08      	cmp	r3, #8
 800a0d6:	dc04      	bgt.n	800a0e2 <_strtod_l+0x262>
 800a0d8:	9e07      	ldr	r6, [sp, #28]
 800a0da:	434e      	muls	r6, r1
 800a0dc:	9607      	str	r6, [sp, #28]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	e7e2      	b.n	800a0a8 <_strtod_l+0x228>
 800a0e2:	f103 0c01 	add.w	ip, r3, #1
 800a0e6:	f1bc 0f10 	cmp.w	ip, #16
 800a0ea:	bfd8      	it	le
 800a0ec:	fb01 f909 	mulle.w	r9, r1, r9
 800a0f0:	e7f5      	b.n	800a0de <_strtod_l+0x25e>
 800a0f2:	2d10      	cmp	r5, #16
 800a0f4:	bfdc      	itt	le
 800a0f6:	230a      	movle	r3, #10
 800a0f8:	fb03 2909 	mlale	r9, r3, r9, r2
 800a0fc:	e7e1      	b.n	800a0c2 <_strtod_l+0x242>
 800a0fe:	2300      	movs	r3, #0
 800a100:	9305      	str	r3, [sp, #20]
 800a102:	2301      	movs	r3, #1
 800a104:	e77c      	b.n	800a000 <_strtod_l+0x180>
 800a106:	f04f 0c00 	mov.w	ip, #0
 800a10a:	f108 0202 	add.w	r2, r8, #2
 800a10e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a110:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a114:	e785      	b.n	800a022 <_strtod_l+0x1a2>
 800a116:	f04f 0c01 	mov.w	ip, #1
 800a11a:	e7f6      	b.n	800a10a <_strtod_l+0x28a>
 800a11c:	0800de88 	.word	0x0800de88
 800a120:	0800dc40 	.word	0x0800dc40
 800a124:	7ff00000 	.word	0x7ff00000
 800a128:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a12a:	1c51      	adds	r1, r2, #1
 800a12c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a12e:	7852      	ldrb	r2, [r2, #1]
 800a130:	2a30      	cmp	r2, #48	; 0x30
 800a132:	d0f9      	beq.n	800a128 <_strtod_l+0x2a8>
 800a134:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a138:	2908      	cmp	r1, #8
 800a13a:	f63f af79 	bhi.w	800a030 <_strtod_l+0x1b0>
 800a13e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a144:	9206      	str	r2, [sp, #24]
 800a146:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a148:	1c51      	adds	r1, r2, #1
 800a14a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a14c:	7852      	ldrb	r2, [r2, #1]
 800a14e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a152:	2e09      	cmp	r6, #9
 800a154:	d937      	bls.n	800a1c6 <_strtod_l+0x346>
 800a156:	9e06      	ldr	r6, [sp, #24]
 800a158:	1b89      	subs	r1, r1, r6
 800a15a:	2908      	cmp	r1, #8
 800a15c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a160:	dc02      	bgt.n	800a168 <_strtod_l+0x2e8>
 800a162:	4576      	cmp	r6, lr
 800a164:	bfa8      	it	ge
 800a166:	4676      	movge	r6, lr
 800a168:	f1bc 0f00 	cmp.w	ip, #0
 800a16c:	d000      	beq.n	800a170 <_strtod_l+0x2f0>
 800a16e:	4276      	negs	r6, r6
 800a170:	2d00      	cmp	r5, #0
 800a172:	d14d      	bne.n	800a210 <_strtod_l+0x390>
 800a174:	9904      	ldr	r1, [sp, #16]
 800a176:	4301      	orrs	r1, r0
 800a178:	f47f aec6 	bne.w	8009f08 <_strtod_l+0x88>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f47f aee1 	bne.w	8009f44 <_strtod_l+0xc4>
 800a182:	2a69      	cmp	r2, #105	; 0x69
 800a184:	d027      	beq.n	800a1d6 <_strtod_l+0x356>
 800a186:	dc24      	bgt.n	800a1d2 <_strtod_l+0x352>
 800a188:	2a49      	cmp	r2, #73	; 0x49
 800a18a:	d024      	beq.n	800a1d6 <_strtod_l+0x356>
 800a18c:	2a4e      	cmp	r2, #78	; 0x4e
 800a18e:	f47f aed9 	bne.w	8009f44 <_strtod_l+0xc4>
 800a192:	499f      	ldr	r1, [pc, #636]	; (800a410 <_strtod_l+0x590>)
 800a194:	a817      	add	r0, sp, #92	; 0x5c
 800a196:	f001 fe3d 	bl	800be14 <__match>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	f43f aed2 	beq.w	8009f44 <_strtod_l+0xc4>
 800a1a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b28      	cmp	r3, #40	; 0x28
 800a1a6:	d12d      	bne.n	800a204 <_strtod_l+0x384>
 800a1a8:	499a      	ldr	r1, [pc, #616]	; (800a414 <_strtod_l+0x594>)
 800a1aa:	aa1a      	add	r2, sp, #104	; 0x68
 800a1ac:	a817      	add	r0, sp, #92	; 0x5c
 800a1ae:	f001 fe45 	bl	800be3c <__hexnan>
 800a1b2:	2805      	cmp	r0, #5
 800a1b4:	d126      	bne.n	800a204 <_strtod_l+0x384>
 800a1b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a1bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a1c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a1c4:	e6a0      	b.n	8009f08 <_strtod_l+0x88>
 800a1c6:	210a      	movs	r1, #10
 800a1c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a1cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a1d0:	e7b9      	b.n	800a146 <_strtod_l+0x2c6>
 800a1d2:	2a6e      	cmp	r2, #110	; 0x6e
 800a1d4:	e7db      	b.n	800a18e <_strtod_l+0x30e>
 800a1d6:	4990      	ldr	r1, [pc, #576]	; (800a418 <_strtod_l+0x598>)
 800a1d8:	a817      	add	r0, sp, #92	; 0x5c
 800a1da:	f001 fe1b 	bl	800be14 <__match>
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	f43f aeb0 	beq.w	8009f44 <_strtod_l+0xc4>
 800a1e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1e6:	498d      	ldr	r1, [pc, #564]	; (800a41c <_strtod_l+0x59c>)
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	a817      	add	r0, sp, #92	; 0x5c
 800a1ec:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1ee:	f001 fe11 	bl	800be14 <__match>
 800a1f2:	b910      	cbnz	r0, 800a1fa <_strtod_l+0x37a>
 800a1f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800a1fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a42c <_strtod_l+0x5ac>
 800a1fe:	f04f 0a00 	mov.w	sl, #0
 800a202:	e681      	b.n	8009f08 <_strtod_l+0x88>
 800a204:	4886      	ldr	r0, [pc, #536]	; (800a420 <_strtod_l+0x5a0>)
 800a206:	f002 fdf7 	bl	800cdf8 <nan>
 800a20a:	ec5b ab10 	vmov	sl, fp, d0
 800a20e:	e67b      	b.n	8009f08 <_strtod_l+0x88>
 800a210:	9b05      	ldr	r3, [sp, #20]
 800a212:	9807      	ldr	r0, [sp, #28]
 800a214:	1af3      	subs	r3, r6, r3
 800a216:	2f00      	cmp	r7, #0
 800a218:	bf08      	it	eq
 800a21a:	462f      	moveq	r7, r5
 800a21c:	2d10      	cmp	r5, #16
 800a21e:	9306      	str	r3, [sp, #24]
 800a220:	46a8      	mov	r8, r5
 800a222:	bfa8      	it	ge
 800a224:	f04f 0810 	movge.w	r8, #16
 800a228:	f7f6 f98c 	bl	8000544 <__aeabi_ui2d>
 800a22c:	2d09      	cmp	r5, #9
 800a22e:	4682      	mov	sl, r0
 800a230:	468b      	mov	fp, r1
 800a232:	dd13      	ble.n	800a25c <_strtod_l+0x3dc>
 800a234:	4b7b      	ldr	r3, [pc, #492]	; (800a424 <_strtod_l+0x5a4>)
 800a236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a23a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a23e:	f7f6 f9fb 	bl	8000638 <__aeabi_dmul>
 800a242:	4682      	mov	sl, r0
 800a244:	4648      	mov	r0, r9
 800a246:	468b      	mov	fp, r1
 800a248:	f7f6 f97c 	bl	8000544 <__aeabi_ui2d>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4650      	mov	r0, sl
 800a252:	4659      	mov	r1, fp
 800a254:	f7f6 f83a 	bl	80002cc <__adddf3>
 800a258:	4682      	mov	sl, r0
 800a25a:	468b      	mov	fp, r1
 800a25c:	2d0f      	cmp	r5, #15
 800a25e:	dc38      	bgt.n	800a2d2 <_strtod_l+0x452>
 800a260:	9b06      	ldr	r3, [sp, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f43f ae50 	beq.w	8009f08 <_strtod_l+0x88>
 800a268:	dd24      	ble.n	800a2b4 <_strtod_l+0x434>
 800a26a:	2b16      	cmp	r3, #22
 800a26c:	dc0b      	bgt.n	800a286 <_strtod_l+0x406>
 800a26e:	496d      	ldr	r1, [pc, #436]	; (800a424 <_strtod_l+0x5a4>)
 800a270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a274:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a278:	4652      	mov	r2, sl
 800a27a:	465b      	mov	r3, fp
 800a27c:	f7f6 f9dc 	bl	8000638 <__aeabi_dmul>
 800a280:	4682      	mov	sl, r0
 800a282:	468b      	mov	fp, r1
 800a284:	e640      	b.n	8009f08 <_strtod_l+0x88>
 800a286:	9a06      	ldr	r2, [sp, #24]
 800a288:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a28c:	4293      	cmp	r3, r2
 800a28e:	db20      	blt.n	800a2d2 <_strtod_l+0x452>
 800a290:	4c64      	ldr	r4, [pc, #400]	; (800a424 <_strtod_l+0x5a4>)
 800a292:	f1c5 050f 	rsb	r5, r5, #15
 800a296:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a29a:	4652      	mov	r2, sl
 800a29c:	465b      	mov	r3, fp
 800a29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a2:	f7f6 f9c9 	bl	8000638 <__aeabi_dmul>
 800a2a6:	9b06      	ldr	r3, [sp, #24]
 800a2a8:	1b5d      	subs	r5, r3, r5
 800a2aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a2ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a2b2:	e7e3      	b.n	800a27c <_strtod_l+0x3fc>
 800a2b4:	9b06      	ldr	r3, [sp, #24]
 800a2b6:	3316      	adds	r3, #22
 800a2b8:	db0b      	blt.n	800a2d2 <_strtod_l+0x452>
 800a2ba:	9b05      	ldr	r3, [sp, #20]
 800a2bc:	1b9e      	subs	r6, r3, r6
 800a2be:	4b59      	ldr	r3, [pc, #356]	; (800a424 <_strtod_l+0x5a4>)
 800a2c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a2c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	f7f6 fade 	bl	800088c <__aeabi_ddiv>
 800a2d0:	e7d6      	b.n	800a280 <_strtod_l+0x400>
 800a2d2:	9b06      	ldr	r3, [sp, #24]
 800a2d4:	eba5 0808 	sub.w	r8, r5, r8
 800a2d8:	4498      	add	r8, r3
 800a2da:	f1b8 0f00 	cmp.w	r8, #0
 800a2de:	dd74      	ble.n	800a3ca <_strtod_l+0x54a>
 800a2e0:	f018 030f 	ands.w	r3, r8, #15
 800a2e4:	d00a      	beq.n	800a2fc <_strtod_l+0x47c>
 800a2e6:	494f      	ldr	r1, [pc, #316]	; (800a424 <_strtod_l+0x5a4>)
 800a2e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a2ec:	4652      	mov	r2, sl
 800a2ee:	465b      	mov	r3, fp
 800a2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2f4:	f7f6 f9a0 	bl	8000638 <__aeabi_dmul>
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	468b      	mov	fp, r1
 800a2fc:	f038 080f 	bics.w	r8, r8, #15
 800a300:	d04f      	beq.n	800a3a2 <_strtod_l+0x522>
 800a302:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a306:	dd22      	ble.n	800a34e <_strtod_l+0x4ce>
 800a308:	2500      	movs	r5, #0
 800a30a:	462e      	mov	r6, r5
 800a30c:	9507      	str	r5, [sp, #28]
 800a30e:	9505      	str	r5, [sp, #20]
 800a310:	2322      	movs	r3, #34	; 0x22
 800a312:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a42c <_strtod_l+0x5ac>
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	f04f 0a00 	mov.w	sl, #0
 800a31c:	9b07      	ldr	r3, [sp, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f43f adf2 	beq.w	8009f08 <_strtod_l+0x88>
 800a324:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a326:	4620      	mov	r0, r4
 800a328:	f001 fe90 	bl	800c04c <_Bfree>
 800a32c:	9905      	ldr	r1, [sp, #20]
 800a32e:	4620      	mov	r0, r4
 800a330:	f001 fe8c 	bl	800c04c <_Bfree>
 800a334:	4631      	mov	r1, r6
 800a336:	4620      	mov	r0, r4
 800a338:	f001 fe88 	bl	800c04c <_Bfree>
 800a33c:	9907      	ldr	r1, [sp, #28]
 800a33e:	4620      	mov	r0, r4
 800a340:	f001 fe84 	bl	800c04c <_Bfree>
 800a344:	4629      	mov	r1, r5
 800a346:	4620      	mov	r0, r4
 800a348:	f001 fe80 	bl	800c04c <_Bfree>
 800a34c:	e5dc      	b.n	8009f08 <_strtod_l+0x88>
 800a34e:	4b36      	ldr	r3, [pc, #216]	; (800a428 <_strtod_l+0x5a8>)
 800a350:	9304      	str	r3, [sp, #16]
 800a352:	2300      	movs	r3, #0
 800a354:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a358:	4650      	mov	r0, sl
 800a35a:	4659      	mov	r1, fp
 800a35c:	4699      	mov	r9, r3
 800a35e:	f1b8 0f01 	cmp.w	r8, #1
 800a362:	dc21      	bgt.n	800a3a8 <_strtod_l+0x528>
 800a364:	b10b      	cbz	r3, 800a36a <_strtod_l+0x4ea>
 800a366:	4682      	mov	sl, r0
 800a368:	468b      	mov	fp, r1
 800a36a:	4b2f      	ldr	r3, [pc, #188]	; (800a428 <_strtod_l+0x5a8>)
 800a36c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a370:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a374:	4652      	mov	r2, sl
 800a376:	465b      	mov	r3, fp
 800a378:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a37c:	f7f6 f95c 	bl	8000638 <__aeabi_dmul>
 800a380:	4b2a      	ldr	r3, [pc, #168]	; (800a42c <_strtod_l+0x5ac>)
 800a382:	460a      	mov	r2, r1
 800a384:	400b      	ands	r3, r1
 800a386:	492a      	ldr	r1, [pc, #168]	; (800a430 <_strtod_l+0x5b0>)
 800a388:	428b      	cmp	r3, r1
 800a38a:	4682      	mov	sl, r0
 800a38c:	d8bc      	bhi.n	800a308 <_strtod_l+0x488>
 800a38e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a392:	428b      	cmp	r3, r1
 800a394:	bf86      	itte	hi
 800a396:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a434 <_strtod_l+0x5b4>
 800a39a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a39e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	e084      	b.n	800a4b2 <_strtod_l+0x632>
 800a3a8:	f018 0f01 	tst.w	r8, #1
 800a3ac:	d005      	beq.n	800a3ba <_strtod_l+0x53a>
 800a3ae:	9b04      	ldr	r3, [sp, #16]
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f7f6 f940 	bl	8000638 <__aeabi_dmul>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	9a04      	ldr	r2, [sp, #16]
 800a3bc:	3208      	adds	r2, #8
 800a3be:	f109 0901 	add.w	r9, r9, #1
 800a3c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3c6:	9204      	str	r2, [sp, #16]
 800a3c8:	e7c9      	b.n	800a35e <_strtod_l+0x4de>
 800a3ca:	d0ea      	beq.n	800a3a2 <_strtod_l+0x522>
 800a3cc:	f1c8 0800 	rsb	r8, r8, #0
 800a3d0:	f018 020f 	ands.w	r2, r8, #15
 800a3d4:	d00a      	beq.n	800a3ec <_strtod_l+0x56c>
 800a3d6:	4b13      	ldr	r3, [pc, #76]	; (800a424 <_strtod_l+0x5a4>)
 800a3d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3dc:	4650      	mov	r0, sl
 800a3de:	4659      	mov	r1, fp
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f6 fa52 	bl	800088c <__aeabi_ddiv>
 800a3e8:	4682      	mov	sl, r0
 800a3ea:	468b      	mov	fp, r1
 800a3ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a3f0:	d0d7      	beq.n	800a3a2 <_strtod_l+0x522>
 800a3f2:	f1b8 0f1f 	cmp.w	r8, #31
 800a3f6:	dd1f      	ble.n	800a438 <_strtod_l+0x5b8>
 800a3f8:	2500      	movs	r5, #0
 800a3fa:	462e      	mov	r6, r5
 800a3fc:	9507      	str	r5, [sp, #28]
 800a3fe:	9505      	str	r5, [sp, #20]
 800a400:	2322      	movs	r3, #34	; 0x22
 800a402:	f04f 0a00 	mov.w	sl, #0
 800a406:	f04f 0b00 	mov.w	fp, #0
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	e786      	b.n	800a31c <_strtod_l+0x49c>
 800a40e:	bf00      	nop
 800a410:	0800dc11 	.word	0x0800dc11
 800a414:	0800dc54 	.word	0x0800dc54
 800a418:	0800dc09 	.word	0x0800dc09
 800a41c:	0800dd94 	.word	0x0800dd94
 800a420:	0800e040 	.word	0x0800e040
 800a424:	0800df20 	.word	0x0800df20
 800a428:	0800def8 	.word	0x0800def8
 800a42c:	7ff00000 	.word	0x7ff00000
 800a430:	7ca00000 	.word	0x7ca00000
 800a434:	7fefffff 	.word	0x7fefffff
 800a438:	f018 0310 	ands.w	r3, r8, #16
 800a43c:	bf18      	it	ne
 800a43e:	236a      	movne	r3, #106	; 0x6a
 800a440:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a7f0 <_strtod_l+0x970>
 800a444:	9304      	str	r3, [sp, #16]
 800a446:	4650      	mov	r0, sl
 800a448:	4659      	mov	r1, fp
 800a44a:	2300      	movs	r3, #0
 800a44c:	f018 0f01 	tst.w	r8, #1
 800a450:	d004      	beq.n	800a45c <_strtod_l+0x5dc>
 800a452:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a456:	f7f6 f8ef 	bl	8000638 <__aeabi_dmul>
 800a45a:	2301      	movs	r3, #1
 800a45c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a460:	f109 0908 	add.w	r9, r9, #8
 800a464:	d1f2      	bne.n	800a44c <_strtod_l+0x5cc>
 800a466:	b10b      	cbz	r3, 800a46c <_strtod_l+0x5ec>
 800a468:	4682      	mov	sl, r0
 800a46a:	468b      	mov	fp, r1
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	b1c3      	cbz	r3, 800a4a2 <_strtod_l+0x622>
 800a470:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a474:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a478:	2b00      	cmp	r3, #0
 800a47a:	4659      	mov	r1, fp
 800a47c:	dd11      	ble.n	800a4a2 <_strtod_l+0x622>
 800a47e:	2b1f      	cmp	r3, #31
 800a480:	f340 8124 	ble.w	800a6cc <_strtod_l+0x84c>
 800a484:	2b34      	cmp	r3, #52	; 0x34
 800a486:	bfde      	ittt	le
 800a488:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a48c:	f04f 33ff 	movle.w	r3, #4294967295
 800a490:	fa03 f202 	lslle.w	r2, r3, r2
 800a494:	f04f 0a00 	mov.w	sl, #0
 800a498:	bfcc      	ite	gt
 800a49a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a49e:	ea02 0b01 	andle.w	fp, r2, r1
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	4650      	mov	r0, sl
 800a4a8:	4659      	mov	r1, fp
 800a4aa:	f7f6 fb2d 	bl	8000b08 <__aeabi_dcmpeq>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d1a2      	bne.n	800a3f8 <_strtod_l+0x578>
 800a4b2:	9b07      	ldr	r3, [sp, #28]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	9908      	ldr	r1, [sp, #32]
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	463a      	mov	r2, r7
 800a4bc:	4620      	mov	r0, r4
 800a4be:	f001 fe2d 	bl	800c11c <__s2b>
 800a4c2:	9007      	str	r0, [sp, #28]
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	f43f af1f 	beq.w	800a308 <_strtod_l+0x488>
 800a4ca:	9b05      	ldr	r3, [sp, #20]
 800a4cc:	1b9e      	subs	r6, r3, r6
 800a4ce:	9b06      	ldr	r3, [sp, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bfb4      	ite	lt
 800a4d4:	4633      	movlt	r3, r6
 800a4d6:	2300      	movge	r3, #0
 800a4d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a4da:	9b06      	ldr	r3, [sp, #24]
 800a4dc:	2500      	movs	r5, #0
 800a4de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a4e2:	9312      	str	r3, [sp, #72]	; 0x48
 800a4e4:	462e      	mov	r6, r5
 800a4e6:	9b07      	ldr	r3, [sp, #28]
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	6859      	ldr	r1, [r3, #4]
 800a4ec:	f001 fd6e 	bl	800bfcc <_Balloc>
 800a4f0:	9005      	str	r0, [sp, #20]
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	f43f af0c 	beq.w	800a310 <_strtod_l+0x490>
 800a4f8:	9b07      	ldr	r3, [sp, #28]
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	3202      	adds	r2, #2
 800a4fe:	f103 010c 	add.w	r1, r3, #12
 800a502:	0092      	lsls	r2, r2, #2
 800a504:	300c      	adds	r0, #12
 800a506:	f001 fd53 	bl	800bfb0 <memcpy>
 800a50a:	ec4b ab10 	vmov	d0, sl, fp
 800a50e:	aa1a      	add	r2, sp, #104	; 0x68
 800a510:	a919      	add	r1, sp, #100	; 0x64
 800a512:	4620      	mov	r0, r4
 800a514:	f002 f948 	bl	800c7a8 <__d2b>
 800a518:	ec4b ab18 	vmov	d8, sl, fp
 800a51c:	9018      	str	r0, [sp, #96]	; 0x60
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f aef6 	beq.w	800a310 <_strtod_l+0x490>
 800a524:	2101      	movs	r1, #1
 800a526:	4620      	mov	r0, r4
 800a528:	f001 fe92 	bl	800c250 <__i2b>
 800a52c:	4606      	mov	r6, r0
 800a52e:	2800      	cmp	r0, #0
 800a530:	f43f aeee 	beq.w	800a310 <_strtod_l+0x490>
 800a534:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a536:	9904      	ldr	r1, [sp, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	bfab      	itete	ge
 800a53c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a53e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a540:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a542:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a546:	bfac      	ite	ge
 800a548:	eb03 0902 	addge.w	r9, r3, r2
 800a54c:	1ad7      	sublt	r7, r2, r3
 800a54e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a550:	eba3 0801 	sub.w	r8, r3, r1
 800a554:	4490      	add	r8, r2
 800a556:	4ba1      	ldr	r3, [pc, #644]	; (800a7dc <_strtod_l+0x95c>)
 800a558:	f108 38ff 	add.w	r8, r8, #4294967295
 800a55c:	4598      	cmp	r8, r3
 800a55e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a562:	f280 80c7 	bge.w	800a6f4 <_strtod_l+0x874>
 800a566:	eba3 0308 	sub.w	r3, r3, r8
 800a56a:	2b1f      	cmp	r3, #31
 800a56c:	eba2 0203 	sub.w	r2, r2, r3
 800a570:	f04f 0101 	mov.w	r1, #1
 800a574:	f300 80b1 	bgt.w	800a6da <_strtod_l+0x85a>
 800a578:	fa01 f303 	lsl.w	r3, r1, r3
 800a57c:	930d      	str	r3, [sp, #52]	; 0x34
 800a57e:	2300      	movs	r3, #0
 800a580:	9308      	str	r3, [sp, #32]
 800a582:	eb09 0802 	add.w	r8, r9, r2
 800a586:	9b04      	ldr	r3, [sp, #16]
 800a588:	45c1      	cmp	r9, r8
 800a58a:	4417      	add	r7, r2
 800a58c:	441f      	add	r7, r3
 800a58e:	464b      	mov	r3, r9
 800a590:	bfa8      	it	ge
 800a592:	4643      	movge	r3, r8
 800a594:	42bb      	cmp	r3, r7
 800a596:	bfa8      	it	ge
 800a598:	463b      	movge	r3, r7
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	bfc2      	ittt	gt
 800a59e:	eba8 0803 	subgt.w	r8, r8, r3
 800a5a2:	1aff      	subgt	r7, r7, r3
 800a5a4:	eba9 0903 	subgt.w	r9, r9, r3
 800a5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	dd17      	ble.n	800a5de <_strtod_l+0x75e>
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f001 ff0c 	bl	800c3d0 <__pow5mult>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f43f aea8 	beq.w	800a310 <_strtod_l+0x490>
 800a5c0:	4601      	mov	r1, r0
 800a5c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f001 fe59 	bl	800c27c <__multiply>
 800a5ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f43f ae9f 	beq.w	800a310 <_strtod_l+0x490>
 800a5d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f001 fd39 	bl	800c04c <_Bfree>
 800a5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5dc:	9318      	str	r3, [sp, #96]	; 0x60
 800a5de:	f1b8 0f00 	cmp.w	r8, #0
 800a5e2:	f300 808c 	bgt.w	800a6fe <_strtod_l+0x87e>
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	dd08      	ble.n	800a5fe <_strtod_l+0x77e>
 800a5ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5ee:	9905      	ldr	r1, [sp, #20]
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	f001 feed 	bl	800c3d0 <__pow5mult>
 800a5f6:	9005      	str	r0, [sp, #20]
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	f43f ae89 	beq.w	800a310 <_strtod_l+0x490>
 800a5fe:	2f00      	cmp	r7, #0
 800a600:	dd08      	ble.n	800a614 <_strtod_l+0x794>
 800a602:	9905      	ldr	r1, [sp, #20]
 800a604:	463a      	mov	r2, r7
 800a606:	4620      	mov	r0, r4
 800a608:	f001 ff3c 	bl	800c484 <__lshift>
 800a60c:	9005      	str	r0, [sp, #20]
 800a60e:	2800      	cmp	r0, #0
 800a610:	f43f ae7e 	beq.w	800a310 <_strtod_l+0x490>
 800a614:	f1b9 0f00 	cmp.w	r9, #0
 800a618:	dd08      	ble.n	800a62c <_strtod_l+0x7ac>
 800a61a:	4631      	mov	r1, r6
 800a61c:	464a      	mov	r2, r9
 800a61e:	4620      	mov	r0, r4
 800a620:	f001 ff30 	bl	800c484 <__lshift>
 800a624:	4606      	mov	r6, r0
 800a626:	2800      	cmp	r0, #0
 800a628:	f43f ae72 	beq.w	800a310 <_strtod_l+0x490>
 800a62c:	9a05      	ldr	r2, [sp, #20]
 800a62e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a630:	4620      	mov	r0, r4
 800a632:	f001 ffb3 	bl	800c59c <__mdiff>
 800a636:	4605      	mov	r5, r0
 800a638:	2800      	cmp	r0, #0
 800a63a:	f43f ae69 	beq.w	800a310 <_strtod_l+0x490>
 800a63e:	68c3      	ldr	r3, [r0, #12]
 800a640:	930b      	str	r3, [sp, #44]	; 0x2c
 800a642:	2300      	movs	r3, #0
 800a644:	60c3      	str	r3, [r0, #12]
 800a646:	4631      	mov	r1, r6
 800a648:	f001 ff8c 	bl	800c564 <__mcmp>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	da60      	bge.n	800a712 <_strtod_l+0x892>
 800a650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a652:	ea53 030a 	orrs.w	r3, r3, sl
 800a656:	f040 8082 	bne.w	800a75e <_strtod_l+0x8de>
 800a65a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d17d      	bne.n	800a75e <_strtod_l+0x8de>
 800a662:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a666:	0d1b      	lsrs	r3, r3, #20
 800a668:	051b      	lsls	r3, r3, #20
 800a66a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a66e:	d976      	bls.n	800a75e <_strtod_l+0x8de>
 800a670:	696b      	ldr	r3, [r5, #20]
 800a672:	b913      	cbnz	r3, 800a67a <_strtod_l+0x7fa>
 800a674:	692b      	ldr	r3, [r5, #16]
 800a676:	2b01      	cmp	r3, #1
 800a678:	dd71      	ble.n	800a75e <_strtod_l+0x8de>
 800a67a:	4629      	mov	r1, r5
 800a67c:	2201      	movs	r2, #1
 800a67e:	4620      	mov	r0, r4
 800a680:	f001 ff00 	bl	800c484 <__lshift>
 800a684:	4631      	mov	r1, r6
 800a686:	4605      	mov	r5, r0
 800a688:	f001 ff6c 	bl	800c564 <__mcmp>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	dd66      	ble.n	800a75e <_strtod_l+0x8de>
 800a690:	9904      	ldr	r1, [sp, #16]
 800a692:	4a53      	ldr	r2, [pc, #332]	; (800a7e0 <_strtod_l+0x960>)
 800a694:	465b      	mov	r3, fp
 800a696:	2900      	cmp	r1, #0
 800a698:	f000 8081 	beq.w	800a79e <_strtod_l+0x91e>
 800a69c:	ea02 010b 	and.w	r1, r2, fp
 800a6a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a6a4:	dc7b      	bgt.n	800a79e <_strtod_l+0x91e>
 800a6a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a6aa:	f77f aea9 	ble.w	800a400 <_strtod_l+0x580>
 800a6ae:	4b4d      	ldr	r3, [pc, #308]	; (800a7e4 <_strtod_l+0x964>)
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f7f5 ffbf 	bl	8000638 <__aeabi_dmul>
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4303      	orrs	r3, r0
 800a6be:	bf08      	it	eq
 800a6c0:	2322      	moveq	r3, #34	; 0x22
 800a6c2:	4682      	mov	sl, r0
 800a6c4:	468b      	mov	fp, r1
 800a6c6:	bf08      	it	eq
 800a6c8:	6023      	streq	r3, [r4, #0]
 800a6ca:	e62b      	b.n	800a324 <_strtod_l+0x4a4>
 800a6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d4:	ea03 0a0a 	and.w	sl, r3, sl
 800a6d8:	e6e3      	b.n	800a4a2 <_strtod_l+0x622>
 800a6da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a6de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a6e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a6e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a6ea:	fa01 f308 	lsl.w	r3, r1, r8
 800a6ee:	9308      	str	r3, [sp, #32]
 800a6f0:	910d      	str	r1, [sp, #52]	; 0x34
 800a6f2:	e746      	b.n	800a582 <_strtod_l+0x702>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	9308      	str	r3, [sp, #32]
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	930d      	str	r3, [sp, #52]	; 0x34
 800a6fc:	e741      	b.n	800a582 <_strtod_l+0x702>
 800a6fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a700:	4642      	mov	r2, r8
 800a702:	4620      	mov	r0, r4
 800a704:	f001 febe 	bl	800c484 <__lshift>
 800a708:	9018      	str	r0, [sp, #96]	; 0x60
 800a70a:	2800      	cmp	r0, #0
 800a70c:	f47f af6b 	bne.w	800a5e6 <_strtod_l+0x766>
 800a710:	e5fe      	b.n	800a310 <_strtod_l+0x490>
 800a712:	465f      	mov	r7, fp
 800a714:	d16e      	bne.n	800a7f4 <_strtod_l+0x974>
 800a716:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a718:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a71c:	b342      	cbz	r2, 800a770 <_strtod_l+0x8f0>
 800a71e:	4a32      	ldr	r2, [pc, #200]	; (800a7e8 <_strtod_l+0x968>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d128      	bne.n	800a776 <_strtod_l+0x8f6>
 800a724:	9b04      	ldr	r3, [sp, #16]
 800a726:	4651      	mov	r1, sl
 800a728:	b1eb      	cbz	r3, 800a766 <_strtod_l+0x8e6>
 800a72a:	4b2d      	ldr	r3, [pc, #180]	; (800a7e0 <_strtod_l+0x960>)
 800a72c:	403b      	ands	r3, r7
 800a72e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a732:	f04f 32ff 	mov.w	r2, #4294967295
 800a736:	d819      	bhi.n	800a76c <_strtod_l+0x8ec>
 800a738:	0d1b      	lsrs	r3, r3, #20
 800a73a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a73e:	fa02 f303 	lsl.w	r3, r2, r3
 800a742:	4299      	cmp	r1, r3
 800a744:	d117      	bne.n	800a776 <_strtod_l+0x8f6>
 800a746:	4b29      	ldr	r3, [pc, #164]	; (800a7ec <_strtod_l+0x96c>)
 800a748:	429f      	cmp	r7, r3
 800a74a:	d102      	bne.n	800a752 <_strtod_l+0x8d2>
 800a74c:	3101      	adds	r1, #1
 800a74e:	f43f addf 	beq.w	800a310 <_strtod_l+0x490>
 800a752:	4b23      	ldr	r3, [pc, #140]	; (800a7e0 <_strtod_l+0x960>)
 800a754:	403b      	ands	r3, r7
 800a756:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a75a:	f04f 0a00 	mov.w	sl, #0
 800a75e:	9b04      	ldr	r3, [sp, #16]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1a4      	bne.n	800a6ae <_strtod_l+0x82e>
 800a764:	e5de      	b.n	800a324 <_strtod_l+0x4a4>
 800a766:	f04f 33ff 	mov.w	r3, #4294967295
 800a76a:	e7ea      	b.n	800a742 <_strtod_l+0x8c2>
 800a76c:	4613      	mov	r3, r2
 800a76e:	e7e8      	b.n	800a742 <_strtod_l+0x8c2>
 800a770:	ea53 030a 	orrs.w	r3, r3, sl
 800a774:	d08c      	beq.n	800a690 <_strtod_l+0x810>
 800a776:	9b08      	ldr	r3, [sp, #32]
 800a778:	b1db      	cbz	r3, 800a7b2 <_strtod_l+0x932>
 800a77a:	423b      	tst	r3, r7
 800a77c:	d0ef      	beq.n	800a75e <_strtod_l+0x8de>
 800a77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a780:	9a04      	ldr	r2, [sp, #16]
 800a782:	4650      	mov	r0, sl
 800a784:	4659      	mov	r1, fp
 800a786:	b1c3      	cbz	r3, 800a7ba <_strtod_l+0x93a>
 800a788:	f7ff fb5e 	bl	8009e48 <sulp>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	ec51 0b18 	vmov	r0, r1, d8
 800a794:	f7f5 fd9a 	bl	80002cc <__adddf3>
 800a798:	4682      	mov	sl, r0
 800a79a:	468b      	mov	fp, r1
 800a79c:	e7df      	b.n	800a75e <_strtod_l+0x8de>
 800a79e:	4013      	ands	r3, r2
 800a7a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a7a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a7a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a7ac:	f04f 3aff 	mov.w	sl, #4294967295
 800a7b0:	e7d5      	b.n	800a75e <_strtod_l+0x8de>
 800a7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7b4:	ea13 0f0a 	tst.w	r3, sl
 800a7b8:	e7e0      	b.n	800a77c <_strtod_l+0x8fc>
 800a7ba:	f7ff fb45 	bl	8009e48 <sulp>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	ec51 0b18 	vmov	r0, r1, d8
 800a7c6:	f7f5 fd7f 	bl	80002c8 <__aeabi_dsub>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4682      	mov	sl, r0
 800a7d0:	468b      	mov	fp, r1
 800a7d2:	f7f6 f999 	bl	8000b08 <__aeabi_dcmpeq>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d0c1      	beq.n	800a75e <_strtod_l+0x8de>
 800a7da:	e611      	b.n	800a400 <_strtod_l+0x580>
 800a7dc:	fffffc02 	.word	0xfffffc02
 800a7e0:	7ff00000 	.word	0x7ff00000
 800a7e4:	39500000 	.word	0x39500000
 800a7e8:	000fffff 	.word	0x000fffff
 800a7ec:	7fefffff 	.word	0x7fefffff
 800a7f0:	0800dc68 	.word	0x0800dc68
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f002 f832 	bl	800c860 <__ratio>
 800a7fc:	ec59 8b10 	vmov	r8, r9, d0
 800a800:	ee10 0a10 	vmov	r0, s0
 800a804:	2200      	movs	r2, #0
 800a806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a80a:	4649      	mov	r1, r9
 800a80c:	f7f6 f990 	bl	8000b30 <__aeabi_dcmple>
 800a810:	2800      	cmp	r0, #0
 800a812:	d07a      	beq.n	800a90a <_strtod_l+0xa8a>
 800a814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d04a      	beq.n	800a8b0 <_strtod_l+0xa30>
 800a81a:	4b95      	ldr	r3, [pc, #596]	; (800aa70 <_strtod_l+0xbf0>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a822:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800aa70 <_strtod_l+0xbf0>
 800a826:	f04f 0800 	mov.w	r8, #0
 800a82a:	4b92      	ldr	r3, [pc, #584]	; (800aa74 <_strtod_l+0xbf4>)
 800a82c:	403b      	ands	r3, r7
 800a82e:	930d      	str	r3, [sp, #52]	; 0x34
 800a830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a832:	4b91      	ldr	r3, [pc, #580]	; (800aa78 <_strtod_l+0xbf8>)
 800a834:	429a      	cmp	r2, r3
 800a836:	f040 80b0 	bne.w	800a99a <_strtod_l+0xb1a>
 800a83a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a83e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a842:	ec4b ab10 	vmov	d0, sl, fp
 800a846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a84a:	f001 ff31 	bl	800c6b0 <__ulp>
 800a84e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a852:	ec53 2b10 	vmov	r2, r3, d0
 800a856:	f7f5 feef 	bl	8000638 <__aeabi_dmul>
 800a85a:	4652      	mov	r2, sl
 800a85c:	465b      	mov	r3, fp
 800a85e:	f7f5 fd35 	bl	80002cc <__adddf3>
 800a862:	460b      	mov	r3, r1
 800a864:	4983      	ldr	r1, [pc, #524]	; (800aa74 <_strtod_l+0xbf4>)
 800a866:	4a85      	ldr	r2, [pc, #532]	; (800aa7c <_strtod_l+0xbfc>)
 800a868:	4019      	ands	r1, r3
 800a86a:	4291      	cmp	r1, r2
 800a86c:	4682      	mov	sl, r0
 800a86e:	d960      	bls.n	800a932 <_strtod_l+0xab2>
 800a870:	ee18 3a90 	vmov	r3, s17
 800a874:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a878:	4293      	cmp	r3, r2
 800a87a:	d104      	bne.n	800a886 <_strtod_l+0xa06>
 800a87c:	ee18 3a10 	vmov	r3, s16
 800a880:	3301      	adds	r3, #1
 800a882:	f43f ad45 	beq.w	800a310 <_strtod_l+0x490>
 800a886:	f8df b200 	ldr.w	fp, [pc, #512]	; 800aa88 <_strtod_l+0xc08>
 800a88a:	f04f 3aff 	mov.w	sl, #4294967295
 800a88e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a890:	4620      	mov	r0, r4
 800a892:	f001 fbdb 	bl	800c04c <_Bfree>
 800a896:	9905      	ldr	r1, [sp, #20]
 800a898:	4620      	mov	r0, r4
 800a89a:	f001 fbd7 	bl	800c04c <_Bfree>
 800a89e:	4631      	mov	r1, r6
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f001 fbd3 	bl	800c04c <_Bfree>
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f001 fbcf 	bl	800c04c <_Bfree>
 800a8ae:	e61a      	b.n	800a4e6 <_strtod_l+0x666>
 800a8b0:	f1ba 0f00 	cmp.w	sl, #0
 800a8b4:	d11b      	bne.n	800a8ee <_strtod_l+0xa6e>
 800a8b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8ba:	b9f3      	cbnz	r3, 800a8fa <_strtod_l+0xa7a>
 800a8bc:	4b6c      	ldr	r3, [pc, #432]	; (800aa70 <_strtod_l+0xbf0>)
 800a8be:	2200      	movs	r2, #0
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	f7f6 f92a 	bl	8000b1c <__aeabi_dcmplt>
 800a8c8:	b9d0      	cbnz	r0, 800a900 <_strtod_l+0xa80>
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	4b6c      	ldr	r3, [pc, #432]	; (800aa80 <_strtod_l+0xc00>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f7f5 feb1 	bl	8000638 <__aeabi_dmul>
 800a8d6:	4680      	mov	r8, r0
 800a8d8:	4689      	mov	r9, r1
 800a8da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a8e2:	9315      	str	r3, [sp, #84]	; 0x54
 800a8e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a8e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a8ec:	e79d      	b.n	800a82a <_strtod_l+0x9aa>
 800a8ee:	f1ba 0f01 	cmp.w	sl, #1
 800a8f2:	d102      	bne.n	800a8fa <_strtod_l+0xa7a>
 800a8f4:	2f00      	cmp	r7, #0
 800a8f6:	f43f ad83 	beq.w	800a400 <_strtod_l+0x580>
 800a8fa:	4b62      	ldr	r3, [pc, #392]	; (800aa84 <_strtod_l+0xc04>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	e78e      	b.n	800a81e <_strtod_l+0x99e>
 800a900:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800aa80 <_strtod_l+0xc00>
 800a904:	f04f 0800 	mov.w	r8, #0
 800a908:	e7e7      	b.n	800a8da <_strtod_l+0xa5a>
 800a90a:	4b5d      	ldr	r3, [pc, #372]	; (800aa80 <_strtod_l+0xc00>)
 800a90c:	4640      	mov	r0, r8
 800a90e:	4649      	mov	r1, r9
 800a910:	2200      	movs	r2, #0
 800a912:	f7f5 fe91 	bl	8000638 <__aeabi_dmul>
 800a916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a918:	4680      	mov	r8, r0
 800a91a:	4689      	mov	r9, r1
 800a91c:	b933      	cbnz	r3, 800a92c <_strtod_l+0xaac>
 800a91e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a922:	900e      	str	r0, [sp, #56]	; 0x38
 800a924:	930f      	str	r3, [sp, #60]	; 0x3c
 800a926:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a92a:	e7dd      	b.n	800a8e8 <_strtod_l+0xa68>
 800a92c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a930:	e7f9      	b.n	800a926 <_strtod_l+0xaa6>
 800a932:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a936:	9b04      	ldr	r3, [sp, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1a8      	bne.n	800a88e <_strtod_l+0xa0e>
 800a93c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a942:	0d1b      	lsrs	r3, r3, #20
 800a944:	051b      	lsls	r3, r3, #20
 800a946:	429a      	cmp	r2, r3
 800a948:	d1a1      	bne.n	800a88e <_strtod_l+0xa0e>
 800a94a:	4640      	mov	r0, r8
 800a94c:	4649      	mov	r1, r9
 800a94e:	f7f6 f9d3 	bl	8000cf8 <__aeabi_d2lz>
 800a952:	f7f5 fe43 	bl	80005dc <__aeabi_l2d>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	f7f5 fcb3 	bl	80002c8 <__aeabi_dsub>
 800a962:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a968:	ea43 030a 	orr.w	r3, r3, sl
 800a96c:	4313      	orrs	r3, r2
 800a96e:	4680      	mov	r8, r0
 800a970:	4689      	mov	r9, r1
 800a972:	d055      	beq.n	800aa20 <_strtod_l+0xba0>
 800a974:	a336      	add	r3, pc, #216	; (adr r3, 800aa50 <_strtod_l+0xbd0>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f6 f8cf 	bl	8000b1c <__aeabi_dcmplt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f47f acd0 	bne.w	800a324 <_strtod_l+0x4a4>
 800a984:	a334      	add	r3, pc, #208	; (adr r3, 800aa58 <_strtod_l+0xbd8>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	4640      	mov	r0, r8
 800a98c:	4649      	mov	r1, r9
 800a98e:	f7f6 f8e3 	bl	8000b58 <__aeabi_dcmpgt>
 800a992:	2800      	cmp	r0, #0
 800a994:	f43f af7b 	beq.w	800a88e <_strtod_l+0xa0e>
 800a998:	e4c4      	b.n	800a324 <_strtod_l+0x4a4>
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	b333      	cbz	r3, 800a9ec <_strtod_l+0xb6c>
 800a99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9a0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a9a4:	d822      	bhi.n	800a9ec <_strtod_l+0xb6c>
 800a9a6:	a32e      	add	r3, pc, #184	; (adr r3, 800aa60 <_strtod_l+0xbe0>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	4640      	mov	r0, r8
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	f7f6 f8be 	bl	8000b30 <__aeabi_dcmple>
 800a9b4:	b1a0      	cbz	r0, 800a9e0 <_strtod_l+0xb60>
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	f7f6 f915 	bl	8000be8 <__aeabi_d2uiz>
 800a9be:	2801      	cmp	r0, #1
 800a9c0:	bf38      	it	cc
 800a9c2:	2001      	movcc	r0, #1
 800a9c4:	f7f5 fdbe 	bl	8000544 <__aeabi_ui2d>
 800a9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	4689      	mov	r9, r1
 800a9ce:	bb23      	cbnz	r3, 800aa1a <_strtod_l+0xb9a>
 800a9d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9d4:	9010      	str	r0, [sp, #64]	; 0x40
 800a9d6:	9311      	str	r3, [sp, #68]	; 0x44
 800a9d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9e4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a9e8:	1a9b      	subs	r3, r3, r2
 800a9ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9f0:	eeb0 0a48 	vmov.f32	s0, s16
 800a9f4:	eef0 0a68 	vmov.f32	s1, s17
 800a9f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9fc:	f001 fe58 	bl	800c6b0 <__ulp>
 800aa00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa04:	ec53 2b10 	vmov	r2, r3, d0
 800aa08:	f7f5 fe16 	bl	8000638 <__aeabi_dmul>
 800aa0c:	ec53 2b18 	vmov	r2, r3, d8
 800aa10:	f7f5 fc5c 	bl	80002cc <__adddf3>
 800aa14:	4682      	mov	sl, r0
 800aa16:	468b      	mov	fp, r1
 800aa18:	e78d      	b.n	800a936 <_strtod_l+0xab6>
 800aa1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800aa1e:	e7db      	b.n	800a9d8 <_strtod_l+0xb58>
 800aa20:	a311      	add	r3, pc, #68	; (adr r3, 800aa68 <_strtod_l+0xbe8>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f6 f879 	bl	8000b1c <__aeabi_dcmplt>
 800aa2a:	e7b2      	b.n	800a992 <_strtod_l+0xb12>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aa32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	f7ff ba6b 	b.w	8009f10 <_strtod_l+0x90>
 800aa3a:	2a65      	cmp	r2, #101	; 0x65
 800aa3c:	f43f ab5f 	beq.w	800a0fe <_strtod_l+0x27e>
 800aa40:	2a45      	cmp	r2, #69	; 0x45
 800aa42:	f43f ab5c 	beq.w	800a0fe <_strtod_l+0x27e>
 800aa46:	2301      	movs	r3, #1
 800aa48:	f7ff bb94 	b.w	800a174 <_strtod_l+0x2f4>
 800aa4c:	f3af 8000 	nop.w
 800aa50:	94a03595 	.word	0x94a03595
 800aa54:	3fdfffff 	.word	0x3fdfffff
 800aa58:	35afe535 	.word	0x35afe535
 800aa5c:	3fe00000 	.word	0x3fe00000
 800aa60:	ffc00000 	.word	0xffc00000
 800aa64:	41dfffff 	.word	0x41dfffff
 800aa68:	94a03595 	.word	0x94a03595
 800aa6c:	3fcfffff 	.word	0x3fcfffff
 800aa70:	3ff00000 	.word	0x3ff00000
 800aa74:	7ff00000 	.word	0x7ff00000
 800aa78:	7fe00000 	.word	0x7fe00000
 800aa7c:	7c9fffff 	.word	0x7c9fffff
 800aa80:	3fe00000 	.word	0x3fe00000
 800aa84:	bff00000 	.word	0xbff00000
 800aa88:	7fefffff 	.word	0x7fefffff

0800aa8c <_strtod_r>:
 800aa8c:	4b01      	ldr	r3, [pc, #4]	; (800aa94 <_strtod_r+0x8>)
 800aa8e:	f7ff b9f7 	b.w	8009e80 <_strtod_l>
 800aa92:	bf00      	nop
 800aa94:	2000008c 	.word	0x2000008c

0800aa98 <_strtol_l.constprop.0>:
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa9e:	d001      	beq.n	800aaa4 <_strtol_l.constprop.0+0xc>
 800aaa0:	2b24      	cmp	r3, #36	; 0x24
 800aaa2:	d906      	bls.n	800aab2 <_strtol_l.constprop.0+0x1a>
 800aaa4:	f7fe fafe 	bl	80090a4 <__errno>
 800aaa8:	2316      	movs	r3, #22
 800aaaa:	6003      	str	r3, [r0, #0]
 800aaac:	2000      	movs	r0, #0
 800aaae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aab2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ab98 <_strtol_l.constprop.0+0x100>
 800aab6:	460d      	mov	r5, r1
 800aab8:	462e      	mov	r6, r5
 800aaba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aabe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aac2:	f017 0708 	ands.w	r7, r7, #8
 800aac6:	d1f7      	bne.n	800aab8 <_strtol_l.constprop.0+0x20>
 800aac8:	2c2d      	cmp	r4, #45	; 0x2d
 800aaca:	d132      	bne.n	800ab32 <_strtol_l.constprop.0+0x9a>
 800aacc:	782c      	ldrb	r4, [r5, #0]
 800aace:	2701      	movs	r7, #1
 800aad0:	1cb5      	adds	r5, r6, #2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d05b      	beq.n	800ab8e <_strtol_l.constprop.0+0xf6>
 800aad6:	2b10      	cmp	r3, #16
 800aad8:	d109      	bne.n	800aaee <_strtol_l.constprop.0+0x56>
 800aada:	2c30      	cmp	r4, #48	; 0x30
 800aadc:	d107      	bne.n	800aaee <_strtol_l.constprop.0+0x56>
 800aade:	782c      	ldrb	r4, [r5, #0]
 800aae0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800aae4:	2c58      	cmp	r4, #88	; 0x58
 800aae6:	d14d      	bne.n	800ab84 <_strtol_l.constprop.0+0xec>
 800aae8:	786c      	ldrb	r4, [r5, #1]
 800aaea:	2310      	movs	r3, #16
 800aaec:	3502      	adds	r5, #2
 800aaee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aaf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800aaf6:	f04f 0c00 	mov.w	ip, #0
 800aafa:	fbb8 f9f3 	udiv	r9, r8, r3
 800aafe:	4666      	mov	r6, ip
 800ab00:	fb03 8a19 	mls	sl, r3, r9, r8
 800ab04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ab08:	f1be 0f09 	cmp.w	lr, #9
 800ab0c:	d816      	bhi.n	800ab3c <_strtol_l.constprop.0+0xa4>
 800ab0e:	4674      	mov	r4, lr
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	dd24      	ble.n	800ab5e <_strtol_l.constprop.0+0xc6>
 800ab14:	f1bc 0f00 	cmp.w	ip, #0
 800ab18:	db1e      	blt.n	800ab58 <_strtol_l.constprop.0+0xc0>
 800ab1a:	45b1      	cmp	r9, r6
 800ab1c:	d31c      	bcc.n	800ab58 <_strtol_l.constprop.0+0xc0>
 800ab1e:	d101      	bne.n	800ab24 <_strtol_l.constprop.0+0x8c>
 800ab20:	45a2      	cmp	sl, r4
 800ab22:	db19      	blt.n	800ab58 <_strtol_l.constprop.0+0xc0>
 800ab24:	fb06 4603 	mla	r6, r6, r3, r4
 800ab28:	f04f 0c01 	mov.w	ip, #1
 800ab2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab30:	e7e8      	b.n	800ab04 <_strtol_l.constprop.0+0x6c>
 800ab32:	2c2b      	cmp	r4, #43	; 0x2b
 800ab34:	bf04      	itt	eq
 800ab36:	782c      	ldrbeq	r4, [r5, #0]
 800ab38:	1cb5      	addeq	r5, r6, #2
 800ab3a:	e7ca      	b.n	800aad2 <_strtol_l.constprop.0+0x3a>
 800ab3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ab40:	f1be 0f19 	cmp.w	lr, #25
 800ab44:	d801      	bhi.n	800ab4a <_strtol_l.constprop.0+0xb2>
 800ab46:	3c37      	subs	r4, #55	; 0x37
 800ab48:	e7e2      	b.n	800ab10 <_strtol_l.constprop.0+0x78>
 800ab4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ab4e:	f1be 0f19 	cmp.w	lr, #25
 800ab52:	d804      	bhi.n	800ab5e <_strtol_l.constprop.0+0xc6>
 800ab54:	3c57      	subs	r4, #87	; 0x57
 800ab56:	e7db      	b.n	800ab10 <_strtol_l.constprop.0+0x78>
 800ab58:	f04f 3cff 	mov.w	ip, #4294967295
 800ab5c:	e7e6      	b.n	800ab2c <_strtol_l.constprop.0+0x94>
 800ab5e:	f1bc 0f00 	cmp.w	ip, #0
 800ab62:	da05      	bge.n	800ab70 <_strtol_l.constprop.0+0xd8>
 800ab64:	2322      	movs	r3, #34	; 0x22
 800ab66:	6003      	str	r3, [r0, #0]
 800ab68:	4646      	mov	r6, r8
 800ab6a:	b942      	cbnz	r2, 800ab7e <_strtol_l.constprop.0+0xe6>
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	e79e      	b.n	800aaae <_strtol_l.constprop.0+0x16>
 800ab70:	b107      	cbz	r7, 800ab74 <_strtol_l.constprop.0+0xdc>
 800ab72:	4276      	negs	r6, r6
 800ab74:	2a00      	cmp	r2, #0
 800ab76:	d0f9      	beq.n	800ab6c <_strtol_l.constprop.0+0xd4>
 800ab78:	f1bc 0f00 	cmp.w	ip, #0
 800ab7c:	d000      	beq.n	800ab80 <_strtol_l.constprop.0+0xe8>
 800ab7e:	1e69      	subs	r1, r5, #1
 800ab80:	6011      	str	r1, [r2, #0]
 800ab82:	e7f3      	b.n	800ab6c <_strtol_l.constprop.0+0xd4>
 800ab84:	2430      	movs	r4, #48	; 0x30
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1b1      	bne.n	800aaee <_strtol_l.constprop.0+0x56>
 800ab8a:	2308      	movs	r3, #8
 800ab8c:	e7af      	b.n	800aaee <_strtol_l.constprop.0+0x56>
 800ab8e:	2c30      	cmp	r4, #48	; 0x30
 800ab90:	d0a5      	beq.n	800aade <_strtol_l.constprop.0+0x46>
 800ab92:	230a      	movs	r3, #10
 800ab94:	e7ab      	b.n	800aaee <_strtol_l.constprop.0+0x56>
 800ab96:	bf00      	nop
 800ab98:	0800dc91 	.word	0x0800dc91

0800ab9c <_strtol_r>:
 800ab9c:	f7ff bf7c 	b.w	800aa98 <_strtol_l.constprop.0>

0800aba0 <quorem>:
 800aba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba4:	6903      	ldr	r3, [r0, #16]
 800aba6:	690c      	ldr	r4, [r1, #16]
 800aba8:	42a3      	cmp	r3, r4
 800abaa:	4607      	mov	r7, r0
 800abac:	f2c0 8081 	blt.w	800acb2 <quorem+0x112>
 800abb0:	3c01      	subs	r4, #1
 800abb2:	f101 0814 	add.w	r8, r1, #20
 800abb6:	f100 0514 	add.w	r5, r0, #20
 800abba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abbe:	9301      	str	r3, [sp, #4]
 800abc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abc8:	3301      	adds	r3, #1
 800abca:	429a      	cmp	r2, r3
 800abcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800abd8:	d331      	bcc.n	800ac3e <quorem+0x9e>
 800abda:	f04f 0e00 	mov.w	lr, #0
 800abde:	4640      	mov	r0, r8
 800abe0:	46ac      	mov	ip, r5
 800abe2:	46f2      	mov	sl, lr
 800abe4:	f850 2b04 	ldr.w	r2, [r0], #4
 800abe8:	b293      	uxth	r3, r2
 800abea:	fb06 e303 	mla	r3, r6, r3, lr
 800abee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	ebaa 0303 	sub.w	r3, sl, r3
 800abf8:	f8dc a000 	ldr.w	sl, [ip]
 800abfc:	0c12      	lsrs	r2, r2, #16
 800abfe:	fa13 f38a 	uxtah	r3, r3, sl
 800ac02:	fb06 e202 	mla	r2, r6, r2, lr
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	9b00      	ldr	r3, [sp, #0]
 800ac0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac0e:	b292      	uxth	r2, r2
 800ac10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac18:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac1c:	4581      	cmp	r9, r0
 800ac1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac22:	f84c 3b04 	str.w	r3, [ip], #4
 800ac26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac2a:	d2db      	bcs.n	800abe4 <quorem+0x44>
 800ac2c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac30:	b92b      	cbnz	r3, 800ac3e <quorem+0x9e>
 800ac32:	9b01      	ldr	r3, [sp, #4]
 800ac34:	3b04      	subs	r3, #4
 800ac36:	429d      	cmp	r5, r3
 800ac38:	461a      	mov	r2, r3
 800ac3a:	d32e      	bcc.n	800ac9a <quorem+0xfa>
 800ac3c:	613c      	str	r4, [r7, #16]
 800ac3e:	4638      	mov	r0, r7
 800ac40:	f001 fc90 	bl	800c564 <__mcmp>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	db24      	blt.n	800ac92 <quorem+0xf2>
 800ac48:	3601      	adds	r6, #1
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f04f 0c00 	mov.w	ip, #0
 800ac50:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac54:	f8d0 e000 	ldr.w	lr, [r0]
 800ac58:	b293      	uxth	r3, r2
 800ac5a:	ebac 0303 	sub.w	r3, ip, r3
 800ac5e:	0c12      	lsrs	r2, r2, #16
 800ac60:	fa13 f38e 	uxtah	r3, r3, lr
 800ac64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac72:	45c1      	cmp	r9, r8
 800ac74:	f840 3b04 	str.w	r3, [r0], #4
 800ac78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac7c:	d2e8      	bcs.n	800ac50 <quorem+0xb0>
 800ac7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac86:	b922      	cbnz	r2, 800ac92 <quorem+0xf2>
 800ac88:	3b04      	subs	r3, #4
 800ac8a:	429d      	cmp	r5, r3
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	d30a      	bcc.n	800aca6 <quorem+0x106>
 800ac90:	613c      	str	r4, [r7, #16]
 800ac92:	4630      	mov	r0, r6
 800ac94:	b003      	add	sp, #12
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	6812      	ldr	r2, [r2, #0]
 800ac9c:	3b04      	subs	r3, #4
 800ac9e:	2a00      	cmp	r2, #0
 800aca0:	d1cc      	bne.n	800ac3c <quorem+0x9c>
 800aca2:	3c01      	subs	r4, #1
 800aca4:	e7c7      	b.n	800ac36 <quorem+0x96>
 800aca6:	6812      	ldr	r2, [r2, #0]
 800aca8:	3b04      	subs	r3, #4
 800acaa:	2a00      	cmp	r2, #0
 800acac:	d1f0      	bne.n	800ac90 <quorem+0xf0>
 800acae:	3c01      	subs	r4, #1
 800acb0:	e7eb      	b.n	800ac8a <quorem+0xea>
 800acb2:	2000      	movs	r0, #0
 800acb4:	e7ee      	b.n	800ac94 <quorem+0xf4>
	...

0800acb8 <_dtoa_r>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	ed2d 8b04 	vpush	{d8-d9}
 800acc0:	ec57 6b10 	vmov	r6, r7, d0
 800acc4:	b093      	sub	sp, #76	; 0x4c
 800acc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800acc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800accc:	9106      	str	r1, [sp, #24]
 800acce:	ee10 aa10 	vmov	sl, s0
 800acd2:	4604      	mov	r4, r0
 800acd4:	9209      	str	r2, [sp, #36]	; 0x24
 800acd6:	930c      	str	r3, [sp, #48]	; 0x30
 800acd8:	46bb      	mov	fp, r7
 800acda:	b975      	cbnz	r5, 800acfa <_dtoa_r+0x42>
 800acdc:	2010      	movs	r0, #16
 800acde:	f001 f94d 	bl	800bf7c <malloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	6260      	str	r0, [r4, #36]	; 0x24
 800ace6:	b920      	cbnz	r0, 800acf2 <_dtoa_r+0x3a>
 800ace8:	4ba7      	ldr	r3, [pc, #668]	; (800af88 <_dtoa_r+0x2d0>)
 800acea:	21ea      	movs	r1, #234	; 0xea
 800acec:	48a7      	ldr	r0, [pc, #668]	; (800af8c <_dtoa_r+0x2d4>)
 800acee:	f002 f8bd 	bl	800ce6c <__assert_func>
 800acf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acf6:	6005      	str	r5, [r0, #0]
 800acf8:	60c5      	str	r5, [r0, #12]
 800acfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acfc:	6819      	ldr	r1, [r3, #0]
 800acfe:	b151      	cbz	r1, 800ad16 <_dtoa_r+0x5e>
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	604a      	str	r2, [r1, #4]
 800ad04:	2301      	movs	r3, #1
 800ad06:	4093      	lsls	r3, r2
 800ad08:	608b      	str	r3, [r1, #8]
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f001 f99e 	bl	800c04c <_Bfree>
 800ad10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	1e3b      	subs	r3, r7, #0
 800ad18:	bfaa      	itet	ge
 800ad1a:	2300      	movge	r3, #0
 800ad1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ad20:	f8c8 3000 	strge.w	r3, [r8]
 800ad24:	4b9a      	ldr	r3, [pc, #616]	; (800af90 <_dtoa_r+0x2d8>)
 800ad26:	bfbc      	itt	lt
 800ad28:	2201      	movlt	r2, #1
 800ad2a:	f8c8 2000 	strlt.w	r2, [r8]
 800ad2e:	ea33 030b 	bics.w	r3, r3, fp
 800ad32:	d11b      	bne.n	800ad6c <_dtoa_r+0xb4>
 800ad34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad36:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad40:	4333      	orrs	r3, r6
 800ad42:	f000 8592 	beq.w	800b86a <_dtoa_r+0xbb2>
 800ad46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad48:	b963      	cbnz	r3, 800ad64 <_dtoa_r+0xac>
 800ad4a:	4b92      	ldr	r3, [pc, #584]	; (800af94 <_dtoa_r+0x2dc>)
 800ad4c:	e022      	b.n	800ad94 <_dtoa_r+0xdc>
 800ad4e:	4b92      	ldr	r3, [pc, #584]	; (800af98 <_dtoa_r+0x2e0>)
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	3308      	adds	r3, #8
 800ad54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	9801      	ldr	r0, [sp, #4]
 800ad5a:	b013      	add	sp, #76	; 0x4c
 800ad5c:	ecbd 8b04 	vpop	{d8-d9}
 800ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad64:	4b8b      	ldr	r3, [pc, #556]	; (800af94 <_dtoa_r+0x2dc>)
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	3303      	adds	r3, #3
 800ad6a:	e7f3      	b.n	800ad54 <_dtoa_r+0x9c>
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2300      	movs	r3, #0
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	f7f5 fec8 	bl	8000b08 <__aeabi_dcmpeq>
 800ad78:	ec4b ab19 	vmov	d9, sl, fp
 800ad7c:	4680      	mov	r8, r0
 800ad7e:	b158      	cbz	r0, 800ad98 <_dtoa_r+0xe0>
 800ad80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad82:	2301      	movs	r3, #1
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 856b 	beq.w	800b864 <_dtoa_r+0xbac>
 800ad8e:	4883      	ldr	r0, [pc, #524]	; (800af9c <_dtoa_r+0x2e4>)
 800ad90:	6018      	str	r0, [r3, #0]
 800ad92:	1e43      	subs	r3, r0, #1
 800ad94:	9301      	str	r3, [sp, #4]
 800ad96:	e7df      	b.n	800ad58 <_dtoa_r+0xa0>
 800ad98:	ec4b ab10 	vmov	d0, sl, fp
 800ad9c:	aa10      	add	r2, sp, #64	; 0x40
 800ad9e:	a911      	add	r1, sp, #68	; 0x44
 800ada0:	4620      	mov	r0, r4
 800ada2:	f001 fd01 	bl	800c7a8 <__d2b>
 800ada6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800adaa:	ee08 0a10 	vmov	s16, r0
 800adae:	2d00      	cmp	r5, #0
 800adb0:	f000 8084 	beq.w	800aebc <_dtoa_r+0x204>
 800adb4:	ee19 3a90 	vmov	r3, s19
 800adb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800adc0:	4656      	mov	r6, sl
 800adc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800adc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800adca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800adce:	4b74      	ldr	r3, [pc, #464]	; (800afa0 <_dtoa_r+0x2e8>)
 800add0:	2200      	movs	r2, #0
 800add2:	4630      	mov	r0, r6
 800add4:	4639      	mov	r1, r7
 800add6:	f7f5 fa77 	bl	80002c8 <__aeabi_dsub>
 800adda:	a365      	add	r3, pc, #404	; (adr r3, 800af70 <_dtoa_r+0x2b8>)
 800addc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade0:	f7f5 fc2a 	bl	8000638 <__aeabi_dmul>
 800ade4:	a364      	add	r3, pc, #400	; (adr r3, 800af78 <_dtoa_r+0x2c0>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fa6f 	bl	80002cc <__adddf3>
 800adee:	4606      	mov	r6, r0
 800adf0:	4628      	mov	r0, r5
 800adf2:	460f      	mov	r7, r1
 800adf4:	f7f5 fbb6 	bl	8000564 <__aeabi_i2d>
 800adf8:	a361      	add	r3, pc, #388	; (adr r3, 800af80 <_dtoa_r+0x2c8>)
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	f7f5 fc1b 	bl	8000638 <__aeabi_dmul>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 fa5f 	bl	80002cc <__adddf3>
 800ae0e:	4606      	mov	r6, r0
 800ae10:	460f      	mov	r7, r1
 800ae12:	f7f5 fec1 	bl	8000b98 <__aeabi_d2iz>
 800ae16:	2200      	movs	r2, #0
 800ae18:	9000      	str	r0, [sp, #0]
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 800ae24:	b150      	cbz	r0, 800ae3c <_dtoa_r+0x184>
 800ae26:	9800      	ldr	r0, [sp, #0]
 800ae28:	f7f5 fb9c 	bl	8000564 <__aeabi_i2d>
 800ae2c:	4632      	mov	r2, r6
 800ae2e:	463b      	mov	r3, r7
 800ae30:	f7f5 fe6a 	bl	8000b08 <__aeabi_dcmpeq>
 800ae34:	b910      	cbnz	r0, 800ae3c <_dtoa_r+0x184>
 800ae36:	9b00      	ldr	r3, [sp, #0]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	9b00      	ldr	r3, [sp, #0]
 800ae3e:	2b16      	cmp	r3, #22
 800ae40:	d85a      	bhi.n	800aef8 <_dtoa_r+0x240>
 800ae42:	9a00      	ldr	r2, [sp, #0]
 800ae44:	4b57      	ldr	r3, [pc, #348]	; (800afa4 <_dtoa_r+0x2ec>)
 800ae46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	ec51 0b19 	vmov	r0, r1, d9
 800ae52:	f7f5 fe63 	bl	8000b1c <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d050      	beq.n	800aefc <_dtoa_r+0x244>
 800ae5a:	9b00      	ldr	r3, [sp, #0]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	2300      	movs	r3, #0
 800ae62:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae66:	1b5d      	subs	r5, r3, r5
 800ae68:	1e6b      	subs	r3, r5, #1
 800ae6a:	9305      	str	r3, [sp, #20]
 800ae6c:	bf45      	ittet	mi
 800ae6e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ae72:	9304      	strmi	r3, [sp, #16]
 800ae74:	2300      	movpl	r3, #0
 800ae76:	2300      	movmi	r3, #0
 800ae78:	bf4c      	ite	mi
 800ae7a:	9305      	strmi	r3, [sp, #20]
 800ae7c:	9304      	strpl	r3, [sp, #16]
 800ae7e:	9b00      	ldr	r3, [sp, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	db3d      	blt.n	800af00 <_dtoa_r+0x248>
 800ae84:	9b05      	ldr	r3, [sp, #20]
 800ae86:	9a00      	ldr	r2, [sp, #0]
 800ae88:	920a      	str	r2, [sp, #40]	; 0x28
 800ae8a:	4413      	add	r3, r2
 800ae8c:	9305      	str	r3, [sp, #20]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9307      	str	r3, [sp, #28]
 800ae92:	9b06      	ldr	r3, [sp, #24]
 800ae94:	2b09      	cmp	r3, #9
 800ae96:	f200 8089 	bhi.w	800afac <_dtoa_r+0x2f4>
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	bfc4      	itt	gt
 800ae9e:	3b04      	subgt	r3, #4
 800aea0:	9306      	strgt	r3, [sp, #24]
 800aea2:	9b06      	ldr	r3, [sp, #24]
 800aea4:	f1a3 0302 	sub.w	r3, r3, #2
 800aea8:	bfcc      	ite	gt
 800aeaa:	2500      	movgt	r5, #0
 800aeac:	2501      	movle	r5, #1
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	f200 8087 	bhi.w	800afc2 <_dtoa_r+0x30a>
 800aeb4:	e8df f003 	tbb	[pc, r3]
 800aeb8:	59383a2d 	.word	0x59383a2d
 800aebc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aec0:	441d      	add	r5, r3
 800aec2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aec6:	2b20      	cmp	r3, #32
 800aec8:	bfc1      	itttt	gt
 800aeca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aece:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aed2:	fa0b f303 	lslgt.w	r3, fp, r3
 800aed6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aeda:	bfda      	itte	le
 800aedc:	f1c3 0320 	rsble	r3, r3, #32
 800aee0:	fa06 f003 	lslle.w	r0, r6, r3
 800aee4:	4318      	orrgt	r0, r3
 800aee6:	f7f5 fb2d 	bl	8000544 <__aeabi_ui2d>
 800aeea:	2301      	movs	r3, #1
 800aeec:	4606      	mov	r6, r0
 800aeee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aef2:	3d01      	subs	r5, #1
 800aef4:	930e      	str	r3, [sp, #56]	; 0x38
 800aef6:	e76a      	b.n	800adce <_dtoa_r+0x116>
 800aef8:	2301      	movs	r3, #1
 800aefa:	e7b2      	b.n	800ae62 <_dtoa_r+0x1aa>
 800aefc:	900b      	str	r0, [sp, #44]	; 0x2c
 800aefe:	e7b1      	b.n	800ae64 <_dtoa_r+0x1ac>
 800af00:	9b04      	ldr	r3, [sp, #16]
 800af02:	9a00      	ldr	r2, [sp, #0]
 800af04:	1a9b      	subs	r3, r3, r2
 800af06:	9304      	str	r3, [sp, #16]
 800af08:	4253      	negs	r3, r2
 800af0a:	9307      	str	r3, [sp, #28]
 800af0c:	2300      	movs	r3, #0
 800af0e:	930a      	str	r3, [sp, #40]	; 0x28
 800af10:	e7bf      	b.n	800ae92 <_dtoa_r+0x1da>
 800af12:	2300      	movs	r3, #0
 800af14:	9308      	str	r3, [sp, #32]
 800af16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dc55      	bgt.n	800afc8 <_dtoa_r+0x310>
 800af1c:	2301      	movs	r3, #1
 800af1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af22:	461a      	mov	r2, r3
 800af24:	9209      	str	r2, [sp, #36]	; 0x24
 800af26:	e00c      	b.n	800af42 <_dtoa_r+0x28a>
 800af28:	2301      	movs	r3, #1
 800af2a:	e7f3      	b.n	800af14 <_dtoa_r+0x25c>
 800af2c:	2300      	movs	r3, #0
 800af2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af30:	9308      	str	r3, [sp, #32]
 800af32:	9b00      	ldr	r3, [sp, #0]
 800af34:	4413      	add	r3, r2
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	3301      	adds	r3, #1
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	9303      	str	r3, [sp, #12]
 800af3e:	bfb8      	it	lt
 800af40:	2301      	movlt	r3, #1
 800af42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af44:	2200      	movs	r2, #0
 800af46:	6042      	str	r2, [r0, #4]
 800af48:	2204      	movs	r2, #4
 800af4a:	f102 0614 	add.w	r6, r2, #20
 800af4e:	429e      	cmp	r6, r3
 800af50:	6841      	ldr	r1, [r0, #4]
 800af52:	d93d      	bls.n	800afd0 <_dtoa_r+0x318>
 800af54:	4620      	mov	r0, r4
 800af56:	f001 f839 	bl	800bfcc <_Balloc>
 800af5a:	9001      	str	r0, [sp, #4]
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d13b      	bne.n	800afd8 <_dtoa_r+0x320>
 800af60:	4b11      	ldr	r3, [pc, #68]	; (800afa8 <_dtoa_r+0x2f0>)
 800af62:	4602      	mov	r2, r0
 800af64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800af68:	e6c0      	b.n	800acec <_dtoa_r+0x34>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e7df      	b.n	800af2e <_dtoa_r+0x276>
 800af6e:	bf00      	nop
 800af70:	636f4361 	.word	0x636f4361
 800af74:	3fd287a7 	.word	0x3fd287a7
 800af78:	8b60c8b3 	.word	0x8b60c8b3
 800af7c:	3fc68a28 	.word	0x3fc68a28
 800af80:	509f79fb 	.word	0x509f79fb
 800af84:	3fd34413 	.word	0x3fd34413
 800af88:	0800dd9e 	.word	0x0800dd9e
 800af8c:	0800ddb5 	.word	0x0800ddb5
 800af90:	7ff00000 	.word	0x7ff00000
 800af94:	0800dd9a 	.word	0x0800dd9a
 800af98:	0800dd91 	.word	0x0800dd91
 800af9c:	0800dc15 	.word	0x0800dc15
 800afa0:	3ff80000 	.word	0x3ff80000
 800afa4:	0800df20 	.word	0x0800df20
 800afa8:	0800de10 	.word	0x0800de10
 800afac:	2501      	movs	r5, #1
 800afae:	2300      	movs	r3, #0
 800afb0:	9306      	str	r3, [sp, #24]
 800afb2:	9508      	str	r5, [sp, #32]
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295
 800afb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800afbc:	2200      	movs	r2, #0
 800afbe:	2312      	movs	r3, #18
 800afc0:	e7b0      	b.n	800af24 <_dtoa_r+0x26c>
 800afc2:	2301      	movs	r3, #1
 800afc4:	9308      	str	r3, [sp, #32]
 800afc6:	e7f5      	b.n	800afb4 <_dtoa_r+0x2fc>
 800afc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800afce:	e7b8      	b.n	800af42 <_dtoa_r+0x28a>
 800afd0:	3101      	adds	r1, #1
 800afd2:	6041      	str	r1, [r0, #4]
 800afd4:	0052      	lsls	r2, r2, #1
 800afd6:	e7b8      	b.n	800af4a <_dtoa_r+0x292>
 800afd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afda:	9a01      	ldr	r2, [sp, #4]
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	2b0e      	cmp	r3, #14
 800afe2:	f200 809d 	bhi.w	800b120 <_dtoa_r+0x468>
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	f000 809a 	beq.w	800b120 <_dtoa_r+0x468>
 800afec:	9b00      	ldr	r3, [sp, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dd32      	ble.n	800b058 <_dtoa_r+0x3a0>
 800aff2:	4ab7      	ldr	r2, [pc, #732]	; (800b2d0 <_dtoa_r+0x618>)
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800affc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b000:	9b00      	ldr	r3, [sp, #0]
 800b002:	05d8      	lsls	r0, r3, #23
 800b004:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b008:	d516      	bpl.n	800b038 <_dtoa_r+0x380>
 800b00a:	4bb2      	ldr	r3, [pc, #712]	; (800b2d4 <_dtoa_r+0x61c>)
 800b00c:	ec51 0b19 	vmov	r0, r1, d9
 800b010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b014:	f7f5 fc3a 	bl	800088c <__aeabi_ddiv>
 800b018:	f007 070f 	and.w	r7, r7, #15
 800b01c:	4682      	mov	sl, r0
 800b01e:	468b      	mov	fp, r1
 800b020:	2503      	movs	r5, #3
 800b022:	4eac      	ldr	r6, [pc, #688]	; (800b2d4 <_dtoa_r+0x61c>)
 800b024:	b957      	cbnz	r7, 800b03c <_dtoa_r+0x384>
 800b026:	4642      	mov	r2, r8
 800b028:	464b      	mov	r3, r9
 800b02a:	4650      	mov	r0, sl
 800b02c:	4659      	mov	r1, fp
 800b02e:	f7f5 fc2d 	bl	800088c <__aeabi_ddiv>
 800b032:	4682      	mov	sl, r0
 800b034:	468b      	mov	fp, r1
 800b036:	e028      	b.n	800b08a <_dtoa_r+0x3d2>
 800b038:	2502      	movs	r5, #2
 800b03a:	e7f2      	b.n	800b022 <_dtoa_r+0x36a>
 800b03c:	07f9      	lsls	r1, r7, #31
 800b03e:	d508      	bpl.n	800b052 <_dtoa_r+0x39a>
 800b040:	4640      	mov	r0, r8
 800b042:	4649      	mov	r1, r9
 800b044:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b048:	f7f5 faf6 	bl	8000638 <__aeabi_dmul>
 800b04c:	3501      	adds	r5, #1
 800b04e:	4680      	mov	r8, r0
 800b050:	4689      	mov	r9, r1
 800b052:	107f      	asrs	r7, r7, #1
 800b054:	3608      	adds	r6, #8
 800b056:	e7e5      	b.n	800b024 <_dtoa_r+0x36c>
 800b058:	f000 809b 	beq.w	800b192 <_dtoa_r+0x4da>
 800b05c:	9b00      	ldr	r3, [sp, #0]
 800b05e:	4f9d      	ldr	r7, [pc, #628]	; (800b2d4 <_dtoa_r+0x61c>)
 800b060:	425e      	negs	r6, r3
 800b062:	4b9b      	ldr	r3, [pc, #620]	; (800b2d0 <_dtoa_r+0x618>)
 800b064:	f006 020f 	and.w	r2, r6, #15
 800b068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	ec51 0b19 	vmov	r0, r1, d9
 800b074:	f7f5 fae0 	bl	8000638 <__aeabi_dmul>
 800b078:	1136      	asrs	r6, r6, #4
 800b07a:	4682      	mov	sl, r0
 800b07c:	468b      	mov	fp, r1
 800b07e:	2300      	movs	r3, #0
 800b080:	2502      	movs	r5, #2
 800b082:	2e00      	cmp	r6, #0
 800b084:	d17a      	bne.n	800b17c <_dtoa_r+0x4c4>
 800b086:	2b00      	cmp	r3, #0
 800b088:	d1d3      	bne.n	800b032 <_dtoa_r+0x37a>
 800b08a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 8082 	beq.w	800b196 <_dtoa_r+0x4de>
 800b092:	4b91      	ldr	r3, [pc, #580]	; (800b2d8 <_dtoa_r+0x620>)
 800b094:	2200      	movs	r2, #0
 800b096:	4650      	mov	r0, sl
 800b098:	4659      	mov	r1, fp
 800b09a:	f7f5 fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d079      	beq.n	800b196 <_dtoa_r+0x4de>
 800b0a2:	9b03      	ldr	r3, [sp, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d076      	beq.n	800b196 <_dtoa_r+0x4de>
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	dd36      	ble.n	800b11c <_dtoa_r+0x464>
 800b0ae:	9b00      	ldr	r3, [sp, #0]
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	4659      	mov	r1, fp
 800b0b4:	1e5f      	subs	r7, r3, #1
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	4b88      	ldr	r3, [pc, #544]	; (800b2dc <_dtoa_r+0x624>)
 800b0ba:	f7f5 fabd 	bl	8000638 <__aeabi_dmul>
 800b0be:	9e02      	ldr	r6, [sp, #8]
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	468b      	mov	fp, r1
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f7f5 fa4c 	bl	8000564 <__aeabi_i2d>
 800b0cc:	4652      	mov	r2, sl
 800b0ce:	465b      	mov	r3, fp
 800b0d0:	f7f5 fab2 	bl	8000638 <__aeabi_dmul>
 800b0d4:	4b82      	ldr	r3, [pc, #520]	; (800b2e0 <_dtoa_r+0x628>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f7f5 f8f8 	bl	80002cc <__adddf3>
 800b0dc:	46d0      	mov	r8, sl
 800b0de:	46d9      	mov	r9, fp
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b0e6:	2e00      	cmp	r6, #0
 800b0e8:	d158      	bne.n	800b19c <_dtoa_r+0x4e4>
 800b0ea:	4b7e      	ldr	r3, [pc, #504]	; (800b2e4 <_dtoa_r+0x62c>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	f7f5 f8e9 	bl	80002c8 <__aeabi_dsub>
 800b0f6:	4652      	mov	r2, sl
 800b0f8:	465b      	mov	r3, fp
 800b0fa:	4680      	mov	r8, r0
 800b0fc:	4689      	mov	r9, r1
 800b0fe:	f7f5 fd2b 	bl	8000b58 <__aeabi_dcmpgt>
 800b102:	2800      	cmp	r0, #0
 800b104:	f040 8295 	bne.w	800b632 <_dtoa_r+0x97a>
 800b108:	4652      	mov	r2, sl
 800b10a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 fd03 	bl	8000b1c <__aeabi_dcmplt>
 800b116:	2800      	cmp	r0, #0
 800b118:	f040 8289 	bne.w	800b62e <_dtoa_r+0x976>
 800b11c:	ec5b ab19 	vmov	sl, fp, d9
 800b120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b122:	2b00      	cmp	r3, #0
 800b124:	f2c0 8148 	blt.w	800b3b8 <_dtoa_r+0x700>
 800b128:	9a00      	ldr	r2, [sp, #0]
 800b12a:	2a0e      	cmp	r2, #14
 800b12c:	f300 8144 	bgt.w	800b3b8 <_dtoa_r+0x700>
 800b130:	4b67      	ldr	r3, [pc, #412]	; (800b2d0 <_dtoa_r+0x618>)
 800b132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b136:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f280 80d5 	bge.w	800b2ec <_dtoa_r+0x634>
 800b142:	9b03      	ldr	r3, [sp, #12]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f300 80d1 	bgt.w	800b2ec <_dtoa_r+0x634>
 800b14a:	f040 826f 	bne.w	800b62c <_dtoa_r+0x974>
 800b14e:	4b65      	ldr	r3, [pc, #404]	; (800b2e4 <_dtoa_r+0x62c>)
 800b150:	2200      	movs	r2, #0
 800b152:	4640      	mov	r0, r8
 800b154:	4649      	mov	r1, r9
 800b156:	f7f5 fa6f 	bl	8000638 <__aeabi_dmul>
 800b15a:	4652      	mov	r2, sl
 800b15c:	465b      	mov	r3, fp
 800b15e:	f7f5 fcf1 	bl	8000b44 <__aeabi_dcmpge>
 800b162:	9e03      	ldr	r6, [sp, #12]
 800b164:	4637      	mov	r7, r6
 800b166:	2800      	cmp	r0, #0
 800b168:	f040 8245 	bne.w	800b5f6 <_dtoa_r+0x93e>
 800b16c:	9d01      	ldr	r5, [sp, #4]
 800b16e:	2331      	movs	r3, #49	; 0x31
 800b170:	f805 3b01 	strb.w	r3, [r5], #1
 800b174:	9b00      	ldr	r3, [sp, #0]
 800b176:	3301      	adds	r3, #1
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	e240      	b.n	800b5fe <_dtoa_r+0x946>
 800b17c:	07f2      	lsls	r2, r6, #31
 800b17e:	d505      	bpl.n	800b18c <_dtoa_r+0x4d4>
 800b180:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b184:	f7f5 fa58 	bl	8000638 <__aeabi_dmul>
 800b188:	3501      	adds	r5, #1
 800b18a:	2301      	movs	r3, #1
 800b18c:	1076      	asrs	r6, r6, #1
 800b18e:	3708      	adds	r7, #8
 800b190:	e777      	b.n	800b082 <_dtoa_r+0x3ca>
 800b192:	2502      	movs	r5, #2
 800b194:	e779      	b.n	800b08a <_dtoa_r+0x3d2>
 800b196:	9f00      	ldr	r7, [sp, #0]
 800b198:	9e03      	ldr	r6, [sp, #12]
 800b19a:	e794      	b.n	800b0c6 <_dtoa_r+0x40e>
 800b19c:	9901      	ldr	r1, [sp, #4]
 800b19e:	4b4c      	ldr	r3, [pc, #304]	; (800b2d0 <_dtoa_r+0x618>)
 800b1a0:	4431      	add	r1, r6
 800b1a2:	910d      	str	r1, [sp, #52]	; 0x34
 800b1a4:	9908      	ldr	r1, [sp, #32]
 800b1a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b1aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d043      	beq.n	800b23a <_dtoa_r+0x582>
 800b1b2:	494d      	ldr	r1, [pc, #308]	; (800b2e8 <_dtoa_r+0x630>)
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	f7f5 fb69 	bl	800088c <__aeabi_ddiv>
 800b1ba:	4652      	mov	r2, sl
 800b1bc:	465b      	mov	r3, fp
 800b1be:	f7f5 f883 	bl	80002c8 <__aeabi_dsub>
 800b1c2:	9d01      	ldr	r5, [sp, #4]
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	468b      	mov	fp, r1
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	f7f5 fce4 	bl	8000b98 <__aeabi_d2iz>
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	f7f5 f9c7 	bl	8000564 <__aeabi_i2d>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4640      	mov	r0, r8
 800b1dc:	4649      	mov	r1, r9
 800b1de:	f7f5 f873 	bl	80002c8 <__aeabi_dsub>
 800b1e2:	3630      	adds	r6, #48	; 0x30
 800b1e4:	f805 6b01 	strb.w	r6, [r5], #1
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	465b      	mov	r3, fp
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	4689      	mov	r9, r1
 800b1f0:	f7f5 fc94 	bl	8000b1c <__aeabi_dcmplt>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d163      	bne.n	800b2c0 <_dtoa_r+0x608>
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	4936      	ldr	r1, [pc, #216]	; (800b2d8 <_dtoa_r+0x620>)
 800b1fe:	2000      	movs	r0, #0
 800b200:	f7f5 f862 	bl	80002c8 <__aeabi_dsub>
 800b204:	4652      	mov	r2, sl
 800b206:	465b      	mov	r3, fp
 800b208:	f7f5 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	f040 80b5 	bne.w	800b37c <_dtoa_r+0x6c4>
 800b212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b214:	429d      	cmp	r5, r3
 800b216:	d081      	beq.n	800b11c <_dtoa_r+0x464>
 800b218:	4b30      	ldr	r3, [pc, #192]	; (800b2dc <_dtoa_r+0x624>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	4650      	mov	r0, sl
 800b21e:	4659      	mov	r1, fp
 800b220:	f7f5 fa0a 	bl	8000638 <__aeabi_dmul>
 800b224:	4b2d      	ldr	r3, [pc, #180]	; (800b2dc <_dtoa_r+0x624>)
 800b226:	4682      	mov	sl, r0
 800b228:	468b      	mov	fp, r1
 800b22a:	4640      	mov	r0, r8
 800b22c:	4649      	mov	r1, r9
 800b22e:	2200      	movs	r2, #0
 800b230:	f7f5 fa02 	bl	8000638 <__aeabi_dmul>
 800b234:	4680      	mov	r8, r0
 800b236:	4689      	mov	r9, r1
 800b238:	e7c6      	b.n	800b1c8 <_dtoa_r+0x510>
 800b23a:	4650      	mov	r0, sl
 800b23c:	4659      	mov	r1, fp
 800b23e:	f7f5 f9fb 	bl	8000638 <__aeabi_dmul>
 800b242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b244:	9d01      	ldr	r5, [sp, #4]
 800b246:	930f      	str	r3, [sp, #60]	; 0x3c
 800b248:	4682      	mov	sl, r0
 800b24a:	468b      	mov	fp, r1
 800b24c:	4649      	mov	r1, r9
 800b24e:	4640      	mov	r0, r8
 800b250:	f7f5 fca2 	bl	8000b98 <__aeabi_d2iz>
 800b254:	4606      	mov	r6, r0
 800b256:	f7f5 f985 	bl	8000564 <__aeabi_i2d>
 800b25a:	3630      	adds	r6, #48	; 0x30
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4640      	mov	r0, r8
 800b262:	4649      	mov	r1, r9
 800b264:	f7f5 f830 	bl	80002c8 <__aeabi_dsub>
 800b268:	f805 6b01 	strb.w	r6, [r5], #1
 800b26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b26e:	429d      	cmp	r5, r3
 800b270:	4680      	mov	r8, r0
 800b272:	4689      	mov	r9, r1
 800b274:	f04f 0200 	mov.w	r2, #0
 800b278:	d124      	bne.n	800b2c4 <_dtoa_r+0x60c>
 800b27a:	4b1b      	ldr	r3, [pc, #108]	; (800b2e8 <_dtoa_r+0x630>)
 800b27c:	4650      	mov	r0, sl
 800b27e:	4659      	mov	r1, fp
 800b280:	f7f5 f824 	bl	80002cc <__adddf3>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	4640      	mov	r0, r8
 800b28a:	4649      	mov	r1, r9
 800b28c:	f7f5 fc64 	bl	8000b58 <__aeabi_dcmpgt>
 800b290:	2800      	cmp	r0, #0
 800b292:	d173      	bne.n	800b37c <_dtoa_r+0x6c4>
 800b294:	4652      	mov	r2, sl
 800b296:	465b      	mov	r3, fp
 800b298:	4913      	ldr	r1, [pc, #76]	; (800b2e8 <_dtoa_r+0x630>)
 800b29a:	2000      	movs	r0, #0
 800b29c:	f7f5 f814 	bl	80002c8 <__aeabi_dsub>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	f7f5 fc38 	bl	8000b1c <__aeabi_dcmplt>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f43f af35 	beq.w	800b11c <_dtoa_r+0x464>
 800b2b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b2b4:	1e6b      	subs	r3, r5, #1
 800b2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2bc:	2b30      	cmp	r3, #48	; 0x30
 800b2be:	d0f8      	beq.n	800b2b2 <_dtoa_r+0x5fa>
 800b2c0:	9700      	str	r7, [sp, #0]
 800b2c2:	e049      	b.n	800b358 <_dtoa_r+0x6a0>
 800b2c4:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <_dtoa_r+0x624>)
 800b2c6:	f7f5 f9b7 	bl	8000638 <__aeabi_dmul>
 800b2ca:	4680      	mov	r8, r0
 800b2cc:	4689      	mov	r9, r1
 800b2ce:	e7bd      	b.n	800b24c <_dtoa_r+0x594>
 800b2d0:	0800df20 	.word	0x0800df20
 800b2d4:	0800def8 	.word	0x0800def8
 800b2d8:	3ff00000 	.word	0x3ff00000
 800b2dc:	40240000 	.word	0x40240000
 800b2e0:	401c0000 	.word	0x401c0000
 800b2e4:	40140000 	.word	0x40140000
 800b2e8:	3fe00000 	.word	0x3fe00000
 800b2ec:	9d01      	ldr	r5, [sp, #4]
 800b2ee:	4656      	mov	r6, sl
 800b2f0:	465f      	mov	r7, fp
 800b2f2:	4642      	mov	r2, r8
 800b2f4:	464b      	mov	r3, r9
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	4639      	mov	r1, r7
 800b2fa:	f7f5 fac7 	bl	800088c <__aeabi_ddiv>
 800b2fe:	f7f5 fc4b 	bl	8000b98 <__aeabi_d2iz>
 800b302:	4682      	mov	sl, r0
 800b304:	f7f5 f92e 	bl	8000564 <__aeabi_i2d>
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	f7f5 f994 	bl	8000638 <__aeabi_dmul>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b31c:	f7f4 ffd4 	bl	80002c8 <__aeabi_dsub>
 800b320:	f805 6b01 	strb.w	r6, [r5], #1
 800b324:	9e01      	ldr	r6, [sp, #4]
 800b326:	9f03      	ldr	r7, [sp, #12]
 800b328:	1bae      	subs	r6, r5, r6
 800b32a:	42b7      	cmp	r7, r6
 800b32c:	4602      	mov	r2, r0
 800b32e:	460b      	mov	r3, r1
 800b330:	d135      	bne.n	800b39e <_dtoa_r+0x6e6>
 800b332:	f7f4 ffcb 	bl	80002cc <__adddf3>
 800b336:	4642      	mov	r2, r8
 800b338:	464b      	mov	r3, r9
 800b33a:	4606      	mov	r6, r0
 800b33c:	460f      	mov	r7, r1
 800b33e:	f7f5 fc0b 	bl	8000b58 <__aeabi_dcmpgt>
 800b342:	b9d0      	cbnz	r0, 800b37a <_dtoa_r+0x6c2>
 800b344:	4642      	mov	r2, r8
 800b346:	464b      	mov	r3, r9
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f5 fbdc 	bl	8000b08 <__aeabi_dcmpeq>
 800b350:	b110      	cbz	r0, 800b358 <_dtoa_r+0x6a0>
 800b352:	f01a 0f01 	tst.w	sl, #1
 800b356:	d110      	bne.n	800b37a <_dtoa_r+0x6c2>
 800b358:	4620      	mov	r0, r4
 800b35a:	ee18 1a10 	vmov	r1, s16
 800b35e:	f000 fe75 	bl	800c04c <_Bfree>
 800b362:	2300      	movs	r3, #0
 800b364:	9800      	ldr	r0, [sp, #0]
 800b366:	702b      	strb	r3, [r5, #0]
 800b368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b36a:	3001      	adds	r0, #1
 800b36c:	6018      	str	r0, [r3, #0]
 800b36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b370:	2b00      	cmp	r3, #0
 800b372:	f43f acf1 	beq.w	800ad58 <_dtoa_r+0xa0>
 800b376:	601d      	str	r5, [r3, #0]
 800b378:	e4ee      	b.n	800ad58 <_dtoa_r+0xa0>
 800b37a:	9f00      	ldr	r7, [sp, #0]
 800b37c:	462b      	mov	r3, r5
 800b37e:	461d      	mov	r5, r3
 800b380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b384:	2a39      	cmp	r2, #57	; 0x39
 800b386:	d106      	bne.n	800b396 <_dtoa_r+0x6de>
 800b388:	9a01      	ldr	r2, [sp, #4]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d1f7      	bne.n	800b37e <_dtoa_r+0x6c6>
 800b38e:	9901      	ldr	r1, [sp, #4]
 800b390:	2230      	movs	r2, #48	; 0x30
 800b392:	3701      	adds	r7, #1
 800b394:	700a      	strb	r2, [r1, #0]
 800b396:	781a      	ldrb	r2, [r3, #0]
 800b398:	3201      	adds	r2, #1
 800b39a:	701a      	strb	r2, [r3, #0]
 800b39c:	e790      	b.n	800b2c0 <_dtoa_r+0x608>
 800b39e:	4ba6      	ldr	r3, [pc, #664]	; (800b638 <_dtoa_r+0x980>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f7f5 f949 	bl	8000638 <__aeabi_dmul>
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460f      	mov	r7, r1
 800b3ae:	f7f5 fbab 	bl	8000b08 <__aeabi_dcmpeq>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d09d      	beq.n	800b2f2 <_dtoa_r+0x63a>
 800b3b6:	e7cf      	b.n	800b358 <_dtoa_r+0x6a0>
 800b3b8:	9a08      	ldr	r2, [sp, #32]
 800b3ba:	2a00      	cmp	r2, #0
 800b3bc:	f000 80d7 	beq.w	800b56e <_dtoa_r+0x8b6>
 800b3c0:	9a06      	ldr	r2, [sp, #24]
 800b3c2:	2a01      	cmp	r2, #1
 800b3c4:	f300 80ba 	bgt.w	800b53c <_dtoa_r+0x884>
 800b3c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3ca:	2a00      	cmp	r2, #0
 800b3cc:	f000 80b2 	beq.w	800b534 <_dtoa_r+0x87c>
 800b3d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3d4:	9e07      	ldr	r6, [sp, #28]
 800b3d6:	9d04      	ldr	r5, [sp, #16]
 800b3d8:	9a04      	ldr	r2, [sp, #16]
 800b3da:	441a      	add	r2, r3
 800b3dc:	9204      	str	r2, [sp, #16]
 800b3de:	9a05      	ldr	r2, [sp, #20]
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	441a      	add	r2, r3
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	9205      	str	r2, [sp, #20]
 800b3e8:	f000 ff32 	bl	800c250 <__i2b>
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	2d00      	cmp	r5, #0
 800b3f0:	dd0c      	ble.n	800b40c <_dtoa_r+0x754>
 800b3f2:	9b05      	ldr	r3, [sp, #20]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dd09      	ble.n	800b40c <_dtoa_r+0x754>
 800b3f8:	42ab      	cmp	r3, r5
 800b3fa:	9a04      	ldr	r2, [sp, #16]
 800b3fc:	bfa8      	it	ge
 800b3fe:	462b      	movge	r3, r5
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	9204      	str	r2, [sp, #16]
 800b404:	9a05      	ldr	r2, [sp, #20]
 800b406:	1aed      	subs	r5, r5, r3
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	9305      	str	r3, [sp, #20]
 800b40c:	9b07      	ldr	r3, [sp, #28]
 800b40e:	b31b      	cbz	r3, 800b458 <_dtoa_r+0x7a0>
 800b410:	9b08      	ldr	r3, [sp, #32]
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 80af 	beq.w	800b576 <_dtoa_r+0x8be>
 800b418:	2e00      	cmp	r6, #0
 800b41a:	dd13      	ble.n	800b444 <_dtoa_r+0x78c>
 800b41c:	4639      	mov	r1, r7
 800b41e:	4632      	mov	r2, r6
 800b420:	4620      	mov	r0, r4
 800b422:	f000 ffd5 	bl	800c3d0 <__pow5mult>
 800b426:	ee18 2a10 	vmov	r2, s16
 800b42a:	4601      	mov	r1, r0
 800b42c:	4607      	mov	r7, r0
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 ff24 	bl	800c27c <__multiply>
 800b434:	ee18 1a10 	vmov	r1, s16
 800b438:	4680      	mov	r8, r0
 800b43a:	4620      	mov	r0, r4
 800b43c:	f000 fe06 	bl	800c04c <_Bfree>
 800b440:	ee08 8a10 	vmov	s16, r8
 800b444:	9b07      	ldr	r3, [sp, #28]
 800b446:	1b9a      	subs	r2, r3, r6
 800b448:	d006      	beq.n	800b458 <_dtoa_r+0x7a0>
 800b44a:	ee18 1a10 	vmov	r1, s16
 800b44e:	4620      	mov	r0, r4
 800b450:	f000 ffbe 	bl	800c3d0 <__pow5mult>
 800b454:	ee08 0a10 	vmov	s16, r0
 800b458:	2101      	movs	r1, #1
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 fef8 	bl	800c250 <__i2b>
 800b460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b462:	2b00      	cmp	r3, #0
 800b464:	4606      	mov	r6, r0
 800b466:	f340 8088 	ble.w	800b57a <_dtoa_r+0x8c2>
 800b46a:	461a      	mov	r2, r3
 800b46c:	4601      	mov	r1, r0
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 ffae 	bl	800c3d0 <__pow5mult>
 800b474:	9b06      	ldr	r3, [sp, #24]
 800b476:	2b01      	cmp	r3, #1
 800b478:	4606      	mov	r6, r0
 800b47a:	f340 8081 	ble.w	800b580 <_dtoa_r+0x8c8>
 800b47e:	f04f 0800 	mov.w	r8, #0
 800b482:	6933      	ldr	r3, [r6, #16]
 800b484:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b488:	6918      	ldr	r0, [r3, #16]
 800b48a:	f000 fe91 	bl	800c1b0 <__hi0bits>
 800b48e:	f1c0 0020 	rsb	r0, r0, #32
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	4418      	add	r0, r3
 800b496:	f010 001f 	ands.w	r0, r0, #31
 800b49a:	f000 8092 	beq.w	800b5c2 <_dtoa_r+0x90a>
 800b49e:	f1c0 0320 	rsb	r3, r0, #32
 800b4a2:	2b04      	cmp	r3, #4
 800b4a4:	f340 808a 	ble.w	800b5bc <_dtoa_r+0x904>
 800b4a8:	f1c0 001c 	rsb	r0, r0, #28
 800b4ac:	9b04      	ldr	r3, [sp, #16]
 800b4ae:	4403      	add	r3, r0
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	9b05      	ldr	r3, [sp, #20]
 800b4b4:	4403      	add	r3, r0
 800b4b6:	4405      	add	r5, r0
 800b4b8:	9305      	str	r3, [sp, #20]
 800b4ba:	9b04      	ldr	r3, [sp, #16]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dd07      	ble.n	800b4d0 <_dtoa_r+0x818>
 800b4c0:	ee18 1a10 	vmov	r1, s16
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f000 ffdc 	bl	800c484 <__lshift>
 800b4cc:	ee08 0a10 	vmov	s16, r0
 800b4d0:	9b05      	ldr	r3, [sp, #20]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	dd05      	ble.n	800b4e2 <_dtoa_r+0x82a>
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	461a      	mov	r2, r3
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f000 ffd2 	bl	800c484 <__lshift>
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d06e      	beq.n	800b5c6 <_dtoa_r+0x90e>
 800b4e8:	ee18 0a10 	vmov	r0, s16
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	f001 f839 	bl	800c564 <__mcmp>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	da67      	bge.n	800b5c6 <_dtoa_r+0x90e>
 800b4f6:	9b00      	ldr	r3, [sp, #0]
 800b4f8:	3b01      	subs	r3, #1
 800b4fa:	ee18 1a10 	vmov	r1, s16
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	220a      	movs	r2, #10
 800b502:	2300      	movs	r3, #0
 800b504:	4620      	mov	r0, r4
 800b506:	f000 fdc3 	bl	800c090 <__multadd>
 800b50a:	9b08      	ldr	r3, [sp, #32]
 800b50c:	ee08 0a10 	vmov	s16, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 81b1 	beq.w	800b878 <_dtoa_r+0xbc0>
 800b516:	2300      	movs	r3, #0
 800b518:	4639      	mov	r1, r7
 800b51a:	220a      	movs	r2, #10
 800b51c:	4620      	mov	r0, r4
 800b51e:	f000 fdb7 	bl	800c090 <__multadd>
 800b522:	9b02      	ldr	r3, [sp, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	4607      	mov	r7, r0
 800b528:	f300 808e 	bgt.w	800b648 <_dtoa_r+0x990>
 800b52c:	9b06      	ldr	r3, [sp, #24]
 800b52e:	2b02      	cmp	r3, #2
 800b530:	dc51      	bgt.n	800b5d6 <_dtoa_r+0x91e>
 800b532:	e089      	b.n	800b648 <_dtoa_r+0x990>
 800b534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b53a:	e74b      	b.n	800b3d4 <_dtoa_r+0x71c>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	1e5e      	subs	r6, r3, #1
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	42b3      	cmp	r3, r6
 800b544:	bfbf      	itttt	lt
 800b546:	9b07      	ldrlt	r3, [sp, #28]
 800b548:	9607      	strlt	r6, [sp, #28]
 800b54a:	1af2      	sublt	r2, r6, r3
 800b54c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b54e:	bfb6      	itet	lt
 800b550:	189b      	addlt	r3, r3, r2
 800b552:	1b9e      	subge	r6, r3, r6
 800b554:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	bfb8      	it	lt
 800b55a:	2600      	movlt	r6, #0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	bfb7      	itett	lt
 800b560:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b564:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b568:	1a9d      	sublt	r5, r3, r2
 800b56a:	2300      	movlt	r3, #0
 800b56c:	e734      	b.n	800b3d8 <_dtoa_r+0x720>
 800b56e:	9e07      	ldr	r6, [sp, #28]
 800b570:	9d04      	ldr	r5, [sp, #16]
 800b572:	9f08      	ldr	r7, [sp, #32]
 800b574:	e73b      	b.n	800b3ee <_dtoa_r+0x736>
 800b576:	9a07      	ldr	r2, [sp, #28]
 800b578:	e767      	b.n	800b44a <_dtoa_r+0x792>
 800b57a:	9b06      	ldr	r3, [sp, #24]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	dc18      	bgt.n	800b5b2 <_dtoa_r+0x8fa>
 800b580:	f1ba 0f00 	cmp.w	sl, #0
 800b584:	d115      	bne.n	800b5b2 <_dtoa_r+0x8fa>
 800b586:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b58a:	b993      	cbnz	r3, 800b5b2 <_dtoa_r+0x8fa>
 800b58c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b590:	0d1b      	lsrs	r3, r3, #20
 800b592:	051b      	lsls	r3, r3, #20
 800b594:	b183      	cbz	r3, 800b5b8 <_dtoa_r+0x900>
 800b596:	9b04      	ldr	r3, [sp, #16]
 800b598:	3301      	adds	r3, #1
 800b59a:	9304      	str	r3, [sp, #16]
 800b59c:	9b05      	ldr	r3, [sp, #20]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	9305      	str	r3, [sp, #20]
 800b5a2:	f04f 0801 	mov.w	r8, #1
 800b5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f47f af6a 	bne.w	800b482 <_dtoa_r+0x7ca>
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e76f      	b.n	800b492 <_dtoa_r+0x7da>
 800b5b2:	f04f 0800 	mov.w	r8, #0
 800b5b6:	e7f6      	b.n	800b5a6 <_dtoa_r+0x8ee>
 800b5b8:	4698      	mov	r8, r3
 800b5ba:	e7f4      	b.n	800b5a6 <_dtoa_r+0x8ee>
 800b5bc:	f43f af7d 	beq.w	800b4ba <_dtoa_r+0x802>
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	301c      	adds	r0, #28
 800b5c4:	e772      	b.n	800b4ac <_dtoa_r+0x7f4>
 800b5c6:	9b03      	ldr	r3, [sp, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	dc37      	bgt.n	800b63c <_dtoa_r+0x984>
 800b5cc:	9b06      	ldr	r3, [sp, #24]
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	dd34      	ble.n	800b63c <_dtoa_r+0x984>
 800b5d2:	9b03      	ldr	r3, [sp, #12]
 800b5d4:	9302      	str	r3, [sp, #8]
 800b5d6:	9b02      	ldr	r3, [sp, #8]
 800b5d8:	b96b      	cbnz	r3, 800b5f6 <_dtoa_r+0x93e>
 800b5da:	4631      	mov	r1, r6
 800b5dc:	2205      	movs	r2, #5
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 fd56 	bl	800c090 <__multadd>
 800b5e4:	4601      	mov	r1, r0
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	ee18 0a10 	vmov	r0, s16
 800b5ec:	f000 ffba 	bl	800c564 <__mcmp>
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	f73f adbb 	bgt.w	800b16c <_dtoa_r+0x4b4>
 800b5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5f8:	9d01      	ldr	r5, [sp, #4]
 800b5fa:	43db      	mvns	r3, r3
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	f04f 0800 	mov.w	r8, #0
 800b602:	4631      	mov	r1, r6
 800b604:	4620      	mov	r0, r4
 800b606:	f000 fd21 	bl	800c04c <_Bfree>
 800b60a:	2f00      	cmp	r7, #0
 800b60c:	f43f aea4 	beq.w	800b358 <_dtoa_r+0x6a0>
 800b610:	f1b8 0f00 	cmp.w	r8, #0
 800b614:	d005      	beq.n	800b622 <_dtoa_r+0x96a>
 800b616:	45b8      	cmp	r8, r7
 800b618:	d003      	beq.n	800b622 <_dtoa_r+0x96a>
 800b61a:	4641      	mov	r1, r8
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fd15 	bl	800c04c <_Bfree>
 800b622:	4639      	mov	r1, r7
 800b624:	4620      	mov	r0, r4
 800b626:	f000 fd11 	bl	800c04c <_Bfree>
 800b62a:	e695      	b.n	800b358 <_dtoa_r+0x6a0>
 800b62c:	2600      	movs	r6, #0
 800b62e:	4637      	mov	r7, r6
 800b630:	e7e1      	b.n	800b5f6 <_dtoa_r+0x93e>
 800b632:	9700      	str	r7, [sp, #0]
 800b634:	4637      	mov	r7, r6
 800b636:	e599      	b.n	800b16c <_dtoa_r+0x4b4>
 800b638:	40240000 	.word	0x40240000
 800b63c:	9b08      	ldr	r3, [sp, #32]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f000 80ca 	beq.w	800b7d8 <_dtoa_r+0xb20>
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	9302      	str	r3, [sp, #8]
 800b648:	2d00      	cmp	r5, #0
 800b64a:	dd05      	ble.n	800b658 <_dtoa_r+0x9a0>
 800b64c:	4639      	mov	r1, r7
 800b64e:	462a      	mov	r2, r5
 800b650:	4620      	mov	r0, r4
 800b652:	f000 ff17 	bl	800c484 <__lshift>
 800b656:	4607      	mov	r7, r0
 800b658:	f1b8 0f00 	cmp.w	r8, #0
 800b65c:	d05b      	beq.n	800b716 <_dtoa_r+0xa5e>
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	4620      	mov	r0, r4
 800b662:	f000 fcb3 	bl	800bfcc <_Balloc>
 800b666:	4605      	mov	r5, r0
 800b668:	b928      	cbnz	r0, 800b676 <_dtoa_r+0x9be>
 800b66a:	4b87      	ldr	r3, [pc, #540]	; (800b888 <_dtoa_r+0xbd0>)
 800b66c:	4602      	mov	r2, r0
 800b66e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b672:	f7ff bb3b 	b.w	800acec <_dtoa_r+0x34>
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	3202      	adds	r2, #2
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	f107 010c 	add.w	r1, r7, #12
 800b680:	300c      	adds	r0, #12
 800b682:	f000 fc95 	bl	800bfb0 <memcpy>
 800b686:	2201      	movs	r2, #1
 800b688:	4629      	mov	r1, r5
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fefa 	bl	800c484 <__lshift>
 800b690:	9b01      	ldr	r3, [sp, #4]
 800b692:	f103 0901 	add.w	r9, r3, #1
 800b696:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b69a:	4413      	add	r3, r2
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	f00a 0301 	and.w	r3, sl, #1
 800b6a2:	46b8      	mov	r8, r7
 800b6a4:	9304      	str	r3, [sp, #16]
 800b6a6:	4607      	mov	r7, r0
 800b6a8:	4631      	mov	r1, r6
 800b6aa:	ee18 0a10 	vmov	r0, s16
 800b6ae:	f7ff fa77 	bl	800aba0 <quorem>
 800b6b2:	4641      	mov	r1, r8
 800b6b4:	9002      	str	r0, [sp, #8]
 800b6b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b6ba:	ee18 0a10 	vmov	r0, s16
 800b6be:	f000 ff51 	bl	800c564 <__mcmp>
 800b6c2:	463a      	mov	r2, r7
 800b6c4:	9003      	str	r0, [sp, #12]
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f000 ff67 	bl	800c59c <__mdiff>
 800b6ce:	68c2      	ldr	r2, [r0, #12]
 800b6d0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b6d4:	4605      	mov	r5, r0
 800b6d6:	bb02      	cbnz	r2, 800b71a <_dtoa_r+0xa62>
 800b6d8:	4601      	mov	r1, r0
 800b6da:	ee18 0a10 	vmov	r0, s16
 800b6de:	f000 ff41 	bl	800c564 <__mcmp>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	9207      	str	r2, [sp, #28]
 800b6ea:	f000 fcaf 	bl	800c04c <_Bfree>
 800b6ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b6f2:	ea43 0102 	orr.w	r1, r3, r2
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	464d      	mov	r5, r9
 800b6fc:	d10f      	bne.n	800b71e <_dtoa_r+0xa66>
 800b6fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b702:	d02a      	beq.n	800b75a <_dtoa_r+0xaa2>
 800b704:	9b03      	ldr	r3, [sp, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	dd02      	ble.n	800b710 <_dtoa_r+0xa58>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b710:	f88b a000 	strb.w	sl, [fp]
 800b714:	e775      	b.n	800b602 <_dtoa_r+0x94a>
 800b716:	4638      	mov	r0, r7
 800b718:	e7ba      	b.n	800b690 <_dtoa_r+0x9d8>
 800b71a:	2201      	movs	r2, #1
 800b71c:	e7e2      	b.n	800b6e4 <_dtoa_r+0xa2c>
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	db04      	blt.n	800b72e <_dtoa_r+0xa76>
 800b724:	9906      	ldr	r1, [sp, #24]
 800b726:	430b      	orrs	r3, r1
 800b728:	9904      	ldr	r1, [sp, #16]
 800b72a:	430b      	orrs	r3, r1
 800b72c:	d122      	bne.n	800b774 <_dtoa_r+0xabc>
 800b72e:	2a00      	cmp	r2, #0
 800b730:	ddee      	ble.n	800b710 <_dtoa_r+0xa58>
 800b732:	ee18 1a10 	vmov	r1, s16
 800b736:	2201      	movs	r2, #1
 800b738:	4620      	mov	r0, r4
 800b73a:	f000 fea3 	bl	800c484 <__lshift>
 800b73e:	4631      	mov	r1, r6
 800b740:	ee08 0a10 	vmov	s16, r0
 800b744:	f000 ff0e 	bl	800c564 <__mcmp>
 800b748:	2800      	cmp	r0, #0
 800b74a:	dc03      	bgt.n	800b754 <_dtoa_r+0xa9c>
 800b74c:	d1e0      	bne.n	800b710 <_dtoa_r+0xa58>
 800b74e:	f01a 0f01 	tst.w	sl, #1
 800b752:	d0dd      	beq.n	800b710 <_dtoa_r+0xa58>
 800b754:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b758:	d1d7      	bne.n	800b70a <_dtoa_r+0xa52>
 800b75a:	2339      	movs	r3, #57	; 0x39
 800b75c:	f88b 3000 	strb.w	r3, [fp]
 800b760:	462b      	mov	r3, r5
 800b762:	461d      	mov	r5, r3
 800b764:	3b01      	subs	r3, #1
 800b766:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b76a:	2a39      	cmp	r2, #57	; 0x39
 800b76c:	d071      	beq.n	800b852 <_dtoa_r+0xb9a>
 800b76e:	3201      	adds	r2, #1
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	e746      	b.n	800b602 <_dtoa_r+0x94a>
 800b774:	2a00      	cmp	r2, #0
 800b776:	dd07      	ble.n	800b788 <_dtoa_r+0xad0>
 800b778:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b77c:	d0ed      	beq.n	800b75a <_dtoa_r+0xaa2>
 800b77e:	f10a 0301 	add.w	r3, sl, #1
 800b782:	f88b 3000 	strb.w	r3, [fp]
 800b786:	e73c      	b.n	800b602 <_dtoa_r+0x94a>
 800b788:	9b05      	ldr	r3, [sp, #20]
 800b78a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b78e:	4599      	cmp	r9, r3
 800b790:	d047      	beq.n	800b822 <_dtoa_r+0xb6a>
 800b792:	ee18 1a10 	vmov	r1, s16
 800b796:	2300      	movs	r3, #0
 800b798:	220a      	movs	r2, #10
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 fc78 	bl	800c090 <__multadd>
 800b7a0:	45b8      	cmp	r8, r7
 800b7a2:	ee08 0a10 	vmov	s16, r0
 800b7a6:	f04f 0300 	mov.w	r3, #0
 800b7aa:	f04f 020a 	mov.w	r2, #10
 800b7ae:	4641      	mov	r1, r8
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	d106      	bne.n	800b7c2 <_dtoa_r+0xb0a>
 800b7b4:	f000 fc6c 	bl	800c090 <__multadd>
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	f109 0901 	add.w	r9, r9, #1
 800b7c0:	e772      	b.n	800b6a8 <_dtoa_r+0x9f0>
 800b7c2:	f000 fc65 	bl	800c090 <__multadd>
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	4680      	mov	r8, r0
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	220a      	movs	r2, #10
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 fc5e 	bl	800c090 <__multadd>
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	e7f1      	b.n	800b7bc <_dtoa_r+0xb04>
 800b7d8:	9b03      	ldr	r3, [sp, #12]
 800b7da:	9302      	str	r3, [sp, #8]
 800b7dc:	9d01      	ldr	r5, [sp, #4]
 800b7de:	ee18 0a10 	vmov	r0, s16
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	f7ff f9dc 	bl	800aba0 <quorem>
 800b7e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7ec:	9b01      	ldr	r3, [sp, #4]
 800b7ee:	f805 ab01 	strb.w	sl, [r5], #1
 800b7f2:	1aea      	subs	r2, r5, r3
 800b7f4:	9b02      	ldr	r3, [sp, #8]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	dd09      	ble.n	800b80e <_dtoa_r+0xb56>
 800b7fa:	ee18 1a10 	vmov	r1, s16
 800b7fe:	2300      	movs	r3, #0
 800b800:	220a      	movs	r2, #10
 800b802:	4620      	mov	r0, r4
 800b804:	f000 fc44 	bl	800c090 <__multadd>
 800b808:	ee08 0a10 	vmov	s16, r0
 800b80c:	e7e7      	b.n	800b7de <_dtoa_r+0xb26>
 800b80e:	9b02      	ldr	r3, [sp, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	bfc8      	it	gt
 800b814:	461d      	movgt	r5, r3
 800b816:	9b01      	ldr	r3, [sp, #4]
 800b818:	bfd8      	it	le
 800b81a:	2501      	movle	r5, #1
 800b81c:	441d      	add	r5, r3
 800b81e:	f04f 0800 	mov.w	r8, #0
 800b822:	ee18 1a10 	vmov	r1, s16
 800b826:	2201      	movs	r2, #1
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 fe2b 	bl	800c484 <__lshift>
 800b82e:	4631      	mov	r1, r6
 800b830:	ee08 0a10 	vmov	s16, r0
 800b834:	f000 fe96 	bl	800c564 <__mcmp>
 800b838:	2800      	cmp	r0, #0
 800b83a:	dc91      	bgt.n	800b760 <_dtoa_r+0xaa8>
 800b83c:	d102      	bne.n	800b844 <_dtoa_r+0xb8c>
 800b83e:	f01a 0f01 	tst.w	sl, #1
 800b842:	d18d      	bne.n	800b760 <_dtoa_r+0xaa8>
 800b844:	462b      	mov	r3, r5
 800b846:	461d      	mov	r5, r3
 800b848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b84c:	2a30      	cmp	r2, #48	; 0x30
 800b84e:	d0fa      	beq.n	800b846 <_dtoa_r+0xb8e>
 800b850:	e6d7      	b.n	800b602 <_dtoa_r+0x94a>
 800b852:	9a01      	ldr	r2, [sp, #4]
 800b854:	429a      	cmp	r2, r3
 800b856:	d184      	bne.n	800b762 <_dtoa_r+0xaaa>
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	3301      	adds	r3, #1
 800b85c:	9300      	str	r3, [sp, #0]
 800b85e:	2331      	movs	r3, #49	; 0x31
 800b860:	7013      	strb	r3, [r2, #0]
 800b862:	e6ce      	b.n	800b602 <_dtoa_r+0x94a>
 800b864:	4b09      	ldr	r3, [pc, #36]	; (800b88c <_dtoa_r+0xbd4>)
 800b866:	f7ff ba95 	b.w	800ad94 <_dtoa_r+0xdc>
 800b86a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f47f aa6e 	bne.w	800ad4e <_dtoa_r+0x96>
 800b872:	4b07      	ldr	r3, [pc, #28]	; (800b890 <_dtoa_r+0xbd8>)
 800b874:	f7ff ba8e 	b.w	800ad94 <_dtoa_r+0xdc>
 800b878:	9b02      	ldr	r3, [sp, #8]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	dcae      	bgt.n	800b7dc <_dtoa_r+0xb24>
 800b87e:	9b06      	ldr	r3, [sp, #24]
 800b880:	2b02      	cmp	r3, #2
 800b882:	f73f aea8 	bgt.w	800b5d6 <_dtoa_r+0x91e>
 800b886:	e7a9      	b.n	800b7dc <_dtoa_r+0xb24>
 800b888:	0800de10 	.word	0x0800de10
 800b88c:	0800dc14 	.word	0x0800dc14
 800b890:	0800dd91 	.word	0x0800dd91

0800b894 <rshift>:
 800b894:	6903      	ldr	r3, [r0, #16]
 800b896:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b89a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b89e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8a2:	f100 0414 	add.w	r4, r0, #20
 800b8a6:	dd45      	ble.n	800b934 <rshift+0xa0>
 800b8a8:	f011 011f 	ands.w	r1, r1, #31
 800b8ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8b4:	d10c      	bne.n	800b8d0 <rshift+0x3c>
 800b8b6:	f100 0710 	add.w	r7, r0, #16
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	42b1      	cmp	r1, r6
 800b8be:	d334      	bcc.n	800b92a <rshift+0x96>
 800b8c0:	1a9b      	subs	r3, r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	1eea      	subs	r2, r5, #3
 800b8c6:	4296      	cmp	r6, r2
 800b8c8:	bf38      	it	cc
 800b8ca:	2300      	movcc	r3, #0
 800b8cc:	4423      	add	r3, r4
 800b8ce:	e015      	b.n	800b8fc <rshift+0x68>
 800b8d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8d4:	f1c1 0820 	rsb	r8, r1, #32
 800b8d8:	40cf      	lsrs	r7, r1
 800b8da:	f105 0e04 	add.w	lr, r5, #4
 800b8de:	46a1      	mov	r9, r4
 800b8e0:	4576      	cmp	r6, lr
 800b8e2:	46f4      	mov	ip, lr
 800b8e4:	d815      	bhi.n	800b912 <rshift+0x7e>
 800b8e6:	1a9a      	subs	r2, r3, r2
 800b8e8:	0092      	lsls	r2, r2, #2
 800b8ea:	3a04      	subs	r2, #4
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	42ae      	cmp	r6, r5
 800b8f0:	bf38      	it	cc
 800b8f2:	2200      	movcc	r2, #0
 800b8f4:	18a3      	adds	r3, r4, r2
 800b8f6:	50a7      	str	r7, [r4, r2]
 800b8f8:	b107      	cbz	r7, 800b8fc <rshift+0x68>
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	1b1a      	subs	r2, r3, r4
 800b8fe:	42a3      	cmp	r3, r4
 800b900:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b904:	bf08      	it	eq
 800b906:	2300      	moveq	r3, #0
 800b908:	6102      	str	r2, [r0, #16]
 800b90a:	bf08      	it	eq
 800b90c:	6143      	streq	r3, [r0, #20]
 800b90e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b912:	f8dc c000 	ldr.w	ip, [ip]
 800b916:	fa0c fc08 	lsl.w	ip, ip, r8
 800b91a:	ea4c 0707 	orr.w	r7, ip, r7
 800b91e:	f849 7b04 	str.w	r7, [r9], #4
 800b922:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b926:	40cf      	lsrs	r7, r1
 800b928:	e7da      	b.n	800b8e0 <rshift+0x4c>
 800b92a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b92e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b932:	e7c3      	b.n	800b8bc <rshift+0x28>
 800b934:	4623      	mov	r3, r4
 800b936:	e7e1      	b.n	800b8fc <rshift+0x68>

0800b938 <__hexdig_fun>:
 800b938:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b93c:	2b09      	cmp	r3, #9
 800b93e:	d802      	bhi.n	800b946 <__hexdig_fun+0xe>
 800b940:	3820      	subs	r0, #32
 800b942:	b2c0      	uxtb	r0, r0
 800b944:	4770      	bx	lr
 800b946:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b94a:	2b05      	cmp	r3, #5
 800b94c:	d801      	bhi.n	800b952 <__hexdig_fun+0x1a>
 800b94e:	3847      	subs	r0, #71	; 0x47
 800b950:	e7f7      	b.n	800b942 <__hexdig_fun+0xa>
 800b952:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b956:	2b05      	cmp	r3, #5
 800b958:	d801      	bhi.n	800b95e <__hexdig_fun+0x26>
 800b95a:	3827      	subs	r0, #39	; 0x27
 800b95c:	e7f1      	b.n	800b942 <__hexdig_fun+0xa>
 800b95e:	2000      	movs	r0, #0
 800b960:	4770      	bx	lr
	...

0800b964 <__gethex>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	ed2d 8b02 	vpush	{d8}
 800b96c:	b089      	sub	sp, #36	; 0x24
 800b96e:	ee08 0a10 	vmov	s16, r0
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	4bb4      	ldr	r3, [pc, #720]	; (800bc48 <__gethex+0x2e4>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	9301      	str	r3, [sp, #4]
 800b97a:	4618      	mov	r0, r3
 800b97c:	468b      	mov	fp, r1
 800b97e:	4690      	mov	r8, r2
 800b980:	f7f4 fc46 	bl	8000210 <strlen>
 800b984:	9b01      	ldr	r3, [sp, #4]
 800b986:	f8db 2000 	ldr.w	r2, [fp]
 800b98a:	4403      	add	r3, r0
 800b98c:	4682      	mov	sl, r0
 800b98e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b992:	9305      	str	r3, [sp, #20]
 800b994:	1c93      	adds	r3, r2, #2
 800b996:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b99a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b99e:	32fe      	adds	r2, #254	; 0xfe
 800b9a0:	18d1      	adds	r1, r2, r3
 800b9a2:	461f      	mov	r7, r3
 800b9a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b9a8:	9100      	str	r1, [sp, #0]
 800b9aa:	2830      	cmp	r0, #48	; 0x30
 800b9ac:	d0f8      	beq.n	800b9a0 <__gethex+0x3c>
 800b9ae:	f7ff ffc3 	bl	800b938 <__hexdig_fun>
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d13a      	bne.n	800ba2e <__gethex+0xca>
 800b9b8:	9901      	ldr	r1, [sp, #4]
 800b9ba:	4652      	mov	r2, sl
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f001 fa33 	bl	800ce28 <strncmp>
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d168      	bne.n	800ba9a <__gethex+0x136>
 800b9c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b9cc:	eb07 060a 	add.w	r6, r7, sl
 800b9d0:	f7ff ffb2 	bl	800b938 <__hexdig_fun>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d062      	beq.n	800ba9e <__gethex+0x13a>
 800b9d8:	4633      	mov	r3, r6
 800b9da:	7818      	ldrb	r0, [r3, #0]
 800b9dc:	2830      	cmp	r0, #48	; 0x30
 800b9de:	461f      	mov	r7, r3
 800b9e0:	f103 0301 	add.w	r3, r3, #1
 800b9e4:	d0f9      	beq.n	800b9da <__gethex+0x76>
 800b9e6:	f7ff ffa7 	bl	800b938 <__hexdig_fun>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	fab0 f480 	clz	r4, r0
 800b9f0:	0964      	lsrs	r4, r4, #5
 800b9f2:	4635      	mov	r5, r6
 800b9f4:	9300      	str	r3, [sp, #0]
 800b9f6:	463a      	mov	r2, r7
 800b9f8:	4616      	mov	r6, r2
 800b9fa:	3201      	adds	r2, #1
 800b9fc:	7830      	ldrb	r0, [r6, #0]
 800b9fe:	f7ff ff9b 	bl	800b938 <__hexdig_fun>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d1f8      	bne.n	800b9f8 <__gethex+0x94>
 800ba06:	9901      	ldr	r1, [sp, #4]
 800ba08:	4652      	mov	r2, sl
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f001 fa0c 	bl	800ce28 <strncmp>
 800ba10:	b980      	cbnz	r0, 800ba34 <__gethex+0xd0>
 800ba12:	b94d      	cbnz	r5, 800ba28 <__gethex+0xc4>
 800ba14:	eb06 050a 	add.w	r5, r6, sl
 800ba18:	462a      	mov	r2, r5
 800ba1a:	4616      	mov	r6, r2
 800ba1c:	3201      	adds	r2, #1
 800ba1e:	7830      	ldrb	r0, [r6, #0]
 800ba20:	f7ff ff8a 	bl	800b938 <__hexdig_fun>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d1f8      	bne.n	800ba1a <__gethex+0xb6>
 800ba28:	1bad      	subs	r5, r5, r6
 800ba2a:	00ad      	lsls	r5, r5, #2
 800ba2c:	e004      	b.n	800ba38 <__gethex+0xd4>
 800ba2e:	2400      	movs	r4, #0
 800ba30:	4625      	mov	r5, r4
 800ba32:	e7e0      	b.n	800b9f6 <__gethex+0x92>
 800ba34:	2d00      	cmp	r5, #0
 800ba36:	d1f7      	bne.n	800ba28 <__gethex+0xc4>
 800ba38:	7833      	ldrb	r3, [r6, #0]
 800ba3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba3e:	2b50      	cmp	r3, #80	; 0x50
 800ba40:	d13b      	bne.n	800baba <__gethex+0x156>
 800ba42:	7873      	ldrb	r3, [r6, #1]
 800ba44:	2b2b      	cmp	r3, #43	; 0x2b
 800ba46:	d02c      	beq.n	800baa2 <__gethex+0x13e>
 800ba48:	2b2d      	cmp	r3, #45	; 0x2d
 800ba4a:	d02e      	beq.n	800baaa <__gethex+0x146>
 800ba4c:	1c71      	adds	r1, r6, #1
 800ba4e:	f04f 0900 	mov.w	r9, #0
 800ba52:	7808      	ldrb	r0, [r1, #0]
 800ba54:	f7ff ff70 	bl	800b938 <__hexdig_fun>
 800ba58:	1e43      	subs	r3, r0, #1
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b18      	cmp	r3, #24
 800ba5e:	d82c      	bhi.n	800baba <__gethex+0x156>
 800ba60:	f1a0 0210 	sub.w	r2, r0, #16
 800ba64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba68:	f7ff ff66 	bl	800b938 <__hexdig_fun>
 800ba6c:	1e43      	subs	r3, r0, #1
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b18      	cmp	r3, #24
 800ba72:	d91d      	bls.n	800bab0 <__gethex+0x14c>
 800ba74:	f1b9 0f00 	cmp.w	r9, #0
 800ba78:	d000      	beq.n	800ba7c <__gethex+0x118>
 800ba7a:	4252      	negs	r2, r2
 800ba7c:	4415      	add	r5, r2
 800ba7e:	f8cb 1000 	str.w	r1, [fp]
 800ba82:	b1e4      	cbz	r4, 800babe <__gethex+0x15a>
 800ba84:	9b00      	ldr	r3, [sp, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bf14      	ite	ne
 800ba8a:	2700      	movne	r7, #0
 800ba8c:	2706      	moveq	r7, #6
 800ba8e:	4638      	mov	r0, r7
 800ba90:	b009      	add	sp, #36	; 0x24
 800ba92:	ecbd 8b02 	vpop	{d8}
 800ba96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9a:	463e      	mov	r6, r7
 800ba9c:	4625      	mov	r5, r4
 800ba9e:	2401      	movs	r4, #1
 800baa0:	e7ca      	b.n	800ba38 <__gethex+0xd4>
 800baa2:	f04f 0900 	mov.w	r9, #0
 800baa6:	1cb1      	adds	r1, r6, #2
 800baa8:	e7d3      	b.n	800ba52 <__gethex+0xee>
 800baaa:	f04f 0901 	mov.w	r9, #1
 800baae:	e7fa      	b.n	800baa6 <__gethex+0x142>
 800bab0:	230a      	movs	r3, #10
 800bab2:	fb03 0202 	mla	r2, r3, r2, r0
 800bab6:	3a10      	subs	r2, #16
 800bab8:	e7d4      	b.n	800ba64 <__gethex+0x100>
 800baba:	4631      	mov	r1, r6
 800babc:	e7df      	b.n	800ba7e <__gethex+0x11a>
 800babe:	1bf3      	subs	r3, r6, r7
 800bac0:	3b01      	subs	r3, #1
 800bac2:	4621      	mov	r1, r4
 800bac4:	2b07      	cmp	r3, #7
 800bac6:	dc0b      	bgt.n	800bae0 <__gethex+0x17c>
 800bac8:	ee18 0a10 	vmov	r0, s16
 800bacc:	f000 fa7e 	bl	800bfcc <_Balloc>
 800bad0:	4604      	mov	r4, r0
 800bad2:	b940      	cbnz	r0, 800bae6 <__gethex+0x182>
 800bad4:	4b5d      	ldr	r3, [pc, #372]	; (800bc4c <__gethex+0x2e8>)
 800bad6:	4602      	mov	r2, r0
 800bad8:	21de      	movs	r1, #222	; 0xde
 800bada:	485d      	ldr	r0, [pc, #372]	; (800bc50 <__gethex+0x2ec>)
 800badc:	f001 f9c6 	bl	800ce6c <__assert_func>
 800bae0:	3101      	adds	r1, #1
 800bae2:	105b      	asrs	r3, r3, #1
 800bae4:	e7ee      	b.n	800bac4 <__gethex+0x160>
 800bae6:	f100 0914 	add.w	r9, r0, #20
 800baea:	f04f 0b00 	mov.w	fp, #0
 800baee:	f1ca 0301 	rsb	r3, sl, #1
 800baf2:	f8cd 9008 	str.w	r9, [sp, #8]
 800baf6:	f8cd b000 	str.w	fp, [sp]
 800bafa:	9306      	str	r3, [sp, #24]
 800bafc:	42b7      	cmp	r7, r6
 800bafe:	d340      	bcc.n	800bb82 <__gethex+0x21e>
 800bb00:	9802      	ldr	r0, [sp, #8]
 800bb02:	9b00      	ldr	r3, [sp, #0]
 800bb04:	f840 3b04 	str.w	r3, [r0], #4
 800bb08:	eba0 0009 	sub.w	r0, r0, r9
 800bb0c:	1080      	asrs	r0, r0, #2
 800bb0e:	0146      	lsls	r6, r0, #5
 800bb10:	6120      	str	r0, [r4, #16]
 800bb12:	4618      	mov	r0, r3
 800bb14:	f000 fb4c 	bl	800c1b0 <__hi0bits>
 800bb18:	1a30      	subs	r0, r6, r0
 800bb1a:	f8d8 6000 	ldr.w	r6, [r8]
 800bb1e:	42b0      	cmp	r0, r6
 800bb20:	dd63      	ble.n	800bbea <__gethex+0x286>
 800bb22:	1b87      	subs	r7, r0, r6
 800bb24:	4639      	mov	r1, r7
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 fef0 	bl	800c90c <__any_on>
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	b1a8      	cbz	r0, 800bb5c <__gethex+0x1f8>
 800bb30:	1e7b      	subs	r3, r7, #1
 800bb32:	1159      	asrs	r1, r3, #5
 800bb34:	f003 021f 	and.w	r2, r3, #31
 800bb38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bb3c:	f04f 0a01 	mov.w	sl, #1
 800bb40:	fa0a f202 	lsl.w	r2, sl, r2
 800bb44:	420a      	tst	r2, r1
 800bb46:	d009      	beq.n	800bb5c <__gethex+0x1f8>
 800bb48:	4553      	cmp	r3, sl
 800bb4a:	dd05      	ble.n	800bb58 <__gethex+0x1f4>
 800bb4c:	1eb9      	subs	r1, r7, #2
 800bb4e:	4620      	mov	r0, r4
 800bb50:	f000 fedc 	bl	800c90c <__any_on>
 800bb54:	2800      	cmp	r0, #0
 800bb56:	d145      	bne.n	800bbe4 <__gethex+0x280>
 800bb58:	f04f 0a02 	mov.w	sl, #2
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7ff fe98 	bl	800b894 <rshift>
 800bb64:	443d      	add	r5, r7
 800bb66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb6a:	42ab      	cmp	r3, r5
 800bb6c:	da4c      	bge.n	800bc08 <__gethex+0x2a4>
 800bb6e:	ee18 0a10 	vmov	r0, s16
 800bb72:	4621      	mov	r1, r4
 800bb74:	f000 fa6a 	bl	800c04c <_Bfree>
 800bb78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	6013      	str	r3, [r2, #0]
 800bb7e:	27a3      	movs	r7, #163	; 0xa3
 800bb80:	e785      	b.n	800ba8e <__gethex+0x12a>
 800bb82:	1e73      	subs	r3, r6, #1
 800bb84:	9a05      	ldr	r2, [sp, #20]
 800bb86:	9303      	str	r3, [sp, #12]
 800bb88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d019      	beq.n	800bbc4 <__gethex+0x260>
 800bb90:	f1bb 0f20 	cmp.w	fp, #32
 800bb94:	d107      	bne.n	800bba6 <__gethex+0x242>
 800bb96:	9b02      	ldr	r3, [sp, #8]
 800bb98:	9a00      	ldr	r2, [sp, #0]
 800bb9a:	f843 2b04 	str.w	r2, [r3], #4
 800bb9e:	9302      	str	r3, [sp, #8]
 800bba0:	2300      	movs	r3, #0
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	469b      	mov	fp, r3
 800bba6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bbaa:	f7ff fec5 	bl	800b938 <__hexdig_fun>
 800bbae:	9b00      	ldr	r3, [sp, #0]
 800bbb0:	f000 000f 	and.w	r0, r0, #15
 800bbb4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bbb8:	4303      	orrs	r3, r0
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	f10b 0b04 	add.w	fp, fp, #4
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	e00d      	b.n	800bbe0 <__gethex+0x27c>
 800bbc4:	9b03      	ldr	r3, [sp, #12]
 800bbc6:	9a06      	ldr	r2, [sp, #24]
 800bbc8:	4413      	add	r3, r2
 800bbca:	42bb      	cmp	r3, r7
 800bbcc:	d3e0      	bcc.n	800bb90 <__gethex+0x22c>
 800bbce:	4618      	mov	r0, r3
 800bbd0:	9901      	ldr	r1, [sp, #4]
 800bbd2:	9307      	str	r3, [sp, #28]
 800bbd4:	4652      	mov	r2, sl
 800bbd6:	f001 f927 	bl	800ce28 <strncmp>
 800bbda:	9b07      	ldr	r3, [sp, #28]
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d1d7      	bne.n	800bb90 <__gethex+0x22c>
 800bbe0:	461e      	mov	r6, r3
 800bbe2:	e78b      	b.n	800bafc <__gethex+0x198>
 800bbe4:	f04f 0a03 	mov.w	sl, #3
 800bbe8:	e7b8      	b.n	800bb5c <__gethex+0x1f8>
 800bbea:	da0a      	bge.n	800bc02 <__gethex+0x29e>
 800bbec:	1a37      	subs	r7, r6, r0
 800bbee:	4621      	mov	r1, r4
 800bbf0:	ee18 0a10 	vmov	r0, s16
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	f000 fc45 	bl	800c484 <__lshift>
 800bbfa:	1bed      	subs	r5, r5, r7
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	f100 0914 	add.w	r9, r0, #20
 800bc02:	f04f 0a00 	mov.w	sl, #0
 800bc06:	e7ae      	b.n	800bb66 <__gethex+0x202>
 800bc08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc0c:	42a8      	cmp	r0, r5
 800bc0e:	dd72      	ble.n	800bcf6 <__gethex+0x392>
 800bc10:	1b45      	subs	r5, r0, r5
 800bc12:	42ae      	cmp	r6, r5
 800bc14:	dc36      	bgt.n	800bc84 <__gethex+0x320>
 800bc16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc1a:	2b02      	cmp	r3, #2
 800bc1c:	d02a      	beq.n	800bc74 <__gethex+0x310>
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	d02c      	beq.n	800bc7c <__gethex+0x318>
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d11c      	bne.n	800bc60 <__gethex+0x2fc>
 800bc26:	42ae      	cmp	r6, r5
 800bc28:	d11a      	bne.n	800bc60 <__gethex+0x2fc>
 800bc2a:	2e01      	cmp	r6, #1
 800bc2c:	d112      	bne.n	800bc54 <__gethex+0x2f0>
 800bc2e:	9a04      	ldr	r2, [sp, #16]
 800bc30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc34:	6013      	str	r3, [r2, #0]
 800bc36:	2301      	movs	r3, #1
 800bc38:	6123      	str	r3, [r4, #16]
 800bc3a:	f8c9 3000 	str.w	r3, [r9]
 800bc3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc40:	2762      	movs	r7, #98	; 0x62
 800bc42:	601c      	str	r4, [r3, #0]
 800bc44:	e723      	b.n	800ba8e <__gethex+0x12a>
 800bc46:	bf00      	nop
 800bc48:	0800de88 	.word	0x0800de88
 800bc4c:	0800de10 	.word	0x0800de10
 800bc50:	0800de21 	.word	0x0800de21
 800bc54:	1e71      	subs	r1, r6, #1
 800bc56:	4620      	mov	r0, r4
 800bc58:	f000 fe58 	bl	800c90c <__any_on>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d1e6      	bne.n	800bc2e <__gethex+0x2ca>
 800bc60:	ee18 0a10 	vmov	r0, s16
 800bc64:	4621      	mov	r1, r4
 800bc66:	f000 f9f1 	bl	800c04c <_Bfree>
 800bc6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	2750      	movs	r7, #80	; 0x50
 800bc72:	e70c      	b.n	800ba8e <__gethex+0x12a>
 800bc74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1f2      	bne.n	800bc60 <__gethex+0x2fc>
 800bc7a:	e7d8      	b.n	800bc2e <__gethex+0x2ca>
 800bc7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1d5      	bne.n	800bc2e <__gethex+0x2ca>
 800bc82:	e7ed      	b.n	800bc60 <__gethex+0x2fc>
 800bc84:	1e6f      	subs	r7, r5, #1
 800bc86:	f1ba 0f00 	cmp.w	sl, #0
 800bc8a:	d131      	bne.n	800bcf0 <__gethex+0x38c>
 800bc8c:	b127      	cbz	r7, 800bc98 <__gethex+0x334>
 800bc8e:	4639      	mov	r1, r7
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fe3b 	bl	800c90c <__any_on>
 800bc96:	4682      	mov	sl, r0
 800bc98:	117b      	asrs	r3, r7, #5
 800bc9a:	2101      	movs	r1, #1
 800bc9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bca0:	f007 071f 	and.w	r7, r7, #31
 800bca4:	fa01 f707 	lsl.w	r7, r1, r7
 800bca8:	421f      	tst	r7, r3
 800bcaa:	4629      	mov	r1, r5
 800bcac:	4620      	mov	r0, r4
 800bcae:	bf18      	it	ne
 800bcb0:	f04a 0a02 	orrne.w	sl, sl, #2
 800bcb4:	1b76      	subs	r6, r6, r5
 800bcb6:	f7ff fded 	bl	800b894 <rshift>
 800bcba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bcbe:	2702      	movs	r7, #2
 800bcc0:	f1ba 0f00 	cmp.w	sl, #0
 800bcc4:	d048      	beq.n	800bd58 <__gethex+0x3f4>
 800bcc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d015      	beq.n	800bcfa <__gethex+0x396>
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	d017      	beq.n	800bd02 <__gethex+0x39e>
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d109      	bne.n	800bcea <__gethex+0x386>
 800bcd6:	f01a 0f02 	tst.w	sl, #2
 800bcda:	d006      	beq.n	800bcea <__gethex+0x386>
 800bcdc:	f8d9 0000 	ldr.w	r0, [r9]
 800bce0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bce4:	f01a 0f01 	tst.w	sl, #1
 800bce8:	d10e      	bne.n	800bd08 <__gethex+0x3a4>
 800bcea:	f047 0710 	orr.w	r7, r7, #16
 800bcee:	e033      	b.n	800bd58 <__gethex+0x3f4>
 800bcf0:	f04f 0a01 	mov.w	sl, #1
 800bcf4:	e7d0      	b.n	800bc98 <__gethex+0x334>
 800bcf6:	2701      	movs	r7, #1
 800bcf8:	e7e2      	b.n	800bcc0 <__gethex+0x35c>
 800bcfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcfc:	f1c3 0301 	rsb	r3, r3, #1
 800bd00:	9315      	str	r3, [sp, #84]	; 0x54
 800bd02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d0f0      	beq.n	800bcea <__gethex+0x386>
 800bd08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd0c:	f104 0314 	add.w	r3, r4, #20
 800bd10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bd18:	f04f 0c00 	mov.w	ip, #0
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd22:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bd26:	d01c      	beq.n	800bd62 <__gethex+0x3fe>
 800bd28:	3201      	adds	r2, #1
 800bd2a:	6002      	str	r2, [r0, #0]
 800bd2c:	2f02      	cmp	r7, #2
 800bd2e:	f104 0314 	add.w	r3, r4, #20
 800bd32:	d13f      	bne.n	800bdb4 <__gethex+0x450>
 800bd34:	f8d8 2000 	ldr.w	r2, [r8]
 800bd38:	3a01      	subs	r2, #1
 800bd3a:	42b2      	cmp	r2, r6
 800bd3c:	d10a      	bne.n	800bd54 <__gethex+0x3f0>
 800bd3e:	1171      	asrs	r1, r6, #5
 800bd40:	2201      	movs	r2, #1
 800bd42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd46:	f006 061f 	and.w	r6, r6, #31
 800bd4a:	fa02 f606 	lsl.w	r6, r2, r6
 800bd4e:	421e      	tst	r6, r3
 800bd50:	bf18      	it	ne
 800bd52:	4617      	movne	r7, r2
 800bd54:	f047 0720 	orr.w	r7, r7, #32
 800bd58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd5a:	601c      	str	r4, [r3, #0]
 800bd5c:	9b04      	ldr	r3, [sp, #16]
 800bd5e:	601d      	str	r5, [r3, #0]
 800bd60:	e695      	b.n	800ba8e <__gethex+0x12a>
 800bd62:	4299      	cmp	r1, r3
 800bd64:	f843 cc04 	str.w	ip, [r3, #-4]
 800bd68:	d8d8      	bhi.n	800bd1c <__gethex+0x3b8>
 800bd6a:	68a3      	ldr	r3, [r4, #8]
 800bd6c:	459b      	cmp	fp, r3
 800bd6e:	db19      	blt.n	800bda4 <__gethex+0x440>
 800bd70:	6861      	ldr	r1, [r4, #4]
 800bd72:	ee18 0a10 	vmov	r0, s16
 800bd76:	3101      	adds	r1, #1
 800bd78:	f000 f928 	bl	800bfcc <_Balloc>
 800bd7c:	4681      	mov	r9, r0
 800bd7e:	b918      	cbnz	r0, 800bd88 <__gethex+0x424>
 800bd80:	4b1a      	ldr	r3, [pc, #104]	; (800bdec <__gethex+0x488>)
 800bd82:	4602      	mov	r2, r0
 800bd84:	2184      	movs	r1, #132	; 0x84
 800bd86:	e6a8      	b.n	800bada <__gethex+0x176>
 800bd88:	6922      	ldr	r2, [r4, #16]
 800bd8a:	3202      	adds	r2, #2
 800bd8c:	f104 010c 	add.w	r1, r4, #12
 800bd90:	0092      	lsls	r2, r2, #2
 800bd92:	300c      	adds	r0, #12
 800bd94:	f000 f90c 	bl	800bfb0 <memcpy>
 800bd98:	4621      	mov	r1, r4
 800bd9a:	ee18 0a10 	vmov	r0, s16
 800bd9e:	f000 f955 	bl	800c04c <_Bfree>
 800bda2:	464c      	mov	r4, r9
 800bda4:	6923      	ldr	r3, [r4, #16]
 800bda6:	1c5a      	adds	r2, r3, #1
 800bda8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdac:	6122      	str	r2, [r4, #16]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	615a      	str	r2, [r3, #20]
 800bdb2:	e7bb      	b.n	800bd2c <__gethex+0x3c8>
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	455a      	cmp	r2, fp
 800bdb8:	dd0b      	ble.n	800bdd2 <__gethex+0x46e>
 800bdba:	2101      	movs	r1, #1
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f7ff fd69 	bl	800b894 <rshift>
 800bdc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdc6:	3501      	adds	r5, #1
 800bdc8:	42ab      	cmp	r3, r5
 800bdca:	f6ff aed0 	blt.w	800bb6e <__gethex+0x20a>
 800bdce:	2701      	movs	r7, #1
 800bdd0:	e7c0      	b.n	800bd54 <__gethex+0x3f0>
 800bdd2:	f016 061f 	ands.w	r6, r6, #31
 800bdd6:	d0fa      	beq.n	800bdce <__gethex+0x46a>
 800bdd8:	4453      	add	r3, sl
 800bdda:	f1c6 0620 	rsb	r6, r6, #32
 800bdde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bde2:	f000 f9e5 	bl	800c1b0 <__hi0bits>
 800bde6:	42b0      	cmp	r0, r6
 800bde8:	dbe7      	blt.n	800bdba <__gethex+0x456>
 800bdea:	e7f0      	b.n	800bdce <__gethex+0x46a>
 800bdec:	0800de10 	.word	0x0800de10

0800bdf0 <L_shift>:
 800bdf0:	f1c2 0208 	rsb	r2, r2, #8
 800bdf4:	0092      	lsls	r2, r2, #2
 800bdf6:	b570      	push	{r4, r5, r6, lr}
 800bdf8:	f1c2 0620 	rsb	r6, r2, #32
 800bdfc:	6843      	ldr	r3, [r0, #4]
 800bdfe:	6804      	ldr	r4, [r0, #0]
 800be00:	fa03 f506 	lsl.w	r5, r3, r6
 800be04:	432c      	orrs	r4, r5
 800be06:	40d3      	lsrs	r3, r2
 800be08:	6004      	str	r4, [r0, #0]
 800be0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800be0e:	4288      	cmp	r0, r1
 800be10:	d3f4      	bcc.n	800bdfc <L_shift+0xc>
 800be12:	bd70      	pop	{r4, r5, r6, pc}

0800be14 <__match>:
 800be14:	b530      	push	{r4, r5, lr}
 800be16:	6803      	ldr	r3, [r0, #0]
 800be18:	3301      	adds	r3, #1
 800be1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be1e:	b914      	cbnz	r4, 800be26 <__match+0x12>
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	2001      	movs	r0, #1
 800be24:	bd30      	pop	{r4, r5, pc}
 800be26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be2e:	2d19      	cmp	r5, #25
 800be30:	bf98      	it	ls
 800be32:	3220      	addls	r2, #32
 800be34:	42a2      	cmp	r2, r4
 800be36:	d0f0      	beq.n	800be1a <__match+0x6>
 800be38:	2000      	movs	r0, #0
 800be3a:	e7f3      	b.n	800be24 <__match+0x10>

0800be3c <__hexnan>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	680b      	ldr	r3, [r1, #0]
 800be42:	115e      	asrs	r6, r3, #5
 800be44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be48:	f013 031f 	ands.w	r3, r3, #31
 800be4c:	b087      	sub	sp, #28
 800be4e:	bf18      	it	ne
 800be50:	3604      	addne	r6, #4
 800be52:	2500      	movs	r5, #0
 800be54:	1f37      	subs	r7, r6, #4
 800be56:	4690      	mov	r8, r2
 800be58:	6802      	ldr	r2, [r0, #0]
 800be5a:	9301      	str	r3, [sp, #4]
 800be5c:	4682      	mov	sl, r0
 800be5e:	f846 5c04 	str.w	r5, [r6, #-4]
 800be62:	46b9      	mov	r9, r7
 800be64:	463c      	mov	r4, r7
 800be66:	9502      	str	r5, [sp, #8]
 800be68:	46ab      	mov	fp, r5
 800be6a:	7851      	ldrb	r1, [r2, #1]
 800be6c:	1c53      	adds	r3, r2, #1
 800be6e:	9303      	str	r3, [sp, #12]
 800be70:	b341      	cbz	r1, 800bec4 <__hexnan+0x88>
 800be72:	4608      	mov	r0, r1
 800be74:	9205      	str	r2, [sp, #20]
 800be76:	9104      	str	r1, [sp, #16]
 800be78:	f7ff fd5e 	bl	800b938 <__hexdig_fun>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d14f      	bne.n	800bf20 <__hexnan+0xe4>
 800be80:	9904      	ldr	r1, [sp, #16]
 800be82:	9a05      	ldr	r2, [sp, #20]
 800be84:	2920      	cmp	r1, #32
 800be86:	d818      	bhi.n	800beba <__hexnan+0x7e>
 800be88:	9b02      	ldr	r3, [sp, #8]
 800be8a:	459b      	cmp	fp, r3
 800be8c:	dd13      	ble.n	800beb6 <__hexnan+0x7a>
 800be8e:	454c      	cmp	r4, r9
 800be90:	d206      	bcs.n	800bea0 <__hexnan+0x64>
 800be92:	2d07      	cmp	r5, #7
 800be94:	dc04      	bgt.n	800bea0 <__hexnan+0x64>
 800be96:	462a      	mov	r2, r5
 800be98:	4649      	mov	r1, r9
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff ffa8 	bl	800bdf0 <L_shift>
 800bea0:	4544      	cmp	r4, r8
 800bea2:	d950      	bls.n	800bf46 <__hexnan+0x10a>
 800bea4:	2300      	movs	r3, #0
 800bea6:	f1a4 0904 	sub.w	r9, r4, #4
 800beaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800beae:	f8cd b008 	str.w	fp, [sp, #8]
 800beb2:	464c      	mov	r4, r9
 800beb4:	461d      	mov	r5, r3
 800beb6:	9a03      	ldr	r2, [sp, #12]
 800beb8:	e7d7      	b.n	800be6a <__hexnan+0x2e>
 800beba:	2929      	cmp	r1, #41	; 0x29
 800bebc:	d156      	bne.n	800bf6c <__hexnan+0x130>
 800bebe:	3202      	adds	r2, #2
 800bec0:	f8ca 2000 	str.w	r2, [sl]
 800bec4:	f1bb 0f00 	cmp.w	fp, #0
 800bec8:	d050      	beq.n	800bf6c <__hexnan+0x130>
 800beca:	454c      	cmp	r4, r9
 800becc:	d206      	bcs.n	800bedc <__hexnan+0xa0>
 800bece:	2d07      	cmp	r5, #7
 800bed0:	dc04      	bgt.n	800bedc <__hexnan+0xa0>
 800bed2:	462a      	mov	r2, r5
 800bed4:	4649      	mov	r1, r9
 800bed6:	4620      	mov	r0, r4
 800bed8:	f7ff ff8a 	bl	800bdf0 <L_shift>
 800bedc:	4544      	cmp	r4, r8
 800bede:	d934      	bls.n	800bf4a <__hexnan+0x10e>
 800bee0:	f1a8 0204 	sub.w	r2, r8, #4
 800bee4:	4623      	mov	r3, r4
 800bee6:	f853 1b04 	ldr.w	r1, [r3], #4
 800beea:	f842 1f04 	str.w	r1, [r2, #4]!
 800beee:	429f      	cmp	r7, r3
 800bef0:	d2f9      	bcs.n	800bee6 <__hexnan+0xaa>
 800bef2:	1b3b      	subs	r3, r7, r4
 800bef4:	f023 0303 	bic.w	r3, r3, #3
 800bef8:	3304      	adds	r3, #4
 800befa:	3401      	adds	r4, #1
 800befc:	3e03      	subs	r6, #3
 800befe:	42b4      	cmp	r4, r6
 800bf00:	bf88      	it	hi
 800bf02:	2304      	movhi	r3, #4
 800bf04:	4443      	add	r3, r8
 800bf06:	2200      	movs	r2, #0
 800bf08:	f843 2b04 	str.w	r2, [r3], #4
 800bf0c:	429f      	cmp	r7, r3
 800bf0e:	d2fb      	bcs.n	800bf08 <__hexnan+0xcc>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	b91b      	cbnz	r3, 800bf1c <__hexnan+0xe0>
 800bf14:	4547      	cmp	r7, r8
 800bf16:	d127      	bne.n	800bf68 <__hexnan+0x12c>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	2005      	movs	r0, #5
 800bf1e:	e026      	b.n	800bf6e <__hexnan+0x132>
 800bf20:	3501      	adds	r5, #1
 800bf22:	2d08      	cmp	r5, #8
 800bf24:	f10b 0b01 	add.w	fp, fp, #1
 800bf28:	dd06      	ble.n	800bf38 <__hexnan+0xfc>
 800bf2a:	4544      	cmp	r4, r8
 800bf2c:	d9c3      	bls.n	800beb6 <__hexnan+0x7a>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf34:	2501      	movs	r5, #1
 800bf36:	3c04      	subs	r4, #4
 800bf38:	6822      	ldr	r2, [r4, #0]
 800bf3a:	f000 000f 	and.w	r0, r0, #15
 800bf3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bf42:	6022      	str	r2, [r4, #0]
 800bf44:	e7b7      	b.n	800beb6 <__hexnan+0x7a>
 800bf46:	2508      	movs	r5, #8
 800bf48:	e7b5      	b.n	800beb6 <__hexnan+0x7a>
 800bf4a:	9b01      	ldr	r3, [sp, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d0df      	beq.n	800bf10 <__hexnan+0xd4>
 800bf50:	f04f 32ff 	mov.w	r2, #4294967295
 800bf54:	f1c3 0320 	rsb	r3, r3, #32
 800bf58:	fa22 f303 	lsr.w	r3, r2, r3
 800bf5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf60:	401a      	ands	r2, r3
 800bf62:	f846 2c04 	str.w	r2, [r6, #-4]
 800bf66:	e7d3      	b.n	800bf10 <__hexnan+0xd4>
 800bf68:	3f04      	subs	r7, #4
 800bf6a:	e7d1      	b.n	800bf10 <__hexnan+0xd4>
 800bf6c:	2004      	movs	r0, #4
 800bf6e:	b007      	add	sp, #28
 800bf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf74 <_localeconv_r>:
 800bf74:	4800      	ldr	r0, [pc, #0]	; (800bf78 <_localeconv_r+0x4>)
 800bf76:	4770      	bx	lr
 800bf78:	2000017c 	.word	0x2000017c

0800bf7c <malloc>:
 800bf7c:	4b02      	ldr	r3, [pc, #8]	; (800bf88 <malloc+0xc>)
 800bf7e:	4601      	mov	r1, r0
 800bf80:	6818      	ldr	r0, [r3, #0]
 800bf82:	f000 bd67 	b.w	800ca54 <_malloc_r>
 800bf86:	bf00      	nop
 800bf88:	20000024 	.word	0x20000024

0800bf8c <__ascii_mbtowc>:
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	b901      	cbnz	r1, 800bf92 <__ascii_mbtowc+0x6>
 800bf90:	a901      	add	r1, sp, #4
 800bf92:	b142      	cbz	r2, 800bfa6 <__ascii_mbtowc+0x1a>
 800bf94:	b14b      	cbz	r3, 800bfaa <__ascii_mbtowc+0x1e>
 800bf96:	7813      	ldrb	r3, [r2, #0]
 800bf98:	600b      	str	r3, [r1, #0]
 800bf9a:	7812      	ldrb	r2, [r2, #0]
 800bf9c:	1e10      	subs	r0, r2, #0
 800bf9e:	bf18      	it	ne
 800bfa0:	2001      	movne	r0, #1
 800bfa2:	b002      	add	sp, #8
 800bfa4:	4770      	bx	lr
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	e7fb      	b.n	800bfa2 <__ascii_mbtowc+0x16>
 800bfaa:	f06f 0001 	mvn.w	r0, #1
 800bfae:	e7f8      	b.n	800bfa2 <__ascii_mbtowc+0x16>

0800bfb0 <memcpy>:
 800bfb0:	440a      	add	r2, r1
 800bfb2:	4291      	cmp	r1, r2
 800bfb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfb8:	d100      	bne.n	800bfbc <memcpy+0xc>
 800bfba:	4770      	bx	lr
 800bfbc:	b510      	push	{r4, lr}
 800bfbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfc6:	4291      	cmp	r1, r2
 800bfc8:	d1f9      	bne.n	800bfbe <memcpy+0xe>
 800bfca:	bd10      	pop	{r4, pc}

0800bfcc <_Balloc>:
 800bfcc:	b570      	push	{r4, r5, r6, lr}
 800bfce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	b976      	cbnz	r6, 800bff4 <_Balloc+0x28>
 800bfd6:	2010      	movs	r0, #16
 800bfd8:	f7ff ffd0 	bl	800bf7c <malloc>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	6260      	str	r0, [r4, #36]	; 0x24
 800bfe0:	b920      	cbnz	r0, 800bfec <_Balloc+0x20>
 800bfe2:	4b18      	ldr	r3, [pc, #96]	; (800c044 <_Balloc+0x78>)
 800bfe4:	4818      	ldr	r0, [pc, #96]	; (800c048 <_Balloc+0x7c>)
 800bfe6:	2166      	movs	r1, #102	; 0x66
 800bfe8:	f000 ff40 	bl	800ce6c <__assert_func>
 800bfec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bff0:	6006      	str	r6, [r0, #0]
 800bff2:	60c6      	str	r6, [r0, #12]
 800bff4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bff6:	68f3      	ldr	r3, [r6, #12]
 800bff8:	b183      	cbz	r3, 800c01c <_Balloc+0x50>
 800bffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c002:	b9b8      	cbnz	r0, 800c034 <_Balloc+0x68>
 800c004:	2101      	movs	r1, #1
 800c006:	fa01 f605 	lsl.w	r6, r1, r5
 800c00a:	1d72      	adds	r2, r6, #5
 800c00c:	0092      	lsls	r2, r2, #2
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 fc9d 	bl	800c94e <_calloc_r>
 800c014:	b160      	cbz	r0, 800c030 <_Balloc+0x64>
 800c016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c01a:	e00e      	b.n	800c03a <_Balloc+0x6e>
 800c01c:	2221      	movs	r2, #33	; 0x21
 800c01e:	2104      	movs	r1, #4
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fc94 	bl	800c94e <_calloc_r>
 800c026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c028:	60f0      	str	r0, [r6, #12]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e4      	bne.n	800bffa <_Balloc+0x2e>
 800c030:	2000      	movs	r0, #0
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	6802      	ldr	r2, [r0, #0]
 800c036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c03a:	2300      	movs	r3, #0
 800c03c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c040:	e7f7      	b.n	800c032 <_Balloc+0x66>
 800c042:	bf00      	nop
 800c044:	0800dd9e 	.word	0x0800dd9e
 800c048:	0800de9c 	.word	0x0800de9c

0800c04c <_Bfree>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c050:	4605      	mov	r5, r0
 800c052:	460c      	mov	r4, r1
 800c054:	b976      	cbnz	r6, 800c074 <_Bfree+0x28>
 800c056:	2010      	movs	r0, #16
 800c058:	f7ff ff90 	bl	800bf7c <malloc>
 800c05c:	4602      	mov	r2, r0
 800c05e:	6268      	str	r0, [r5, #36]	; 0x24
 800c060:	b920      	cbnz	r0, 800c06c <_Bfree+0x20>
 800c062:	4b09      	ldr	r3, [pc, #36]	; (800c088 <_Bfree+0x3c>)
 800c064:	4809      	ldr	r0, [pc, #36]	; (800c08c <_Bfree+0x40>)
 800c066:	218a      	movs	r1, #138	; 0x8a
 800c068:	f000 ff00 	bl	800ce6c <__assert_func>
 800c06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c070:	6006      	str	r6, [r0, #0]
 800c072:	60c6      	str	r6, [r0, #12]
 800c074:	b13c      	cbz	r4, 800c086 <_Bfree+0x3a>
 800c076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c078:	6862      	ldr	r2, [r4, #4]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c080:	6021      	str	r1, [r4, #0]
 800c082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	0800dd9e 	.word	0x0800dd9e
 800c08c:	0800de9c 	.word	0x0800de9c

0800c090 <__multadd>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	690d      	ldr	r5, [r1, #16]
 800c096:	4607      	mov	r7, r0
 800c098:	460c      	mov	r4, r1
 800c09a:	461e      	mov	r6, r3
 800c09c:	f101 0c14 	add.w	ip, r1, #20
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c0a6:	b299      	uxth	r1, r3
 800c0a8:	fb02 6101 	mla	r1, r2, r1, r6
 800c0ac:	0c1e      	lsrs	r6, r3, #16
 800c0ae:	0c0b      	lsrs	r3, r1, #16
 800c0b0:	fb02 3306 	mla	r3, r2, r6, r3
 800c0b4:	b289      	uxth	r1, r1
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0bc:	4285      	cmp	r5, r0
 800c0be:	f84c 1b04 	str.w	r1, [ip], #4
 800c0c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0c6:	dcec      	bgt.n	800c0a2 <__multadd+0x12>
 800c0c8:	b30e      	cbz	r6, 800c10e <__multadd+0x7e>
 800c0ca:	68a3      	ldr	r3, [r4, #8]
 800c0cc:	42ab      	cmp	r3, r5
 800c0ce:	dc19      	bgt.n	800c104 <__multadd+0x74>
 800c0d0:	6861      	ldr	r1, [r4, #4]
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	3101      	adds	r1, #1
 800c0d6:	f7ff ff79 	bl	800bfcc <_Balloc>
 800c0da:	4680      	mov	r8, r0
 800c0dc:	b928      	cbnz	r0, 800c0ea <__multadd+0x5a>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <__multadd+0x84>)
 800c0e2:	480d      	ldr	r0, [pc, #52]	; (800c118 <__multadd+0x88>)
 800c0e4:	21b5      	movs	r1, #181	; 0xb5
 800c0e6:	f000 fec1 	bl	800ce6c <__assert_func>
 800c0ea:	6922      	ldr	r2, [r4, #16]
 800c0ec:	3202      	adds	r2, #2
 800c0ee:	f104 010c 	add.w	r1, r4, #12
 800c0f2:	0092      	lsls	r2, r2, #2
 800c0f4:	300c      	adds	r0, #12
 800c0f6:	f7ff ff5b 	bl	800bfb0 <memcpy>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f7ff ffa5 	bl	800c04c <_Bfree>
 800c102:	4644      	mov	r4, r8
 800c104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c108:	3501      	adds	r5, #1
 800c10a:	615e      	str	r6, [r3, #20]
 800c10c:	6125      	str	r5, [r4, #16]
 800c10e:	4620      	mov	r0, r4
 800c110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c114:	0800de10 	.word	0x0800de10
 800c118:	0800de9c 	.word	0x0800de9c

0800c11c <__s2b>:
 800c11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	4615      	mov	r5, r2
 800c124:	461f      	mov	r7, r3
 800c126:	2209      	movs	r2, #9
 800c128:	3308      	adds	r3, #8
 800c12a:	4606      	mov	r6, r0
 800c12c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c130:	2100      	movs	r1, #0
 800c132:	2201      	movs	r2, #1
 800c134:	429a      	cmp	r2, r3
 800c136:	db09      	blt.n	800c14c <__s2b+0x30>
 800c138:	4630      	mov	r0, r6
 800c13a:	f7ff ff47 	bl	800bfcc <_Balloc>
 800c13e:	b940      	cbnz	r0, 800c152 <__s2b+0x36>
 800c140:	4602      	mov	r2, r0
 800c142:	4b19      	ldr	r3, [pc, #100]	; (800c1a8 <__s2b+0x8c>)
 800c144:	4819      	ldr	r0, [pc, #100]	; (800c1ac <__s2b+0x90>)
 800c146:	21ce      	movs	r1, #206	; 0xce
 800c148:	f000 fe90 	bl	800ce6c <__assert_func>
 800c14c:	0052      	lsls	r2, r2, #1
 800c14e:	3101      	adds	r1, #1
 800c150:	e7f0      	b.n	800c134 <__s2b+0x18>
 800c152:	9b08      	ldr	r3, [sp, #32]
 800c154:	6143      	str	r3, [r0, #20]
 800c156:	2d09      	cmp	r5, #9
 800c158:	f04f 0301 	mov.w	r3, #1
 800c15c:	6103      	str	r3, [r0, #16]
 800c15e:	dd16      	ble.n	800c18e <__s2b+0x72>
 800c160:	f104 0909 	add.w	r9, r4, #9
 800c164:	46c8      	mov	r8, r9
 800c166:	442c      	add	r4, r5
 800c168:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c16c:	4601      	mov	r1, r0
 800c16e:	3b30      	subs	r3, #48	; 0x30
 800c170:	220a      	movs	r2, #10
 800c172:	4630      	mov	r0, r6
 800c174:	f7ff ff8c 	bl	800c090 <__multadd>
 800c178:	45a0      	cmp	r8, r4
 800c17a:	d1f5      	bne.n	800c168 <__s2b+0x4c>
 800c17c:	f1a5 0408 	sub.w	r4, r5, #8
 800c180:	444c      	add	r4, r9
 800c182:	1b2d      	subs	r5, r5, r4
 800c184:	1963      	adds	r3, r4, r5
 800c186:	42bb      	cmp	r3, r7
 800c188:	db04      	blt.n	800c194 <__s2b+0x78>
 800c18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18e:	340a      	adds	r4, #10
 800c190:	2509      	movs	r5, #9
 800c192:	e7f6      	b.n	800c182 <__s2b+0x66>
 800c194:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c198:	4601      	mov	r1, r0
 800c19a:	3b30      	subs	r3, #48	; 0x30
 800c19c:	220a      	movs	r2, #10
 800c19e:	4630      	mov	r0, r6
 800c1a0:	f7ff ff76 	bl	800c090 <__multadd>
 800c1a4:	e7ee      	b.n	800c184 <__s2b+0x68>
 800c1a6:	bf00      	nop
 800c1a8:	0800de10 	.word	0x0800de10
 800c1ac:	0800de9c 	.word	0x0800de9c

0800c1b0 <__hi0bits>:
 800c1b0:	0c03      	lsrs	r3, r0, #16
 800c1b2:	041b      	lsls	r3, r3, #16
 800c1b4:	b9d3      	cbnz	r3, 800c1ec <__hi0bits+0x3c>
 800c1b6:	0400      	lsls	r0, r0, #16
 800c1b8:	2310      	movs	r3, #16
 800c1ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1be:	bf04      	itt	eq
 800c1c0:	0200      	lsleq	r0, r0, #8
 800c1c2:	3308      	addeq	r3, #8
 800c1c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1c8:	bf04      	itt	eq
 800c1ca:	0100      	lsleq	r0, r0, #4
 800c1cc:	3304      	addeq	r3, #4
 800c1ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1d2:	bf04      	itt	eq
 800c1d4:	0080      	lsleq	r0, r0, #2
 800c1d6:	3302      	addeq	r3, #2
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	db05      	blt.n	800c1e8 <__hi0bits+0x38>
 800c1dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1e0:	f103 0301 	add.w	r3, r3, #1
 800c1e4:	bf08      	it	eq
 800c1e6:	2320      	moveq	r3, #32
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	4770      	bx	lr
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	e7e4      	b.n	800c1ba <__hi0bits+0xa>

0800c1f0 <__lo0bits>:
 800c1f0:	6803      	ldr	r3, [r0, #0]
 800c1f2:	f013 0207 	ands.w	r2, r3, #7
 800c1f6:	4601      	mov	r1, r0
 800c1f8:	d00b      	beq.n	800c212 <__lo0bits+0x22>
 800c1fa:	07da      	lsls	r2, r3, #31
 800c1fc:	d423      	bmi.n	800c246 <__lo0bits+0x56>
 800c1fe:	0798      	lsls	r0, r3, #30
 800c200:	bf49      	itett	mi
 800c202:	085b      	lsrmi	r3, r3, #1
 800c204:	089b      	lsrpl	r3, r3, #2
 800c206:	2001      	movmi	r0, #1
 800c208:	600b      	strmi	r3, [r1, #0]
 800c20a:	bf5c      	itt	pl
 800c20c:	600b      	strpl	r3, [r1, #0]
 800c20e:	2002      	movpl	r0, #2
 800c210:	4770      	bx	lr
 800c212:	b298      	uxth	r0, r3
 800c214:	b9a8      	cbnz	r0, 800c242 <__lo0bits+0x52>
 800c216:	0c1b      	lsrs	r3, r3, #16
 800c218:	2010      	movs	r0, #16
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	b90a      	cbnz	r2, 800c222 <__lo0bits+0x32>
 800c21e:	3008      	adds	r0, #8
 800c220:	0a1b      	lsrs	r3, r3, #8
 800c222:	071a      	lsls	r2, r3, #28
 800c224:	bf04      	itt	eq
 800c226:	091b      	lsreq	r3, r3, #4
 800c228:	3004      	addeq	r0, #4
 800c22a:	079a      	lsls	r2, r3, #30
 800c22c:	bf04      	itt	eq
 800c22e:	089b      	lsreq	r3, r3, #2
 800c230:	3002      	addeq	r0, #2
 800c232:	07da      	lsls	r2, r3, #31
 800c234:	d403      	bmi.n	800c23e <__lo0bits+0x4e>
 800c236:	085b      	lsrs	r3, r3, #1
 800c238:	f100 0001 	add.w	r0, r0, #1
 800c23c:	d005      	beq.n	800c24a <__lo0bits+0x5a>
 800c23e:	600b      	str	r3, [r1, #0]
 800c240:	4770      	bx	lr
 800c242:	4610      	mov	r0, r2
 800c244:	e7e9      	b.n	800c21a <__lo0bits+0x2a>
 800c246:	2000      	movs	r0, #0
 800c248:	4770      	bx	lr
 800c24a:	2020      	movs	r0, #32
 800c24c:	4770      	bx	lr
	...

0800c250 <__i2b>:
 800c250:	b510      	push	{r4, lr}
 800c252:	460c      	mov	r4, r1
 800c254:	2101      	movs	r1, #1
 800c256:	f7ff feb9 	bl	800bfcc <_Balloc>
 800c25a:	4602      	mov	r2, r0
 800c25c:	b928      	cbnz	r0, 800c26a <__i2b+0x1a>
 800c25e:	4b05      	ldr	r3, [pc, #20]	; (800c274 <__i2b+0x24>)
 800c260:	4805      	ldr	r0, [pc, #20]	; (800c278 <__i2b+0x28>)
 800c262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c266:	f000 fe01 	bl	800ce6c <__assert_func>
 800c26a:	2301      	movs	r3, #1
 800c26c:	6144      	str	r4, [r0, #20]
 800c26e:	6103      	str	r3, [r0, #16]
 800c270:	bd10      	pop	{r4, pc}
 800c272:	bf00      	nop
 800c274:	0800de10 	.word	0x0800de10
 800c278:	0800de9c 	.word	0x0800de9c

0800c27c <__multiply>:
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	4691      	mov	r9, r2
 800c282:	690a      	ldr	r2, [r1, #16]
 800c284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c288:	429a      	cmp	r2, r3
 800c28a:	bfb8      	it	lt
 800c28c:	460b      	movlt	r3, r1
 800c28e:	460c      	mov	r4, r1
 800c290:	bfbc      	itt	lt
 800c292:	464c      	movlt	r4, r9
 800c294:	4699      	movlt	r9, r3
 800c296:	6927      	ldr	r7, [r4, #16]
 800c298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c29c:	68a3      	ldr	r3, [r4, #8]
 800c29e:	6861      	ldr	r1, [r4, #4]
 800c2a0:	eb07 060a 	add.w	r6, r7, sl
 800c2a4:	42b3      	cmp	r3, r6
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	bfb8      	it	lt
 800c2aa:	3101      	addlt	r1, #1
 800c2ac:	f7ff fe8e 	bl	800bfcc <_Balloc>
 800c2b0:	b930      	cbnz	r0, 800c2c0 <__multiply+0x44>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	4b44      	ldr	r3, [pc, #272]	; (800c3c8 <__multiply+0x14c>)
 800c2b6:	4845      	ldr	r0, [pc, #276]	; (800c3cc <__multiply+0x150>)
 800c2b8:	f240 115d 	movw	r1, #349	; 0x15d
 800c2bc:	f000 fdd6 	bl	800ce6c <__assert_func>
 800c2c0:	f100 0514 	add.w	r5, r0, #20
 800c2c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2c8:	462b      	mov	r3, r5
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4543      	cmp	r3, r8
 800c2ce:	d321      	bcc.n	800c314 <__multiply+0x98>
 800c2d0:	f104 0314 	add.w	r3, r4, #20
 800c2d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2d8:	f109 0314 	add.w	r3, r9, #20
 800c2dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2e0:	9202      	str	r2, [sp, #8]
 800c2e2:	1b3a      	subs	r2, r7, r4
 800c2e4:	3a15      	subs	r2, #21
 800c2e6:	f022 0203 	bic.w	r2, r2, #3
 800c2ea:	3204      	adds	r2, #4
 800c2ec:	f104 0115 	add.w	r1, r4, #21
 800c2f0:	428f      	cmp	r7, r1
 800c2f2:	bf38      	it	cc
 800c2f4:	2204      	movcc	r2, #4
 800c2f6:	9201      	str	r2, [sp, #4]
 800c2f8:	9a02      	ldr	r2, [sp, #8]
 800c2fa:	9303      	str	r3, [sp, #12]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d80c      	bhi.n	800c31a <__multiply+0x9e>
 800c300:	2e00      	cmp	r6, #0
 800c302:	dd03      	ble.n	800c30c <__multiply+0x90>
 800c304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d05a      	beq.n	800c3c2 <__multiply+0x146>
 800c30c:	6106      	str	r6, [r0, #16]
 800c30e:	b005      	add	sp, #20
 800c310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c314:	f843 2b04 	str.w	r2, [r3], #4
 800c318:	e7d8      	b.n	800c2cc <__multiply+0x50>
 800c31a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c31e:	f1ba 0f00 	cmp.w	sl, #0
 800c322:	d024      	beq.n	800c36e <__multiply+0xf2>
 800c324:	f104 0e14 	add.w	lr, r4, #20
 800c328:	46a9      	mov	r9, r5
 800c32a:	f04f 0c00 	mov.w	ip, #0
 800c32e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c332:	f8d9 1000 	ldr.w	r1, [r9]
 800c336:	fa1f fb82 	uxth.w	fp, r2
 800c33a:	b289      	uxth	r1, r1
 800c33c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c344:	f8d9 2000 	ldr.w	r2, [r9]
 800c348:	4461      	add	r1, ip
 800c34a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c34e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c356:	b289      	uxth	r1, r1
 800c358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c35c:	4577      	cmp	r7, lr
 800c35e:	f849 1b04 	str.w	r1, [r9], #4
 800c362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c366:	d8e2      	bhi.n	800c32e <__multiply+0xb2>
 800c368:	9a01      	ldr	r2, [sp, #4]
 800c36a:	f845 c002 	str.w	ip, [r5, r2]
 800c36e:	9a03      	ldr	r2, [sp, #12]
 800c370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c374:	3304      	adds	r3, #4
 800c376:	f1b9 0f00 	cmp.w	r9, #0
 800c37a:	d020      	beq.n	800c3be <__multiply+0x142>
 800c37c:	6829      	ldr	r1, [r5, #0]
 800c37e:	f104 0c14 	add.w	ip, r4, #20
 800c382:	46ae      	mov	lr, r5
 800c384:	f04f 0a00 	mov.w	sl, #0
 800c388:	f8bc b000 	ldrh.w	fp, [ip]
 800c38c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c390:	fb09 220b 	mla	r2, r9, fp, r2
 800c394:	4492      	add	sl, r2
 800c396:	b289      	uxth	r1, r1
 800c398:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c39c:	f84e 1b04 	str.w	r1, [lr], #4
 800c3a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c3a4:	f8be 1000 	ldrh.w	r1, [lr]
 800c3a8:	0c12      	lsrs	r2, r2, #16
 800c3aa:	fb09 1102 	mla	r1, r9, r2, r1
 800c3ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c3b2:	4567      	cmp	r7, ip
 800c3b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3b8:	d8e6      	bhi.n	800c388 <__multiply+0x10c>
 800c3ba:	9a01      	ldr	r2, [sp, #4]
 800c3bc:	50a9      	str	r1, [r5, r2]
 800c3be:	3504      	adds	r5, #4
 800c3c0:	e79a      	b.n	800c2f8 <__multiply+0x7c>
 800c3c2:	3e01      	subs	r6, #1
 800c3c4:	e79c      	b.n	800c300 <__multiply+0x84>
 800c3c6:	bf00      	nop
 800c3c8:	0800de10 	.word	0x0800de10
 800c3cc:	0800de9c 	.word	0x0800de9c

0800c3d0 <__pow5mult>:
 800c3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	4615      	mov	r5, r2
 800c3d6:	f012 0203 	ands.w	r2, r2, #3
 800c3da:	4606      	mov	r6, r0
 800c3dc:	460f      	mov	r7, r1
 800c3de:	d007      	beq.n	800c3f0 <__pow5mult+0x20>
 800c3e0:	4c25      	ldr	r4, [pc, #148]	; (800c478 <__pow5mult+0xa8>)
 800c3e2:	3a01      	subs	r2, #1
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3ea:	f7ff fe51 	bl	800c090 <__multadd>
 800c3ee:	4607      	mov	r7, r0
 800c3f0:	10ad      	asrs	r5, r5, #2
 800c3f2:	d03d      	beq.n	800c470 <__pow5mult+0xa0>
 800c3f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c3f6:	b97c      	cbnz	r4, 800c418 <__pow5mult+0x48>
 800c3f8:	2010      	movs	r0, #16
 800c3fa:	f7ff fdbf 	bl	800bf7c <malloc>
 800c3fe:	4602      	mov	r2, r0
 800c400:	6270      	str	r0, [r6, #36]	; 0x24
 800c402:	b928      	cbnz	r0, 800c410 <__pow5mult+0x40>
 800c404:	4b1d      	ldr	r3, [pc, #116]	; (800c47c <__pow5mult+0xac>)
 800c406:	481e      	ldr	r0, [pc, #120]	; (800c480 <__pow5mult+0xb0>)
 800c408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c40c:	f000 fd2e 	bl	800ce6c <__assert_func>
 800c410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c414:	6004      	str	r4, [r0, #0]
 800c416:	60c4      	str	r4, [r0, #12]
 800c418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c41c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c420:	b94c      	cbnz	r4, 800c436 <__pow5mult+0x66>
 800c422:	f240 2171 	movw	r1, #625	; 0x271
 800c426:	4630      	mov	r0, r6
 800c428:	f7ff ff12 	bl	800c250 <__i2b>
 800c42c:	2300      	movs	r3, #0
 800c42e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c432:	4604      	mov	r4, r0
 800c434:	6003      	str	r3, [r0, #0]
 800c436:	f04f 0900 	mov.w	r9, #0
 800c43a:	07eb      	lsls	r3, r5, #31
 800c43c:	d50a      	bpl.n	800c454 <__pow5mult+0x84>
 800c43e:	4639      	mov	r1, r7
 800c440:	4622      	mov	r2, r4
 800c442:	4630      	mov	r0, r6
 800c444:	f7ff ff1a 	bl	800c27c <__multiply>
 800c448:	4639      	mov	r1, r7
 800c44a:	4680      	mov	r8, r0
 800c44c:	4630      	mov	r0, r6
 800c44e:	f7ff fdfd 	bl	800c04c <_Bfree>
 800c452:	4647      	mov	r7, r8
 800c454:	106d      	asrs	r5, r5, #1
 800c456:	d00b      	beq.n	800c470 <__pow5mult+0xa0>
 800c458:	6820      	ldr	r0, [r4, #0]
 800c45a:	b938      	cbnz	r0, 800c46c <__pow5mult+0x9c>
 800c45c:	4622      	mov	r2, r4
 800c45e:	4621      	mov	r1, r4
 800c460:	4630      	mov	r0, r6
 800c462:	f7ff ff0b 	bl	800c27c <__multiply>
 800c466:	6020      	str	r0, [r4, #0]
 800c468:	f8c0 9000 	str.w	r9, [r0]
 800c46c:	4604      	mov	r4, r0
 800c46e:	e7e4      	b.n	800c43a <__pow5mult+0x6a>
 800c470:	4638      	mov	r0, r7
 800c472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c476:	bf00      	nop
 800c478:	0800dfe8 	.word	0x0800dfe8
 800c47c:	0800dd9e 	.word	0x0800dd9e
 800c480:	0800de9c 	.word	0x0800de9c

0800c484 <__lshift>:
 800c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c488:	460c      	mov	r4, r1
 800c48a:	6849      	ldr	r1, [r1, #4]
 800c48c:	6923      	ldr	r3, [r4, #16]
 800c48e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c492:	68a3      	ldr	r3, [r4, #8]
 800c494:	4607      	mov	r7, r0
 800c496:	4691      	mov	r9, r2
 800c498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c49c:	f108 0601 	add.w	r6, r8, #1
 800c4a0:	42b3      	cmp	r3, r6
 800c4a2:	db0b      	blt.n	800c4bc <__lshift+0x38>
 800c4a4:	4638      	mov	r0, r7
 800c4a6:	f7ff fd91 	bl	800bfcc <_Balloc>
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	b948      	cbnz	r0, 800c4c2 <__lshift+0x3e>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	4b2a      	ldr	r3, [pc, #168]	; (800c55c <__lshift+0xd8>)
 800c4b2:	482b      	ldr	r0, [pc, #172]	; (800c560 <__lshift+0xdc>)
 800c4b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4b8:	f000 fcd8 	bl	800ce6c <__assert_func>
 800c4bc:	3101      	adds	r1, #1
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	e7ee      	b.n	800c4a0 <__lshift+0x1c>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f100 0114 	add.w	r1, r0, #20
 800c4c8:	f100 0210 	add.w	r2, r0, #16
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	4553      	cmp	r3, sl
 800c4d0:	db37      	blt.n	800c542 <__lshift+0xbe>
 800c4d2:	6920      	ldr	r0, [r4, #16]
 800c4d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4d8:	f104 0314 	add.w	r3, r4, #20
 800c4dc:	f019 091f 	ands.w	r9, r9, #31
 800c4e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c4e8:	d02f      	beq.n	800c54a <__lshift+0xc6>
 800c4ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c4ee:	468a      	mov	sl, r1
 800c4f0:	f04f 0c00 	mov.w	ip, #0
 800c4f4:	681a      	ldr	r2, [r3, #0]
 800c4f6:	fa02 f209 	lsl.w	r2, r2, r9
 800c4fa:	ea42 020c 	orr.w	r2, r2, ip
 800c4fe:	f84a 2b04 	str.w	r2, [sl], #4
 800c502:	f853 2b04 	ldr.w	r2, [r3], #4
 800c506:	4298      	cmp	r0, r3
 800c508:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c50c:	d8f2      	bhi.n	800c4f4 <__lshift+0x70>
 800c50e:	1b03      	subs	r3, r0, r4
 800c510:	3b15      	subs	r3, #21
 800c512:	f023 0303 	bic.w	r3, r3, #3
 800c516:	3304      	adds	r3, #4
 800c518:	f104 0215 	add.w	r2, r4, #21
 800c51c:	4290      	cmp	r0, r2
 800c51e:	bf38      	it	cc
 800c520:	2304      	movcc	r3, #4
 800c522:	f841 c003 	str.w	ip, [r1, r3]
 800c526:	f1bc 0f00 	cmp.w	ip, #0
 800c52a:	d001      	beq.n	800c530 <__lshift+0xac>
 800c52c:	f108 0602 	add.w	r6, r8, #2
 800c530:	3e01      	subs	r6, #1
 800c532:	4638      	mov	r0, r7
 800c534:	612e      	str	r6, [r5, #16]
 800c536:	4621      	mov	r1, r4
 800c538:	f7ff fd88 	bl	800c04c <_Bfree>
 800c53c:	4628      	mov	r0, r5
 800c53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c542:	f842 0f04 	str.w	r0, [r2, #4]!
 800c546:	3301      	adds	r3, #1
 800c548:	e7c1      	b.n	800c4ce <__lshift+0x4a>
 800c54a:	3904      	subs	r1, #4
 800c54c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c550:	f841 2f04 	str.w	r2, [r1, #4]!
 800c554:	4298      	cmp	r0, r3
 800c556:	d8f9      	bhi.n	800c54c <__lshift+0xc8>
 800c558:	e7ea      	b.n	800c530 <__lshift+0xac>
 800c55a:	bf00      	nop
 800c55c:	0800de10 	.word	0x0800de10
 800c560:	0800de9c 	.word	0x0800de9c

0800c564 <__mcmp>:
 800c564:	b530      	push	{r4, r5, lr}
 800c566:	6902      	ldr	r2, [r0, #16]
 800c568:	690c      	ldr	r4, [r1, #16]
 800c56a:	1b12      	subs	r2, r2, r4
 800c56c:	d10e      	bne.n	800c58c <__mcmp+0x28>
 800c56e:	f100 0314 	add.w	r3, r0, #20
 800c572:	3114      	adds	r1, #20
 800c574:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c578:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c57c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c580:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c584:	42a5      	cmp	r5, r4
 800c586:	d003      	beq.n	800c590 <__mcmp+0x2c>
 800c588:	d305      	bcc.n	800c596 <__mcmp+0x32>
 800c58a:	2201      	movs	r2, #1
 800c58c:	4610      	mov	r0, r2
 800c58e:	bd30      	pop	{r4, r5, pc}
 800c590:	4283      	cmp	r3, r0
 800c592:	d3f3      	bcc.n	800c57c <__mcmp+0x18>
 800c594:	e7fa      	b.n	800c58c <__mcmp+0x28>
 800c596:	f04f 32ff 	mov.w	r2, #4294967295
 800c59a:	e7f7      	b.n	800c58c <__mcmp+0x28>

0800c59c <__mdiff>:
 800c59c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	4690      	mov	r8, r2
 800c5aa:	f7ff ffdb 	bl	800c564 <__mcmp>
 800c5ae:	1e05      	subs	r5, r0, #0
 800c5b0:	d110      	bne.n	800c5d4 <__mdiff+0x38>
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f7ff fd09 	bl	800bfcc <_Balloc>
 800c5ba:	b930      	cbnz	r0, 800c5ca <__mdiff+0x2e>
 800c5bc:	4b3a      	ldr	r3, [pc, #232]	; (800c6a8 <__mdiff+0x10c>)
 800c5be:	4602      	mov	r2, r0
 800c5c0:	f240 2132 	movw	r1, #562	; 0x232
 800c5c4:	4839      	ldr	r0, [pc, #228]	; (800c6ac <__mdiff+0x110>)
 800c5c6:	f000 fc51 	bl	800ce6c <__assert_func>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d4:	bfa4      	itt	ge
 800c5d6:	4643      	movge	r3, r8
 800c5d8:	46a0      	movge	r8, r4
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c5e0:	bfa6      	itte	ge
 800c5e2:	461c      	movge	r4, r3
 800c5e4:	2500      	movge	r5, #0
 800c5e6:	2501      	movlt	r5, #1
 800c5e8:	f7ff fcf0 	bl	800bfcc <_Balloc>
 800c5ec:	b920      	cbnz	r0, 800c5f8 <__mdiff+0x5c>
 800c5ee:	4b2e      	ldr	r3, [pc, #184]	; (800c6a8 <__mdiff+0x10c>)
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c5f6:	e7e5      	b.n	800c5c4 <__mdiff+0x28>
 800c5f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5fc:	6926      	ldr	r6, [r4, #16]
 800c5fe:	60c5      	str	r5, [r0, #12]
 800c600:	f104 0914 	add.w	r9, r4, #20
 800c604:	f108 0514 	add.w	r5, r8, #20
 800c608:	f100 0e14 	add.w	lr, r0, #20
 800c60c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c614:	f108 0210 	add.w	r2, r8, #16
 800c618:	46f2      	mov	sl, lr
 800c61a:	2100      	movs	r1, #0
 800c61c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c620:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c624:	fa1f f883 	uxth.w	r8, r3
 800c628:	fa11 f18b 	uxtah	r1, r1, fp
 800c62c:	0c1b      	lsrs	r3, r3, #16
 800c62e:	eba1 0808 	sub.w	r8, r1, r8
 800c632:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c636:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c63a:	fa1f f888 	uxth.w	r8, r8
 800c63e:	1419      	asrs	r1, r3, #16
 800c640:	454e      	cmp	r6, r9
 800c642:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c646:	f84a 3b04 	str.w	r3, [sl], #4
 800c64a:	d8e7      	bhi.n	800c61c <__mdiff+0x80>
 800c64c:	1b33      	subs	r3, r6, r4
 800c64e:	3b15      	subs	r3, #21
 800c650:	f023 0303 	bic.w	r3, r3, #3
 800c654:	3304      	adds	r3, #4
 800c656:	3415      	adds	r4, #21
 800c658:	42a6      	cmp	r6, r4
 800c65a:	bf38      	it	cc
 800c65c:	2304      	movcc	r3, #4
 800c65e:	441d      	add	r5, r3
 800c660:	4473      	add	r3, lr
 800c662:	469e      	mov	lr, r3
 800c664:	462e      	mov	r6, r5
 800c666:	4566      	cmp	r6, ip
 800c668:	d30e      	bcc.n	800c688 <__mdiff+0xec>
 800c66a:	f10c 0203 	add.w	r2, ip, #3
 800c66e:	1b52      	subs	r2, r2, r5
 800c670:	f022 0203 	bic.w	r2, r2, #3
 800c674:	3d03      	subs	r5, #3
 800c676:	45ac      	cmp	ip, r5
 800c678:	bf38      	it	cc
 800c67a:	2200      	movcc	r2, #0
 800c67c:	441a      	add	r2, r3
 800c67e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c682:	b17b      	cbz	r3, 800c6a4 <__mdiff+0x108>
 800c684:	6107      	str	r7, [r0, #16]
 800c686:	e7a3      	b.n	800c5d0 <__mdiff+0x34>
 800c688:	f856 8b04 	ldr.w	r8, [r6], #4
 800c68c:	fa11 f288 	uxtah	r2, r1, r8
 800c690:	1414      	asrs	r4, r2, #16
 800c692:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c696:	b292      	uxth	r2, r2
 800c698:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c69c:	f84e 2b04 	str.w	r2, [lr], #4
 800c6a0:	1421      	asrs	r1, r4, #16
 800c6a2:	e7e0      	b.n	800c666 <__mdiff+0xca>
 800c6a4:	3f01      	subs	r7, #1
 800c6a6:	e7ea      	b.n	800c67e <__mdiff+0xe2>
 800c6a8:	0800de10 	.word	0x0800de10
 800c6ac:	0800de9c 	.word	0x0800de9c

0800c6b0 <__ulp>:
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	ed8d 0b00 	vstr	d0, [sp]
 800c6b6:	9b01      	ldr	r3, [sp, #4]
 800c6b8:	4912      	ldr	r1, [pc, #72]	; (800c704 <__ulp+0x54>)
 800c6ba:	4019      	ands	r1, r3
 800c6bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	dd05      	ble.n	800c6d0 <__ulp+0x20>
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	ec43 2b10 	vmov	d0, r2, r3
 800c6cc:	b002      	add	sp, #8
 800c6ce:	4770      	bx	lr
 800c6d0:	4249      	negs	r1, r1
 800c6d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c6d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c6da:	f04f 0200 	mov.w	r2, #0
 800c6de:	f04f 0300 	mov.w	r3, #0
 800c6e2:	da04      	bge.n	800c6ee <__ulp+0x3e>
 800c6e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6e8:	fa41 f300 	asr.w	r3, r1, r0
 800c6ec:	e7ec      	b.n	800c6c8 <__ulp+0x18>
 800c6ee:	f1a0 0114 	sub.w	r1, r0, #20
 800c6f2:	291e      	cmp	r1, #30
 800c6f4:	bfda      	itte	le
 800c6f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c6fa:	fa20 f101 	lsrle.w	r1, r0, r1
 800c6fe:	2101      	movgt	r1, #1
 800c700:	460a      	mov	r2, r1
 800c702:	e7e1      	b.n	800c6c8 <__ulp+0x18>
 800c704:	7ff00000 	.word	0x7ff00000

0800c708 <__b2d>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	6905      	ldr	r5, [r0, #16]
 800c70c:	f100 0714 	add.w	r7, r0, #20
 800c710:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c714:	1f2e      	subs	r6, r5, #4
 800c716:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c71a:	4620      	mov	r0, r4
 800c71c:	f7ff fd48 	bl	800c1b0 <__hi0bits>
 800c720:	f1c0 0320 	rsb	r3, r0, #32
 800c724:	280a      	cmp	r0, #10
 800c726:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c7a4 <__b2d+0x9c>
 800c72a:	600b      	str	r3, [r1, #0]
 800c72c:	dc14      	bgt.n	800c758 <__b2d+0x50>
 800c72e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c732:	fa24 f10e 	lsr.w	r1, r4, lr
 800c736:	42b7      	cmp	r7, r6
 800c738:	ea41 030c 	orr.w	r3, r1, ip
 800c73c:	bf34      	ite	cc
 800c73e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c742:	2100      	movcs	r1, #0
 800c744:	3015      	adds	r0, #21
 800c746:	fa04 f000 	lsl.w	r0, r4, r0
 800c74a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c74e:	ea40 0201 	orr.w	r2, r0, r1
 800c752:	ec43 2b10 	vmov	d0, r2, r3
 800c756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c758:	42b7      	cmp	r7, r6
 800c75a:	bf3a      	itte	cc
 800c75c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c760:	f1a5 0608 	subcc.w	r6, r5, #8
 800c764:	2100      	movcs	r1, #0
 800c766:	380b      	subs	r0, #11
 800c768:	d017      	beq.n	800c79a <__b2d+0x92>
 800c76a:	f1c0 0c20 	rsb	ip, r0, #32
 800c76e:	fa04 f500 	lsl.w	r5, r4, r0
 800c772:	42be      	cmp	r6, r7
 800c774:	fa21 f40c 	lsr.w	r4, r1, ip
 800c778:	ea45 0504 	orr.w	r5, r5, r4
 800c77c:	bf8c      	ite	hi
 800c77e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c782:	2400      	movls	r4, #0
 800c784:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c788:	fa01 f000 	lsl.w	r0, r1, r0
 800c78c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c790:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c794:	ea40 0204 	orr.w	r2, r0, r4
 800c798:	e7db      	b.n	800c752 <__b2d+0x4a>
 800c79a:	ea44 030c 	orr.w	r3, r4, ip
 800c79e:	460a      	mov	r2, r1
 800c7a0:	e7d7      	b.n	800c752 <__b2d+0x4a>
 800c7a2:	bf00      	nop
 800c7a4:	3ff00000 	.word	0x3ff00000

0800c7a8 <__d2b>:
 800c7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7ac:	4689      	mov	r9, r1
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	ec57 6b10 	vmov	r6, r7, d0
 800c7b4:	4690      	mov	r8, r2
 800c7b6:	f7ff fc09 	bl	800bfcc <_Balloc>
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	b930      	cbnz	r0, 800c7cc <__d2b+0x24>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	4b25      	ldr	r3, [pc, #148]	; (800c858 <__d2b+0xb0>)
 800c7c2:	4826      	ldr	r0, [pc, #152]	; (800c85c <__d2b+0xb4>)
 800c7c4:	f240 310a 	movw	r1, #778	; 0x30a
 800c7c8:	f000 fb50 	bl	800ce6c <__assert_func>
 800c7cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c7d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c7d4:	bb35      	cbnz	r5, 800c824 <__d2b+0x7c>
 800c7d6:	2e00      	cmp	r6, #0
 800c7d8:	9301      	str	r3, [sp, #4]
 800c7da:	d028      	beq.n	800c82e <__d2b+0x86>
 800c7dc:	4668      	mov	r0, sp
 800c7de:	9600      	str	r6, [sp, #0]
 800c7e0:	f7ff fd06 	bl	800c1f0 <__lo0bits>
 800c7e4:	9900      	ldr	r1, [sp, #0]
 800c7e6:	b300      	cbz	r0, 800c82a <__d2b+0x82>
 800c7e8:	9a01      	ldr	r2, [sp, #4]
 800c7ea:	f1c0 0320 	rsb	r3, r0, #32
 800c7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f2:	430b      	orrs	r3, r1
 800c7f4:	40c2      	lsrs	r2, r0
 800c7f6:	6163      	str	r3, [r4, #20]
 800c7f8:	9201      	str	r2, [sp, #4]
 800c7fa:	9b01      	ldr	r3, [sp, #4]
 800c7fc:	61a3      	str	r3, [r4, #24]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	bf14      	ite	ne
 800c802:	2202      	movne	r2, #2
 800c804:	2201      	moveq	r2, #1
 800c806:	6122      	str	r2, [r4, #16]
 800c808:	b1d5      	cbz	r5, 800c840 <__d2b+0x98>
 800c80a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c80e:	4405      	add	r5, r0
 800c810:	f8c9 5000 	str.w	r5, [r9]
 800c814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c818:	f8c8 0000 	str.w	r0, [r8]
 800c81c:	4620      	mov	r0, r4
 800c81e:	b003      	add	sp, #12
 800c820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c828:	e7d5      	b.n	800c7d6 <__d2b+0x2e>
 800c82a:	6161      	str	r1, [r4, #20]
 800c82c:	e7e5      	b.n	800c7fa <__d2b+0x52>
 800c82e:	a801      	add	r0, sp, #4
 800c830:	f7ff fcde 	bl	800c1f0 <__lo0bits>
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	6163      	str	r3, [r4, #20]
 800c838:	2201      	movs	r2, #1
 800c83a:	6122      	str	r2, [r4, #16]
 800c83c:	3020      	adds	r0, #32
 800c83e:	e7e3      	b.n	800c808 <__d2b+0x60>
 800c840:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c844:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c848:	f8c9 0000 	str.w	r0, [r9]
 800c84c:	6918      	ldr	r0, [r3, #16]
 800c84e:	f7ff fcaf 	bl	800c1b0 <__hi0bits>
 800c852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c856:	e7df      	b.n	800c818 <__d2b+0x70>
 800c858:	0800de10 	.word	0x0800de10
 800c85c:	0800de9c 	.word	0x0800de9c

0800c860 <__ratio>:
 800c860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c864:	4688      	mov	r8, r1
 800c866:	4669      	mov	r1, sp
 800c868:	4681      	mov	r9, r0
 800c86a:	f7ff ff4d 	bl	800c708 <__b2d>
 800c86e:	a901      	add	r1, sp, #4
 800c870:	4640      	mov	r0, r8
 800c872:	ec55 4b10 	vmov	r4, r5, d0
 800c876:	f7ff ff47 	bl	800c708 <__b2d>
 800c87a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c87e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c882:	eba3 0c02 	sub.w	ip, r3, r2
 800c886:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c890:	ec51 0b10 	vmov	r0, r1, d0
 800c894:	2b00      	cmp	r3, #0
 800c896:	bfd6      	itet	le
 800c898:	460a      	movle	r2, r1
 800c89a:	462a      	movgt	r2, r5
 800c89c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c8a0:	468b      	mov	fp, r1
 800c8a2:	462f      	mov	r7, r5
 800c8a4:	bfd4      	ite	le
 800c8a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c8aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	ee10 2a10 	vmov	r2, s0
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f3 ffe8 	bl	800088c <__aeabi_ddiv>
 800c8bc:	ec41 0b10 	vmov	d0, r0, r1
 800c8c0:	b003      	add	sp, #12
 800c8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c8c6 <__copybits>:
 800c8c6:	3901      	subs	r1, #1
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	1149      	asrs	r1, r1, #5
 800c8cc:	6914      	ldr	r4, [r2, #16]
 800c8ce:	3101      	adds	r1, #1
 800c8d0:	f102 0314 	add.w	r3, r2, #20
 800c8d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c8d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c8dc:	1f05      	subs	r5, r0, #4
 800c8de:	42a3      	cmp	r3, r4
 800c8e0:	d30c      	bcc.n	800c8fc <__copybits+0x36>
 800c8e2:	1aa3      	subs	r3, r4, r2
 800c8e4:	3b11      	subs	r3, #17
 800c8e6:	f023 0303 	bic.w	r3, r3, #3
 800c8ea:	3211      	adds	r2, #17
 800c8ec:	42a2      	cmp	r2, r4
 800c8ee:	bf88      	it	hi
 800c8f0:	2300      	movhi	r3, #0
 800c8f2:	4418      	add	r0, r3
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4288      	cmp	r0, r1
 800c8f8:	d305      	bcc.n	800c906 <__copybits+0x40>
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	f853 6b04 	ldr.w	r6, [r3], #4
 800c900:	f845 6f04 	str.w	r6, [r5, #4]!
 800c904:	e7eb      	b.n	800c8de <__copybits+0x18>
 800c906:	f840 3b04 	str.w	r3, [r0], #4
 800c90a:	e7f4      	b.n	800c8f6 <__copybits+0x30>

0800c90c <__any_on>:
 800c90c:	f100 0214 	add.w	r2, r0, #20
 800c910:	6900      	ldr	r0, [r0, #16]
 800c912:	114b      	asrs	r3, r1, #5
 800c914:	4298      	cmp	r0, r3
 800c916:	b510      	push	{r4, lr}
 800c918:	db11      	blt.n	800c93e <__any_on+0x32>
 800c91a:	dd0a      	ble.n	800c932 <__any_on+0x26>
 800c91c:	f011 011f 	ands.w	r1, r1, #31
 800c920:	d007      	beq.n	800c932 <__any_on+0x26>
 800c922:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c926:	fa24 f001 	lsr.w	r0, r4, r1
 800c92a:	fa00 f101 	lsl.w	r1, r0, r1
 800c92e:	428c      	cmp	r4, r1
 800c930:	d10b      	bne.n	800c94a <__any_on+0x3e>
 800c932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c936:	4293      	cmp	r3, r2
 800c938:	d803      	bhi.n	800c942 <__any_on+0x36>
 800c93a:	2000      	movs	r0, #0
 800c93c:	bd10      	pop	{r4, pc}
 800c93e:	4603      	mov	r3, r0
 800c940:	e7f7      	b.n	800c932 <__any_on+0x26>
 800c942:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c946:	2900      	cmp	r1, #0
 800c948:	d0f5      	beq.n	800c936 <__any_on+0x2a>
 800c94a:	2001      	movs	r0, #1
 800c94c:	e7f6      	b.n	800c93c <__any_on+0x30>

0800c94e <_calloc_r>:
 800c94e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c950:	fba1 2402 	umull	r2, r4, r1, r2
 800c954:	b94c      	cbnz	r4, 800c96a <_calloc_r+0x1c>
 800c956:	4611      	mov	r1, r2
 800c958:	9201      	str	r2, [sp, #4]
 800c95a:	f000 f87b 	bl	800ca54 <_malloc_r>
 800c95e:	9a01      	ldr	r2, [sp, #4]
 800c960:	4605      	mov	r5, r0
 800c962:	b930      	cbnz	r0, 800c972 <_calloc_r+0x24>
 800c964:	4628      	mov	r0, r5
 800c966:	b003      	add	sp, #12
 800c968:	bd30      	pop	{r4, r5, pc}
 800c96a:	220c      	movs	r2, #12
 800c96c:	6002      	str	r2, [r0, #0]
 800c96e:	2500      	movs	r5, #0
 800c970:	e7f8      	b.n	800c964 <_calloc_r+0x16>
 800c972:	4621      	mov	r1, r4
 800c974:	f7fc fbc0 	bl	80090f8 <memset>
 800c978:	e7f4      	b.n	800c964 <_calloc_r+0x16>
	...

0800c97c <_free_r>:
 800c97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c97e:	2900      	cmp	r1, #0
 800c980:	d044      	beq.n	800ca0c <_free_r+0x90>
 800c982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c986:	9001      	str	r0, [sp, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f1a1 0404 	sub.w	r4, r1, #4
 800c98e:	bfb8      	it	lt
 800c990:	18e4      	addlt	r4, r4, r3
 800c992:	f000 fab5 	bl	800cf00 <__malloc_lock>
 800c996:	4a1e      	ldr	r2, [pc, #120]	; (800ca10 <_free_r+0x94>)
 800c998:	9801      	ldr	r0, [sp, #4]
 800c99a:	6813      	ldr	r3, [r2, #0]
 800c99c:	b933      	cbnz	r3, 800c9ac <_free_r+0x30>
 800c99e:	6063      	str	r3, [r4, #4]
 800c9a0:	6014      	str	r4, [r2, #0]
 800c9a2:	b003      	add	sp, #12
 800c9a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9a8:	f000 bab0 	b.w	800cf0c <__malloc_unlock>
 800c9ac:	42a3      	cmp	r3, r4
 800c9ae:	d908      	bls.n	800c9c2 <_free_r+0x46>
 800c9b0:	6825      	ldr	r5, [r4, #0]
 800c9b2:	1961      	adds	r1, r4, r5
 800c9b4:	428b      	cmp	r3, r1
 800c9b6:	bf01      	itttt	eq
 800c9b8:	6819      	ldreq	r1, [r3, #0]
 800c9ba:	685b      	ldreq	r3, [r3, #4]
 800c9bc:	1949      	addeq	r1, r1, r5
 800c9be:	6021      	streq	r1, [r4, #0]
 800c9c0:	e7ed      	b.n	800c99e <_free_r+0x22>
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	b10b      	cbz	r3, 800c9cc <_free_r+0x50>
 800c9c8:	42a3      	cmp	r3, r4
 800c9ca:	d9fa      	bls.n	800c9c2 <_free_r+0x46>
 800c9cc:	6811      	ldr	r1, [r2, #0]
 800c9ce:	1855      	adds	r5, r2, r1
 800c9d0:	42a5      	cmp	r5, r4
 800c9d2:	d10b      	bne.n	800c9ec <_free_r+0x70>
 800c9d4:	6824      	ldr	r4, [r4, #0]
 800c9d6:	4421      	add	r1, r4
 800c9d8:	1854      	adds	r4, r2, r1
 800c9da:	42a3      	cmp	r3, r4
 800c9dc:	6011      	str	r1, [r2, #0]
 800c9de:	d1e0      	bne.n	800c9a2 <_free_r+0x26>
 800c9e0:	681c      	ldr	r4, [r3, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	6053      	str	r3, [r2, #4]
 800c9e6:	4421      	add	r1, r4
 800c9e8:	6011      	str	r1, [r2, #0]
 800c9ea:	e7da      	b.n	800c9a2 <_free_r+0x26>
 800c9ec:	d902      	bls.n	800c9f4 <_free_r+0x78>
 800c9ee:	230c      	movs	r3, #12
 800c9f0:	6003      	str	r3, [r0, #0]
 800c9f2:	e7d6      	b.n	800c9a2 <_free_r+0x26>
 800c9f4:	6825      	ldr	r5, [r4, #0]
 800c9f6:	1961      	adds	r1, r4, r5
 800c9f8:	428b      	cmp	r3, r1
 800c9fa:	bf04      	itt	eq
 800c9fc:	6819      	ldreq	r1, [r3, #0]
 800c9fe:	685b      	ldreq	r3, [r3, #4]
 800ca00:	6063      	str	r3, [r4, #4]
 800ca02:	bf04      	itt	eq
 800ca04:	1949      	addeq	r1, r1, r5
 800ca06:	6021      	streq	r1, [r4, #0]
 800ca08:	6054      	str	r4, [r2, #4]
 800ca0a:	e7ca      	b.n	800c9a2 <_free_r+0x26>
 800ca0c:	b003      	add	sp, #12
 800ca0e:	bd30      	pop	{r4, r5, pc}
 800ca10:	200005cc 	.word	0x200005cc

0800ca14 <sbrk_aligned>:
 800ca14:	b570      	push	{r4, r5, r6, lr}
 800ca16:	4e0e      	ldr	r6, [pc, #56]	; (800ca50 <sbrk_aligned+0x3c>)
 800ca18:	460c      	mov	r4, r1
 800ca1a:	6831      	ldr	r1, [r6, #0]
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	b911      	cbnz	r1, 800ca26 <sbrk_aligned+0x12>
 800ca20:	f000 f9f2 	bl	800ce08 <_sbrk_r>
 800ca24:	6030      	str	r0, [r6, #0]
 800ca26:	4621      	mov	r1, r4
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f000 f9ed 	bl	800ce08 <_sbrk_r>
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	d00a      	beq.n	800ca48 <sbrk_aligned+0x34>
 800ca32:	1cc4      	adds	r4, r0, #3
 800ca34:	f024 0403 	bic.w	r4, r4, #3
 800ca38:	42a0      	cmp	r0, r4
 800ca3a:	d007      	beq.n	800ca4c <sbrk_aligned+0x38>
 800ca3c:	1a21      	subs	r1, r4, r0
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f000 f9e2 	bl	800ce08 <_sbrk_r>
 800ca44:	3001      	adds	r0, #1
 800ca46:	d101      	bne.n	800ca4c <sbrk_aligned+0x38>
 800ca48:	f04f 34ff 	mov.w	r4, #4294967295
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	200005d0 	.word	0x200005d0

0800ca54 <_malloc_r>:
 800ca54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca58:	1ccd      	adds	r5, r1, #3
 800ca5a:	f025 0503 	bic.w	r5, r5, #3
 800ca5e:	3508      	adds	r5, #8
 800ca60:	2d0c      	cmp	r5, #12
 800ca62:	bf38      	it	cc
 800ca64:	250c      	movcc	r5, #12
 800ca66:	2d00      	cmp	r5, #0
 800ca68:	4607      	mov	r7, r0
 800ca6a:	db01      	blt.n	800ca70 <_malloc_r+0x1c>
 800ca6c:	42a9      	cmp	r1, r5
 800ca6e:	d905      	bls.n	800ca7c <_malloc_r+0x28>
 800ca70:	230c      	movs	r3, #12
 800ca72:	603b      	str	r3, [r7, #0]
 800ca74:	2600      	movs	r6, #0
 800ca76:	4630      	mov	r0, r6
 800ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7c:	4e2e      	ldr	r6, [pc, #184]	; (800cb38 <_malloc_r+0xe4>)
 800ca7e:	f000 fa3f 	bl	800cf00 <__malloc_lock>
 800ca82:	6833      	ldr	r3, [r6, #0]
 800ca84:	461c      	mov	r4, r3
 800ca86:	bb34      	cbnz	r4, 800cad6 <_malloc_r+0x82>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	f7ff ffc2 	bl	800ca14 <sbrk_aligned>
 800ca90:	1c43      	adds	r3, r0, #1
 800ca92:	4604      	mov	r4, r0
 800ca94:	d14d      	bne.n	800cb32 <_malloc_r+0xde>
 800ca96:	6834      	ldr	r4, [r6, #0]
 800ca98:	4626      	mov	r6, r4
 800ca9a:	2e00      	cmp	r6, #0
 800ca9c:	d140      	bne.n	800cb20 <_malloc_r+0xcc>
 800ca9e:	6823      	ldr	r3, [r4, #0]
 800caa0:	4631      	mov	r1, r6
 800caa2:	4638      	mov	r0, r7
 800caa4:	eb04 0803 	add.w	r8, r4, r3
 800caa8:	f000 f9ae 	bl	800ce08 <_sbrk_r>
 800caac:	4580      	cmp	r8, r0
 800caae:	d13a      	bne.n	800cb26 <_malloc_r+0xd2>
 800cab0:	6821      	ldr	r1, [r4, #0]
 800cab2:	3503      	adds	r5, #3
 800cab4:	1a6d      	subs	r5, r5, r1
 800cab6:	f025 0503 	bic.w	r5, r5, #3
 800caba:	3508      	adds	r5, #8
 800cabc:	2d0c      	cmp	r5, #12
 800cabe:	bf38      	it	cc
 800cac0:	250c      	movcc	r5, #12
 800cac2:	4629      	mov	r1, r5
 800cac4:	4638      	mov	r0, r7
 800cac6:	f7ff ffa5 	bl	800ca14 <sbrk_aligned>
 800caca:	3001      	adds	r0, #1
 800cacc:	d02b      	beq.n	800cb26 <_malloc_r+0xd2>
 800cace:	6823      	ldr	r3, [r4, #0]
 800cad0:	442b      	add	r3, r5
 800cad2:	6023      	str	r3, [r4, #0]
 800cad4:	e00e      	b.n	800caf4 <_malloc_r+0xa0>
 800cad6:	6822      	ldr	r2, [r4, #0]
 800cad8:	1b52      	subs	r2, r2, r5
 800cada:	d41e      	bmi.n	800cb1a <_malloc_r+0xc6>
 800cadc:	2a0b      	cmp	r2, #11
 800cade:	d916      	bls.n	800cb0e <_malloc_r+0xba>
 800cae0:	1961      	adds	r1, r4, r5
 800cae2:	42a3      	cmp	r3, r4
 800cae4:	6025      	str	r5, [r4, #0]
 800cae6:	bf18      	it	ne
 800cae8:	6059      	strne	r1, [r3, #4]
 800caea:	6863      	ldr	r3, [r4, #4]
 800caec:	bf08      	it	eq
 800caee:	6031      	streq	r1, [r6, #0]
 800caf0:	5162      	str	r2, [r4, r5]
 800caf2:	604b      	str	r3, [r1, #4]
 800caf4:	4638      	mov	r0, r7
 800caf6:	f104 060b 	add.w	r6, r4, #11
 800cafa:	f000 fa07 	bl	800cf0c <__malloc_unlock>
 800cafe:	f026 0607 	bic.w	r6, r6, #7
 800cb02:	1d23      	adds	r3, r4, #4
 800cb04:	1af2      	subs	r2, r6, r3
 800cb06:	d0b6      	beq.n	800ca76 <_malloc_r+0x22>
 800cb08:	1b9b      	subs	r3, r3, r6
 800cb0a:	50a3      	str	r3, [r4, r2]
 800cb0c:	e7b3      	b.n	800ca76 <_malloc_r+0x22>
 800cb0e:	6862      	ldr	r2, [r4, #4]
 800cb10:	42a3      	cmp	r3, r4
 800cb12:	bf0c      	ite	eq
 800cb14:	6032      	streq	r2, [r6, #0]
 800cb16:	605a      	strne	r2, [r3, #4]
 800cb18:	e7ec      	b.n	800caf4 <_malloc_r+0xa0>
 800cb1a:	4623      	mov	r3, r4
 800cb1c:	6864      	ldr	r4, [r4, #4]
 800cb1e:	e7b2      	b.n	800ca86 <_malloc_r+0x32>
 800cb20:	4634      	mov	r4, r6
 800cb22:	6876      	ldr	r6, [r6, #4]
 800cb24:	e7b9      	b.n	800ca9a <_malloc_r+0x46>
 800cb26:	230c      	movs	r3, #12
 800cb28:	603b      	str	r3, [r7, #0]
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	f000 f9ee 	bl	800cf0c <__malloc_unlock>
 800cb30:	e7a1      	b.n	800ca76 <_malloc_r+0x22>
 800cb32:	6025      	str	r5, [r4, #0]
 800cb34:	e7de      	b.n	800caf4 <_malloc_r+0xa0>
 800cb36:	bf00      	nop
 800cb38:	200005cc 	.word	0x200005cc

0800cb3c <__ssputs_r>:
 800cb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb40:	688e      	ldr	r6, [r1, #8]
 800cb42:	429e      	cmp	r6, r3
 800cb44:	4682      	mov	sl, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	4690      	mov	r8, r2
 800cb4a:	461f      	mov	r7, r3
 800cb4c:	d838      	bhi.n	800cbc0 <__ssputs_r+0x84>
 800cb4e:	898a      	ldrh	r2, [r1, #12]
 800cb50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb54:	d032      	beq.n	800cbbc <__ssputs_r+0x80>
 800cb56:	6825      	ldr	r5, [r4, #0]
 800cb58:	6909      	ldr	r1, [r1, #16]
 800cb5a:	eba5 0901 	sub.w	r9, r5, r1
 800cb5e:	6965      	ldr	r5, [r4, #20]
 800cb60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb68:	3301      	adds	r3, #1
 800cb6a:	444b      	add	r3, r9
 800cb6c:	106d      	asrs	r5, r5, #1
 800cb6e:	429d      	cmp	r5, r3
 800cb70:	bf38      	it	cc
 800cb72:	461d      	movcc	r5, r3
 800cb74:	0553      	lsls	r3, r2, #21
 800cb76:	d531      	bpl.n	800cbdc <__ssputs_r+0xa0>
 800cb78:	4629      	mov	r1, r5
 800cb7a:	f7ff ff6b 	bl	800ca54 <_malloc_r>
 800cb7e:	4606      	mov	r6, r0
 800cb80:	b950      	cbnz	r0, 800cb98 <__ssputs_r+0x5c>
 800cb82:	230c      	movs	r3, #12
 800cb84:	f8ca 3000 	str.w	r3, [sl]
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb8e:	81a3      	strh	r3, [r4, #12]
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb98:	6921      	ldr	r1, [r4, #16]
 800cb9a:	464a      	mov	r2, r9
 800cb9c:	f7ff fa08 	bl	800bfb0 <memcpy>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	6126      	str	r6, [r4, #16]
 800cbae:	6165      	str	r5, [r4, #20]
 800cbb0:	444e      	add	r6, r9
 800cbb2:	eba5 0509 	sub.w	r5, r5, r9
 800cbb6:	6026      	str	r6, [r4, #0]
 800cbb8:	60a5      	str	r5, [r4, #8]
 800cbba:	463e      	mov	r6, r7
 800cbbc:	42be      	cmp	r6, r7
 800cbbe:	d900      	bls.n	800cbc2 <__ssputs_r+0x86>
 800cbc0:	463e      	mov	r6, r7
 800cbc2:	6820      	ldr	r0, [r4, #0]
 800cbc4:	4632      	mov	r2, r6
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	f000 f980 	bl	800cecc <memmove>
 800cbcc:	68a3      	ldr	r3, [r4, #8]
 800cbce:	1b9b      	subs	r3, r3, r6
 800cbd0:	60a3      	str	r3, [r4, #8]
 800cbd2:	6823      	ldr	r3, [r4, #0]
 800cbd4:	4433      	add	r3, r6
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e7db      	b.n	800cb94 <__ssputs_r+0x58>
 800cbdc:	462a      	mov	r2, r5
 800cbde:	f000 f99b 	bl	800cf18 <_realloc_r>
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d1e1      	bne.n	800cbac <__ssputs_r+0x70>
 800cbe8:	6921      	ldr	r1, [r4, #16]
 800cbea:	4650      	mov	r0, sl
 800cbec:	f7ff fec6 	bl	800c97c <_free_r>
 800cbf0:	e7c7      	b.n	800cb82 <__ssputs_r+0x46>
	...

0800cbf4 <_svfiprintf_r>:
 800cbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	4698      	mov	r8, r3
 800cbfa:	898b      	ldrh	r3, [r1, #12]
 800cbfc:	061b      	lsls	r3, r3, #24
 800cbfe:	b09d      	sub	sp, #116	; 0x74
 800cc00:	4607      	mov	r7, r0
 800cc02:	460d      	mov	r5, r1
 800cc04:	4614      	mov	r4, r2
 800cc06:	d50e      	bpl.n	800cc26 <_svfiprintf_r+0x32>
 800cc08:	690b      	ldr	r3, [r1, #16]
 800cc0a:	b963      	cbnz	r3, 800cc26 <_svfiprintf_r+0x32>
 800cc0c:	2140      	movs	r1, #64	; 0x40
 800cc0e:	f7ff ff21 	bl	800ca54 <_malloc_r>
 800cc12:	6028      	str	r0, [r5, #0]
 800cc14:	6128      	str	r0, [r5, #16]
 800cc16:	b920      	cbnz	r0, 800cc22 <_svfiprintf_r+0x2e>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc20:	e0d1      	b.n	800cdc6 <_svfiprintf_r+0x1d2>
 800cc22:	2340      	movs	r3, #64	; 0x40
 800cc24:	616b      	str	r3, [r5, #20]
 800cc26:	2300      	movs	r3, #0
 800cc28:	9309      	str	r3, [sp, #36]	; 0x24
 800cc2a:	2320      	movs	r3, #32
 800cc2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc30:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc34:	2330      	movs	r3, #48	; 0x30
 800cc36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cde0 <_svfiprintf_r+0x1ec>
 800cc3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc3e:	f04f 0901 	mov.w	r9, #1
 800cc42:	4623      	mov	r3, r4
 800cc44:	469a      	mov	sl, r3
 800cc46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc4a:	b10a      	cbz	r2, 800cc50 <_svfiprintf_r+0x5c>
 800cc4c:	2a25      	cmp	r2, #37	; 0x25
 800cc4e:	d1f9      	bne.n	800cc44 <_svfiprintf_r+0x50>
 800cc50:	ebba 0b04 	subs.w	fp, sl, r4
 800cc54:	d00b      	beq.n	800cc6e <_svfiprintf_r+0x7a>
 800cc56:	465b      	mov	r3, fp
 800cc58:	4622      	mov	r2, r4
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	4638      	mov	r0, r7
 800cc5e:	f7ff ff6d 	bl	800cb3c <__ssputs_r>
 800cc62:	3001      	adds	r0, #1
 800cc64:	f000 80aa 	beq.w	800cdbc <_svfiprintf_r+0x1c8>
 800cc68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc6a:	445a      	add	r2, fp
 800cc6c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	f000 80a2 	beq.w	800cdbc <_svfiprintf_r+0x1c8>
 800cc78:	2300      	movs	r3, #0
 800cc7a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc82:	f10a 0a01 	add.w	sl, sl, #1
 800cc86:	9304      	str	r3, [sp, #16]
 800cc88:	9307      	str	r3, [sp, #28]
 800cc8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc8e:	931a      	str	r3, [sp, #104]	; 0x68
 800cc90:	4654      	mov	r4, sl
 800cc92:	2205      	movs	r2, #5
 800cc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc98:	4851      	ldr	r0, [pc, #324]	; (800cde0 <_svfiprintf_r+0x1ec>)
 800cc9a:	f7f3 fac1 	bl	8000220 <memchr>
 800cc9e:	9a04      	ldr	r2, [sp, #16]
 800cca0:	b9d8      	cbnz	r0, 800ccda <_svfiprintf_r+0xe6>
 800cca2:	06d0      	lsls	r0, r2, #27
 800cca4:	bf44      	itt	mi
 800cca6:	2320      	movmi	r3, #32
 800cca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccac:	0711      	lsls	r1, r2, #28
 800ccae:	bf44      	itt	mi
 800ccb0:	232b      	movmi	r3, #43	; 0x2b
 800ccb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccb6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccba:	2b2a      	cmp	r3, #42	; 0x2a
 800ccbc:	d015      	beq.n	800ccea <_svfiprintf_r+0xf6>
 800ccbe:	9a07      	ldr	r2, [sp, #28]
 800ccc0:	4654      	mov	r4, sl
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	f04f 0c0a 	mov.w	ip, #10
 800ccc8:	4621      	mov	r1, r4
 800ccca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccce:	3b30      	subs	r3, #48	; 0x30
 800ccd0:	2b09      	cmp	r3, #9
 800ccd2:	d94e      	bls.n	800cd72 <_svfiprintf_r+0x17e>
 800ccd4:	b1b0      	cbz	r0, 800cd04 <_svfiprintf_r+0x110>
 800ccd6:	9207      	str	r2, [sp, #28]
 800ccd8:	e014      	b.n	800cd04 <_svfiprintf_r+0x110>
 800ccda:	eba0 0308 	sub.w	r3, r0, r8
 800ccde:	fa09 f303 	lsl.w	r3, r9, r3
 800cce2:	4313      	orrs	r3, r2
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	46a2      	mov	sl, r4
 800cce8:	e7d2      	b.n	800cc90 <_svfiprintf_r+0x9c>
 800ccea:	9b03      	ldr	r3, [sp, #12]
 800ccec:	1d19      	adds	r1, r3, #4
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	9103      	str	r1, [sp, #12]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	bfbb      	ittet	lt
 800ccf6:	425b      	neglt	r3, r3
 800ccf8:	f042 0202 	orrlt.w	r2, r2, #2
 800ccfc:	9307      	strge	r3, [sp, #28]
 800ccfe:	9307      	strlt	r3, [sp, #28]
 800cd00:	bfb8      	it	lt
 800cd02:	9204      	strlt	r2, [sp, #16]
 800cd04:	7823      	ldrb	r3, [r4, #0]
 800cd06:	2b2e      	cmp	r3, #46	; 0x2e
 800cd08:	d10c      	bne.n	800cd24 <_svfiprintf_r+0x130>
 800cd0a:	7863      	ldrb	r3, [r4, #1]
 800cd0c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd0e:	d135      	bne.n	800cd7c <_svfiprintf_r+0x188>
 800cd10:	9b03      	ldr	r3, [sp, #12]
 800cd12:	1d1a      	adds	r2, r3, #4
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	9203      	str	r2, [sp, #12]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	bfb8      	it	lt
 800cd1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd20:	3402      	adds	r4, #2
 800cd22:	9305      	str	r3, [sp, #20]
 800cd24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cdf0 <_svfiprintf_r+0x1fc>
 800cd28:	7821      	ldrb	r1, [r4, #0]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	4650      	mov	r0, sl
 800cd2e:	f7f3 fa77 	bl	8000220 <memchr>
 800cd32:	b140      	cbz	r0, 800cd46 <_svfiprintf_r+0x152>
 800cd34:	2340      	movs	r3, #64	; 0x40
 800cd36:	eba0 000a 	sub.w	r0, r0, sl
 800cd3a:	fa03 f000 	lsl.w	r0, r3, r0
 800cd3e:	9b04      	ldr	r3, [sp, #16]
 800cd40:	4303      	orrs	r3, r0
 800cd42:	3401      	adds	r4, #1
 800cd44:	9304      	str	r3, [sp, #16]
 800cd46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4a:	4826      	ldr	r0, [pc, #152]	; (800cde4 <_svfiprintf_r+0x1f0>)
 800cd4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd50:	2206      	movs	r2, #6
 800cd52:	f7f3 fa65 	bl	8000220 <memchr>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d038      	beq.n	800cdcc <_svfiprintf_r+0x1d8>
 800cd5a:	4b23      	ldr	r3, [pc, #140]	; (800cde8 <_svfiprintf_r+0x1f4>)
 800cd5c:	bb1b      	cbnz	r3, 800cda6 <_svfiprintf_r+0x1b2>
 800cd5e:	9b03      	ldr	r3, [sp, #12]
 800cd60:	3307      	adds	r3, #7
 800cd62:	f023 0307 	bic.w	r3, r3, #7
 800cd66:	3308      	adds	r3, #8
 800cd68:	9303      	str	r3, [sp, #12]
 800cd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd6c:	4433      	add	r3, r6
 800cd6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd70:	e767      	b.n	800cc42 <_svfiprintf_r+0x4e>
 800cd72:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd76:	460c      	mov	r4, r1
 800cd78:	2001      	movs	r0, #1
 800cd7a:	e7a5      	b.n	800ccc8 <_svfiprintf_r+0xd4>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	3401      	adds	r4, #1
 800cd80:	9305      	str	r3, [sp, #20]
 800cd82:	4619      	mov	r1, r3
 800cd84:	f04f 0c0a 	mov.w	ip, #10
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd8e:	3a30      	subs	r2, #48	; 0x30
 800cd90:	2a09      	cmp	r2, #9
 800cd92:	d903      	bls.n	800cd9c <_svfiprintf_r+0x1a8>
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d0c5      	beq.n	800cd24 <_svfiprintf_r+0x130>
 800cd98:	9105      	str	r1, [sp, #20]
 800cd9a:	e7c3      	b.n	800cd24 <_svfiprintf_r+0x130>
 800cd9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cda0:	4604      	mov	r4, r0
 800cda2:	2301      	movs	r3, #1
 800cda4:	e7f0      	b.n	800cd88 <_svfiprintf_r+0x194>
 800cda6:	ab03      	add	r3, sp, #12
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	462a      	mov	r2, r5
 800cdac:	4b0f      	ldr	r3, [pc, #60]	; (800cdec <_svfiprintf_r+0x1f8>)
 800cdae:	a904      	add	r1, sp, #16
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	f7fc fa49 	bl	8009248 <_printf_float>
 800cdb6:	1c42      	adds	r2, r0, #1
 800cdb8:	4606      	mov	r6, r0
 800cdba:	d1d6      	bne.n	800cd6a <_svfiprintf_r+0x176>
 800cdbc:	89ab      	ldrh	r3, [r5, #12]
 800cdbe:	065b      	lsls	r3, r3, #25
 800cdc0:	f53f af2c 	bmi.w	800cc1c <_svfiprintf_r+0x28>
 800cdc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdc6:	b01d      	add	sp, #116	; 0x74
 800cdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdcc:	ab03      	add	r3, sp, #12
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	462a      	mov	r2, r5
 800cdd2:	4b06      	ldr	r3, [pc, #24]	; (800cdec <_svfiprintf_r+0x1f8>)
 800cdd4:	a904      	add	r1, sp, #16
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	f7fc fcda 	bl	8009790 <_printf_i>
 800cddc:	e7eb      	b.n	800cdb6 <_svfiprintf_r+0x1c2>
 800cdde:	bf00      	nop
 800cde0:	0800dff4 	.word	0x0800dff4
 800cde4:	0800dffe 	.word	0x0800dffe
 800cde8:	08009249 	.word	0x08009249
 800cdec:	0800cb3d 	.word	0x0800cb3d
 800cdf0:	0800dffa 	.word	0x0800dffa
 800cdf4:	00000000 	.word	0x00000000

0800cdf8 <nan>:
 800cdf8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce00 <nan+0x8>
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	00000000 	.word	0x00000000
 800ce04:	7ff80000 	.word	0x7ff80000

0800ce08 <_sbrk_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	4d06      	ldr	r5, [pc, #24]	; (800ce24 <_sbrk_r+0x1c>)
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	4604      	mov	r4, r0
 800ce10:	4608      	mov	r0, r1
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	f7f8 fcda 	bl	80057cc <_sbrk>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_sbrk_r+0x1a>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_sbrk_r+0x1a>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	200005d4 	.word	0x200005d4

0800ce28 <strncmp>:
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	b17a      	cbz	r2, 800ce4c <strncmp+0x24>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	3901      	subs	r1, #1
 800ce30:	1884      	adds	r4, r0, r2
 800ce32:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce3a:	4290      	cmp	r0, r2
 800ce3c:	d101      	bne.n	800ce42 <strncmp+0x1a>
 800ce3e:	42a3      	cmp	r3, r4
 800ce40:	d101      	bne.n	800ce46 <strncmp+0x1e>
 800ce42:	1a80      	subs	r0, r0, r2
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d1f3      	bne.n	800ce32 <strncmp+0xa>
 800ce4a:	e7fa      	b.n	800ce42 <strncmp+0x1a>
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	e7f9      	b.n	800ce44 <strncmp+0x1c>

0800ce50 <__ascii_wctomb>:
 800ce50:	b149      	cbz	r1, 800ce66 <__ascii_wctomb+0x16>
 800ce52:	2aff      	cmp	r2, #255	; 0xff
 800ce54:	bf85      	ittet	hi
 800ce56:	238a      	movhi	r3, #138	; 0x8a
 800ce58:	6003      	strhi	r3, [r0, #0]
 800ce5a:	700a      	strbls	r2, [r1, #0]
 800ce5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce60:	bf98      	it	ls
 800ce62:	2001      	movls	r0, #1
 800ce64:	4770      	bx	lr
 800ce66:	4608      	mov	r0, r1
 800ce68:	4770      	bx	lr
	...

0800ce6c <__assert_func>:
 800ce6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce6e:	4614      	mov	r4, r2
 800ce70:	461a      	mov	r2, r3
 800ce72:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <__assert_func+0x2c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4605      	mov	r5, r0
 800ce78:	68d8      	ldr	r0, [r3, #12]
 800ce7a:	b14c      	cbz	r4, 800ce90 <__assert_func+0x24>
 800ce7c:	4b07      	ldr	r3, [pc, #28]	; (800ce9c <__assert_func+0x30>)
 800ce7e:	9100      	str	r1, [sp, #0]
 800ce80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce84:	4906      	ldr	r1, [pc, #24]	; (800cea0 <__assert_func+0x34>)
 800ce86:	462b      	mov	r3, r5
 800ce88:	f000 f80e 	bl	800cea8 <fiprintf>
 800ce8c:	f000 fa8c 	bl	800d3a8 <abort>
 800ce90:	4b04      	ldr	r3, [pc, #16]	; (800cea4 <__assert_func+0x38>)
 800ce92:	461c      	mov	r4, r3
 800ce94:	e7f3      	b.n	800ce7e <__assert_func+0x12>
 800ce96:	bf00      	nop
 800ce98:	20000024 	.word	0x20000024
 800ce9c:	0800e005 	.word	0x0800e005
 800cea0:	0800e012 	.word	0x0800e012
 800cea4:	0800e040 	.word	0x0800e040

0800cea8 <fiprintf>:
 800cea8:	b40e      	push	{r1, r2, r3}
 800ceaa:	b503      	push	{r0, r1, lr}
 800ceac:	4601      	mov	r1, r0
 800ceae:	ab03      	add	r3, sp, #12
 800ceb0:	4805      	ldr	r0, [pc, #20]	; (800cec8 <fiprintf+0x20>)
 800ceb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb6:	6800      	ldr	r0, [r0, #0]
 800ceb8:	9301      	str	r3, [sp, #4]
 800ceba:	f000 f885 	bl	800cfc8 <_vfiprintf_r>
 800cebe:	b002      	add	sp, #8
 800cec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cec4:	b003      	add	sp, #12
 800cec6:	4770      	bx	lr
 800cec8:	20000024 	.word	0x20000024

0800cecc <memmove>:
 800cecc:	4288      	cmp	r0, r1
 800cece:	b510      	push	{r4, lr}
 800ced0:	eb01 0402 	add.w	r4, r1, r2
 800ced4:	d902      	bls.n	800cedc <memmove+0x10>
 800ced6:	4284      	cmp	r4, r0
 800ced8:	4623      	mov	r3, r4
 800ceda:	d807      	bhi.n	800ceec <memmove+0x20>
 800cedc:	1e43      	subs	r3, r0, #1
 800cede:	42a1      	cmp	r1, r4
 800cee0:	d008      	beq.n	800cef4 <memmove+0x28>
 800cee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceea:	e7f8      	b.n	800cede <memmove+0x12>
 800ceec:	4402      	add	r2, r0
 800ceee:	4601      	mov	r1, r0
 800cef0:	428a      	cmp	r2, r1
 800cef2:	d100      	bne.n	800cef6 <memmove+0x2a>
 800cef4:	bd10      	pop	{r4, pc}
 800cef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cefa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cefe:	e7f7      	b.n	800cef0 <memmove+0x24>

0800cf00 <__malloc_lock>:
 800cf00:	4801      	ldr	r0, [pc, #4]	; (800cf08 <__malloc_lock+0x8>)
 800cf02:	f000 bc11 	b.w	800d728 <__retarget_lock_acquire_recursive>
 800cf06:	bf00      	nop
 800cf08:	200005d8 	.word	0x200005d8

0800cf0c <__malloc_unlock>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	; (800cf14 <__malloc_unlock+0x8>)
 800cf0e:	f000 bc0c 	b.w	800d72a <__retarget_lock_release_recursive>
 800cf12:	bf00      	nop
 800cf14:	200005d8 	.word	0x200005d8

0800cf18 <_realloc_r>:
 800cf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	4614      	mov	r4, r2
 800cf20:	460e      	mov	r6, r1
 800cf22:	b921      	cbnz	r1, 800cf2e <_realloc_r+0x16>
 800cf24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf28:	4611      	mov	r1, r2
 800cf2a:	f7ff bd93 	b.w	800ca54 <_malloc_r>
 800cf2e:	b92a      	cbnz	r2, 800cf3c <_realloc_r+0x24>
 800cf30:	f7ff fd24 	bl	800c97c <_free_r>
 800cf34:	4625      	mov	r5, r4
 800cf36:	4628      	mov	r0, r5
 800cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3c:	f000 fc5c 	bl	800d7f8 <_malloc_usable_size_r>
 800cf40:	4284      	cmp	r4, r0
 800cf42:	4607      	mov	r7, r0
 800cf44:	d802      	bhi.n	800cf4c <_realloc_r+0x34>
 800cf46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf4a:	d812      	bhi.n	800cf72 <_realloc_r+0x5a>
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4640      	mov	r0, r8
 800cf50:	f7ff fd80 	bl	800ca54 <_malloc_r>
 800cf54:	4605      	mov	r5, r0
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0ed      	beq.n	800cf36 <_realloc_r+0x1e>
 800cf5a:	42bc      	cmp	r4, r7
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	4631      	mov	r1, r6
 800cf60:	bf28      	it	cs
 800cf62:	463a      	movcs	r2, r7
 800cf64:	f7ff f824 	bl	800bfb0 <memcpy>
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4640      	mov	r0, r8
 800cf6c:	f7ff fd06 	bl	800c97c <_free_r>
 800cf70:	e7e1      	b.n	800cf36 <_realloc_r+0x1e>
 800cf72:	4635      	mov	r5, r6
 800cf74:	e7df      	b.n	800cf36 <_realloc_r+0x1e>

0800cf76 <__sfputc_r>:
 800cf76:	6893      	ldr	r3, [r2, #8]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	b410      	push	{r4}
 800cf7e:	6093      	str	r3, [r2, #8]
 800cf80:	da08      	bge.n	800cf94 <__sfputc_r+0x1e>
 800cf82:	6994      	ldr	r4, [r2, #24]
 800cf84:	42a3      	cmp	r3, r4
 800cf86:	db01      	blt.n	800cf8c <__sfputc_r+0x16>
 800cf88:	290a      	cmp	r1, #10
 800cf8a:	d103      	bne.n	800cf94 <__sfputc_r+0x1e>
 800cf8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf90:	f000 b94a 	b.w	800d228 <__swbuf_r>
 800cf94:	6813      	ldr	r3, [r2, #0]
 800cf96:	1c58      	adds	r0, r3, #1
 800cf98:	6010      	str	r0, [r2, #0]
 800cf9a:	7019      	strb	r1, [r3, #0]
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <__sfputs_r>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	4606      	mov	r6, r0
 800cfa8:	460f      	mov	r7, r1
 800cfaa:	4614      	mov	r4, r2
 800cfac:	18d5      	adds	r5, r2, r3
 800cfae:	42ac      	cmp	r4, r5
 800cfb0:	d101      	bne.n	800cfb6 <__sfputs_r+0x12>
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	e007      	b.n	800cfc6 <__sfputs_r+0x22>
 800cfb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfba:	463a      	mov	r2, r7
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7ff ffda 	bl	800cf76 <__sfputc_r>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	d1f3      	bne.n	800cfae <__sfputs_r+0xa>
 800cfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfc8 <_vfiprintf_r>:
 800cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	460d      	mov	r5, r1
 800cfce:	b09d      	sub	sp, #116	; 0x74
 800cfd0:	4614      	mov	r4, r2
 800cfd2:	4698      	mov	r8, r3
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	b118      	cbz	r0, 800cfe0 <_vfiprintf_r+0x18>
 800cfd8:	6983      	ldr	r3, [r0, #24]
 800cfda:	b90b      	cbnz	r3, 800cfe0 <_vfiprintf_r+0x18>
 800cfdc:	f000 fb06 	bl	800d5ec <__sinit>
 800cfe0:	4b89      	ldr	r3, [pc, #548]	; (800d208 <_vfiprintf_r+0x240>)
 800cfe2:	429d      	cmp	r5, r3
 800cfe4:	d11b      	bne.n	800d01e <_vfiprintf_r+0x56>
 800cfe6:	6875      	ldr	r5, [r6, #4]
 800cfe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfea:	07d9      	lsls	r1, r3, #31
 800cfec:	d405      	bmi.n	800cffa <_vfiprintf_r+0x32>
 800cfee:	89ab      	ldrh	r3, [r5, #12]
 800cff0:	059a      	lsls	r2, r3, #22
 800cff2:	d402      	bmi.n	800cffa <_vfiprintf_r+0x32>
 800cff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cff6:	f000 fb97 	bl	800d728 <__retarget_lock_acquire_recursive>
 800cffa:	89ab      	ldrh	r3, [r5, #12]
 800cffc:	071b      	lsls	r3, r3, #28
 800cffe:	d501      	bpl.n	800d004 <_vfiprintf_r+0x3c>
 800d000:	692b      	ldr	r3, [r5, #16]
 800d002:	b9eb      	cbnz	r3, 800d040 <_vfiprintf_r+0x78>
 800d004:	4629      	mov	r1, r5
 800d006:	4630      	mov	r0, r6
 800d008:	f000 f960 	bl	800d2cc <__swsetup_r>
 800d00c:	b1c0      	cbz	r0, 800d040 <_vfiprintf_r+0x78>
 800d00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d010:	07dc      	lsls	r4, r3, #31
 800d012:	d50e      	bpl.n	800d032 <_vfiprintf_r+0x6a>
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	b01d      	add	sp, #116	; 0x74
 800d01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d01e:	4b7b      	ldr	r3, [pc, #492]	; (800d20c <_vfiprintf_r+0x244>)
 800d020:	429d      	cmp	r5, r3
 800d022:	d101      	bne.n	800d028 <_vfiprintf_r+0x60>
 800d024:	68b5      	ldr	r5, [r6, #8]
 800d026:	e7df      	b.n	800cfe8 <_vfiprintf_r+0x20>
 800d028:	4b79      	ldr	r3, [pc, #484]	; (800d210 <_vfiprintf_r+0x248>)
 800d02a:	429d      	cmp	r5, r3
 800d02c:	bf08      	it	eq
 800d02e:	68f5      	ldreq	r5, [r6, #12]
 800d030:	e7da      	b.n	800cfe8 <_vfiprintf_r+0x20>
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	0598      	lsls	r0, r3, #22
 800d036:	d4ed      	bmi.n	800d014 <_vfiprintf_r+0x4c>
 800d038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d03a:	f000 fb76 	bl	800d72a <__retarget_lock_release_recursive>
 800d03e:	e7e9      	b.n	800d014 <_vfiprintf_r+0x4c>
 800d040:	2300      	movs	r3, #0
 800d042:	9309      	str	r3, [sp, #36]	; 0x24
 800d044:	2320      	movs	r3, #32
 800d046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d04a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d04e:	2330      	movs	r3, #48	; 0x30
 800d050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d214 <_vfiprintf_r+0x24c>
 800d054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d058:	f04f 0901 	mov.w	r9, #1
 800d05c:	4623      	mov	r3, r4
 800d05e:	469a      	mov	sl, r3
 800d060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d064:	b10a      	cbz	r2, 800d06a <_vfiprintf_r+0xa2>
 800d066:	2a25      	cmp	r2, #37	; 0x25
 800d068:	d1f9      	bne.n	800d05e <_vfiprintf_r+0x96>
 800d06a:	ebba 0b04 	subs.w	fp, sl, r4
 800d06e:	d00b      	beq.n	800d088 <_vfiprintf_r+0xc0>
 800d070:	465b      	mov	r3, fp
 800d072:	4622      	mov	r2, r4
 800d074:	4629      	mov	r1, r5
 800d076:	4630      	mov	r0, r6
 800d078:	f7ff ff94 	bl	800cfa4 <__sfputs_r>
 800d07c:	3001      	adds	r0, #1
 800d07e:	f000 80aa 	beq.w	800d1d6 <_vfiprintf_r+0x20e>
 800d082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d084:	445a      	add	r2, fp
 800d086:	9209      	str	r2, [sp, #36]	; 0x24
 800d088:	f89a 3000 	ldrb.w	r3, [sl]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f000 80a2 	beq.w	800d1d6 <_vfiprintf_r+0x20e>
 800d092:	2300      	movs	r3, #0
 800d094:	f04f 32ff 	mov.w	r2, #4294967295
 800d098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d09c:	f10a 0a01 	add.w	sl, sl, #1
 800d0a0:	9304      	str	r3, [sp, #16]
 800d0a2:	9307      	str	r3, [sp, #28]
 800d0a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0a8:	931a      	str	r3, [sp, #104]	; 0x68
 800d0aa:	4654      	mov	r4, sl
 800d0ac:	2205      	movs	r2, #5
 800d0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b2:	4858      	ldr	r0, [pc, #352]	; (800d214 <_vfiprintf_r+0x24c>)
 800d0b4:	f7f3 f8b4 	bl	8000220 <memchr>
 800d0b8:	9a04      	ldr	r2, [sp, #16]
 800d0ba:	b9d8      	cbnz	r0, 800d0f4 <_vfiprintf_r+0x12c>
 800d0bc:	06d1      	lsls	r1, r2, #27
 800d0be:	bf44      	itt	mi
 800d0c0:	2320      	movmi	r3, #32
 800d0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c6:	0713      	lsls	r3, r2, #28
 800d0c8:	bf44      	itt	mi
 800d0ca:	232b      	movmi	r3, #43	; 0x2b
 800d0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d6:	d015      	beq.n	800d104 <_vfiprintf_r+0x13c>
 800d0d8:	9a07      	ldr	r2, [sp, #28]
 800d0da:	4654      	mov	r4, sl
 800d0dc:	2000      	movs	r0, #0
 800d0de:	f04f 0c0a 	mov.w	ip, #10
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0e8:	3b30      	subs	r3, #48	; 0x30
 800d0ea:	2b09      	cmp	r3, #9
 800d0ec:	d94e      	bls.n	800d18c <_vfiprintf_r+0x1c4>
 800d0ee:	b1b0      	cbz	r0, 800d11e <_vfiprintf_r+0x156>
 800d0f0:	9207      	str	r2, [sp, #28]
 800d0f2:	e014      	b.n	800d11e <_vfiprintf_r+0x156>
 800d0f4:	eba0 0308 	sub.w	r3, r0, r8
 800d0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	9304      	str	r3, [sp, #16]
 800d100:	46a2      	mov	sl, r4
 800d102:	e7d2      	b.n	800d0aa <_vfiprintf_r+0xe2>
 800d104:	9b03      	ldr	r3, [sp, #12]
 800d106:	1d19      	adds	r1, r3, #4
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	9103      	str	r1, [sp, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	bfbb      	ittet	lt
 800d110:	425b      	neglt	r3, r3
 800d112:	f042 0202 	orrlt.w	r2, r2, #2
 800d116:	9307      	strge	r3, [sp, #28]
 800d118:	9307      	strlt	r3, [sp, #28]
 800d11a:	bfb8      	it	lt
 800d11c:	9204      	strlt	r2, [sp, #16]
 800d11e:	7823      	ldrb	r3, [r4, #0]
 800d120:	2b2e      	cmp	r3, #46	; 0x2e
 800d122:	d10c      	bne.n	800d13e <_vfiprintf_r+0x176>
 800d124:	7863      	ldrb	r3, [r4, #1]
 800d126:	2b2a      	cmp	r3, #42	; 0x2a
 800d128:	d135      	bne.n	800d196 <_vfiprintf_r+0x1ce>
 800d12a:	9b03      	ldr	r3, [sp, #12]
 800d12c:	1d1a      	adds	r2, r3, #4
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	9203      	str	r2, [sp, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	bfb8      	it	lt
 800d136:	f04f 33ff 	movlt.w	r3, #4294967295
 800d13a:	3402      	adds	r4, #2
 800d13c:	9305      	str	r3, [sp, #20]
 800d13e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d224 <_vfiprintf_r+0x25c>
 800d142:	7821      	ldrb	r1, [r4, #0]
 800d144:	2203      	movs	r2, #3
 800d146:	4650      	mov	r0, sl
 800d148:	f7f3 f86a 	bl	8000220 <memchr>
 800d14c:	b140      	cbz	r0, 800d160 <_vfiprintf_r+0x198>
 800d14e:	2340      	movs	r3, #64	; 0x40
 800d150:	eba0 000a 	sub.w	r0, r0, sl
 800d154:	fa03 f000 	lsl.w	r0, r3, r0
 800d158:	9b04      	ldr	r3, [sp, #16]
 800d15a:	4303      	orrs	r3, r0
 800d15c:	3401      	adds	r4, #1
 800d15e:	9304      	str	r3, [sp, #16]
 800d160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d164:	482c      	ldr	r0, [pc, #176]	; (800d218 <_vfiprintf_r+0x250>)
 800d166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d16a:	2206      	movs	r2, #6
 800d16c:	f7f3 f858 	bl	8000220 <memchr>
 800d170:	2800      	cmp	r0, #0
 800d172:	d03f      	beq.n	800d1f4 <_vfiprintf_r+0x22c>
 800d174:	4b29      	ldr	r3, [pc, #164]	; (800d21c <_vfiprintf_r+0x254>)
 800d176:	bb1b      	cbnz	r3, 800d1c0 <_vfiprintf_r+0x1f8>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	3307      	adds	r3, #7
 800d17c:	f023 0307 	bic.w	r3, r3, #7
 800d180:	3308      	adds	r3, #8
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d186:	443b      	add	r3, r7
 800d188:	9309      	str	r3, [sp, #36]	; 0x24
 800d18a:	e767      	b.n	800d05c <_vfiprintf_r+0x94>
 800d18c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d190:	460c      	mov	r4, r1
 800d192:	2001      	movs	r0, #1
 800d194:	e7a5      	b.n	800d0e2 <_vfiprintf_r+0x11a>
 800d196:	2300      	movs	r3, #0
 800d198:	3401      	adds	r4, #1
 800d19a:	9305      	str	r3, [sp, #20]
 800d19c:	4619      	mov	r1, r3
 800d19e:	f04f 0c0a 	mov.w	ip, #10
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a8:	3a30      	subs	r2, #48	; 0x30
 800d1aa:	2a09      	cmp	r2, #9
 800d1ac:	d903      	bls.n	800d1b6 <_vfiprintf_r+0x1ee>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d0c5      	beq.n	800d13e <_vfiprintf_r+0x176>
 800d1b2:	9105      	str	r1, [sp, #20]
 800d1b4:	e7c3      	b.n	800d13e <_vfiprintf_r+0x176>
 800d1b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e7f0      	b.n	800d1a2 <_vfiprintf_r+0x1da>
 800d1c0:	ab03      	add	r3, sp, #12
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	4b16      	ldr	r3, [pc, #88]	; (800d220 <_vfiprintf_r+0x258>)
 800d1c8:	a904      	add	r1, sp, #16
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	f7fc f83c 	bl	8009248 <_printf_float>
 800d1d0:	4607      	mov	r7, r0
 800d1d2:	1c78      	adds	r0, r7, #1
 800d1d4:	d1d6      	bne.n	800d184 <_vfiprintf_r+0x1bc>
 800d1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1d8:	07d9      	lsls	r1, r3, #31
 800d1da:	d405      	bmi.n	800d1e8 <_vfiprintf_r+0x220>
 800d1dc:	89ab      	ldrh	r3, [r5, #12]
 800d1de:	059a      	lsls	r2, r3, #22
 800d1e0:	d402      	bmi.n	800d1e8 <_vfiprintf_r+0x220>
 800d1e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e4:	f000 faa1 	bl	800d72a <__retarget_lock_release_recursive>
 800d1e8:	89ab      	ldrh	r3, [r5, #12]
 800d1ea:	065b      	lsls	r3, r3, #25
 800d1ec:	f53f af12 	bmi.w	800d014 <_vfiprintf_r+0x4c>
 800d1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1f2:	e711      	b.n	800d018 <_vfiprintf_r+0x50>
 800d1f4:	ab03      	add	r3, sp, #12
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	462a      	mov	r2, r5
 800d1fa:	4b09      	ldr	r3, [pc, #36]	; (800d220 <_vfiprintf_r+0x258>)
 800d1fc:	a904      	add	r1, sp, #16
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7fc fac6 	bl	8009790 <_printf_i>
 800d204:	e7e4      	b.n	800d1d0 <_vfiprintf_r+0x208>
 800d206:	bf00      	nop
 800d208:	0800e064 	.word	0x0800e064
 800d20c:	0800e084 	.word	0x0800e084
 800d210:	0800e044 	.word	0x0800e044
 800d214:	0800dff4 	.word	0x0800dff4
 800d218:	0800dffe 	.word	0x0800dffe
 800d21c:	08009249 	.word	0x08009249
 800d220:	0800cfa5 	.word	0x0800cfa5
 800d224:	0800dffa 	.word	0x0800dffa

0800d228 <__swbuf_r>:
 800d228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22a:	460e      	mov	r6, r1
 800d22c:	4614      	mov	r4, r2
 800d22e:	4605      	mov	r5, r0
 800d230:	b118      	cbz	r0, 800d23a <__swbuf_r+0x12>
 800d232:	6983      	ldr	r3, [r0, #24]
 800d234:	b90b      	cbnz	r3, 800d23a <__swbuf_r+0x12>
 800d236:	f000 f9d9 	bl	800d5ec <__sinit>
 800d23a:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <__swbuf_r+0x98>)
 800d23c:	429c      	cmp	r4, r3
 800d23e:	d12b      	bne.n	800d298 <__swbuf_r+0x70>
 800d240:	686c      	ldr	r4, [r5, #4]
 800d242:	69a3      	ldr	r3, [r4, #24]
 800d244:	60a3      	str	r3, [r4, #8]
 800d246:	89a3      	ldrh	r3, [r4, #12]
 800d248:	071a      	lsls	r2, r3, #28
 800d24a:	d52f      	bpl.n	800d2ac <__swbuf_r+0x84>
 800d24c:	6923      	ldr	r3, [r4, #16]
 800d24e:	b36b      	cbz	r3, 800d2ac <__swbuf_r+0x84>
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	6820      	ldr	r0, [r4, #0]
 800d254:	1ac0      	subs	r0, r0, r3
 800d256:	6963      	ldr	r3, [r4, #20]
 800d258:	b2f6      	uxtb	r6, r6
 800d25a:	4283      	cmp	r3, r0
 800d25c:	4637      	mov	r7, r6
 800d25e:	dc04      	bgt.n	800d26a <__swbuf_r+0x42>
 800d260:	4621      	mov	r1, r4
 800d262:	4628      	mov	r0, r5
 800d264:	f000 f92e 	bl	800d4c4 <_fflush_r>
 800d268:	bb30      	cbnz	r0, 800d2b8 <__swbuf_r+0x90>
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	3b01      	subs	r3, #1
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	6022      	str	r2, [r4, #0]
 800d276:	701e      	strb	r6, [r3, #0]
 800d278:	6963      	ldr	r3, [r4, #20]
 800d27a:	3001      	adds	r0, #1
 800d27c:	4283      	cmp	r3, r0
 800d27e:	d004      	beq.n	800d28a <__swbuf_r+0x62>
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	07db      	lsls	r3, r3, #31
 800d284:	d506      	bpl.n	800d294 <__swbuf_r+0x6c>
 800d286:	2e0a      	cmp	r6, #10
 800d288:	d104      	bne.n	800d294 <__swbuf_r+0x6c>
 800d28a:	4621      	mov	r1, r4
 800d28c:	4628      	mov	r0, r5
 800d28e:	f000 f919 	bl	800d4c4 <_fflush_r>
 800d292:	b988      	cbnz	r0, 800d2b8 <__swbuf_r+0x90>
 800d294:	4638      	mov	r0, r7
 800d296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d298:	4b0a      	ldr	r3, [pc, #40]	; (800d2c4 <__swbuf_r+0x9c>)
 800d29a:	429c      	cmp	r4, r3
 800d29c:	d101      	bne.n	800d2a2 <__swbuf_r+0x7a>
 800d29e:	68ac      	ldr	r4, [r5, #8]
 800d2a0:	e7cf      	b.n	800d242 <__swbuf_r+0x1a>
 800d2a2:	4b09      	ldr	r3, [pc, #36]	; (800d2c8 <__swbuf_r+0xa0>)
 800d2a4:	429c      	cmp	r4, r3
 800d2a6:	bf08      	it	eq
 800d2a8:	68ec      	ldreq	r4, [r5, #12]
 800d2aa:	e7ca      	b.n	800d242 <__swbuf_r+0x1a>
 800d2ac:	4621      	mov	r1, r4
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	f000 f80c 	bl	800d2cc <__swsetup_r>
 800d2b4:	2800      	cmp	r0, #0
 800d2b6:	d0cb      	beq.n	800d250 <__swbuf_r+0x28>
 800d2b8:	f04f 37ff 	mov.w	r7, #4294967295
 800d2bc:	e7ea      	b.n	800d294 <__swbuf_r+0x6c>
 800d2be:	bf00      	nop
 800d2c0:	0800e064 	.word	0x0800e064
 800d2c4:	0800e084 	.word	0x0800e084
 800d2c8:	0800e044 	.word	0x0800e044

0800d2cc <__swsetup_r>:
 800d2cc:	4b32      	ldr	r3, [pc, #200]	; (800d398 <__swsetup_r+0xcc>)
 800d2ce:	b570      	push	{r4, r5, r6, lr}
 800d2d0:	681d      	ldr	r5, [r3, #0]
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	460c      	mov	r4, r1
 800d2d6:	b125      	cbz	r5, 800d2e2 <__swsetup_r+0x16>
 800d2d8:	69ab      	ldr	r3, [r5, #24]
 800d2da:	b913      	cbnz	r3, 800d2e2 <__swsetup_r+0x16>
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f000 f985 	bl	800d5ec <__sinit>
 800d2e2:	4b2e      	ldr	r3, [pc, #184]	; (800d39c <__swsetup_r+0xd0>)
 800d2e4:	429c      	cmp	r4, r3
 800d2e6:	d10f      	bne.n	800d308 <__swsetup_r+0x3c>
 800d2e8:	686c      	ldr	r4, [r5, #4]
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2f0:	0719      	lsls	r1, r3, #28
 800d2f2:	d42c      	bmi.n	800d34e <__swsetup_r+0x82>
 800d2f4:	06dd      	lsls	r5, r3, #27
 800d2f6:	d411      	bmi.n	800d31c <__swsetup_r+0x50>
 800d2f8:	2309      	movs	r3, #9
 800d2fa:	6033      	str	r3, [r6, #0]
 800d2fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d300:	81a3      	strh	r3, [r4, #12]
 800d302:	f04f 30ff 	mov.w	r0, #4294967295
 800d306:	e03e      	b.n	800d386 <__swsetup_r+0xba>
 800d308:	4b25      	ldr	r3, [pc, #148]	; (800d3a0 <__swsetup_r+0xd4>)
 800d30a:	429c      	cmp	r4, r3
 800d30c:	d101      	bne.n	800d312 <__swsetup_r+0x46>
 800d30e:	68ac      	ldr	r4, [r5, #8]
 800d310:	e7eb      	b.n	800d2ea <__swsetup_r+0x1e>
 800d312:	4b24      	ldr	r3, [pc, #144]	; (800d3a4 <__swsetup_r+0xd8>)
 800d314:	429c      	cmp	r4, r3
 800d316:	bf08      	it	eq
 800d318:	68ec      	ldreq	r4, [r5, #12]
 800d31a:	e7e6      	b.n	800d2ea <__swsetup_r+0x1e>
 800d31c:	0758      	lsls	r0, r3, #29
 800d31e:	d512      	bpl.n	800d346 <__swsetup_r+0x7a>
 800d320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d322:	b141      	cbz	r1, 800d336 <__swsetup_r+0x6a>
 800d324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d328:	4299      	cmp	r1, r3
 800d32a:	d002      	beq.n	800d332 <__swsetup_r+0x66>
 800d32c:	4630      	mov	r0, r6
 800d32e:	f7ff fb25 	bl	800c97c <_free_r>
 800d332:	2300      	movs	r3, #0
 800d334:	6363      	str	r3, [r4, #52]	; 0x34
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d33c:	81a3      	strh	r3, [r4, #12]
 800d33e:	2300      	movs	r3, #0
 800d340:	6063      	str	r3, [r4, #4]
 800d342:	6923      	ldr	r3, [r4, #16]
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	f043 0308 	orr.w	r3, r3, #8
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	6923      	ldr	r3, [r4, #16]
 800d350:	b94b      	cbnz	r3, 800d366 <__swsetup_r+0x9a>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d35c:	d003      	beq.n	800d366 <__swsetup_r+0x9a>
 800d35e:	4621      	mov	r1, r4
 800d360:	4630      	mov	r0, r6
 800d362:	f000 fa09 	bl	800d778 <__smakebuf_r>
 800d366:	89a0      	ldrh	r0, [r4, #12]
 800d368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d36c:	f010 0301 	ands.w	r3, r0, #1
 800d370:	d00a      	beq.n	800d388 <__swsetup_r+0xbc>
 800d372:	2300      	movs	r3, #0
 800d374:	60a3      	str	r3, [r4, #8]
 800d376:	6963      	ldr	r3, [r4, #20]
 800d378:	425b      	negs	r3, r3
 800d37a:	61a3      	str	r3, [r4, #24]
 800d37c:	6923      	ldr	r3, [r4, #16]
 800d37e:	b943      	cbnz	r3, 800d392 <__swsetup_r+0xc6>
 800d380:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d384:	d1ba      	bne.n	800d2fc <__swsetup_r+0x30>
 800d386:	bd70      	pop	{r4, r5, r6, pc}
 800d388:	0781      	lsls	r1, r0, #30
 800d38a:	bf58      	it	pl
 800d38c:	6963      	ldrpl	r3, [r4, #20]
 800d38e:	60a3      	str	r3, [r4, #8]
 800d390:	e7f4      	b.n	800d37c <__swsetup_r+0xb0>
 800d392:	2000      	movs	r0, #0
 800d394:	e7f7      	b.n	800d386 <__swsetup_r+0xba>
 800d396:	bf00      	nop
 800d398:	20000024 	.word	0x20000024
 800d39c:	0800e064 	.word	0x0800e064
 800d3a0:	0800e084 	.word	0x0800e084
 800d3a4:	0800e044 	.word	0x0800e044

0800d3a8 <abort>:
 800d3a8:	b508      	push	{r3, lr}
 800d3aa:	2006      	movs	r0, #6
 800d3ac:	f000 fa54 	bl	800d858 <raise>
 800d3b0:	2001      	movs	r0, #1
 800d3b2:	f7f8 f993 	bl	80056dc <_exit>
	...

0800d3b8 <__sflush_r>:
 800d3b8:	898a      	ldrh	r2, [r1, #12]
 800d3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3be:	4605      	mov	r5, r0
 800d3c0:	0710      	lsls	r0, r2, #28
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	d458      	bmi.n	800d478 <__sflush_r+0xc0>
 800d3c6:	684b      	ldr	r3, [r1, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	dc05      	bgt.n	800d3d8 <__sflush_r+0x20>
 800d3cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	dc02      	bgt.n	800d3d8 <__sflush_r+0x20>
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3da:	2e00      	cmp	r6, #0
 800d3dc:	d0f9      	beq.n	800d3d2 <__sflush_r+0x1a>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3e4:	682f      	ldr	r7, [r5, #0]
 800d3e6:	602b      	str	r3, [r5, #0]
 800d3e8:	d032      	beq.n	800d450 <__sflush_r+0x98>
 800d3ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	075a      	lsls	r2, r3, #29
 800d3f0:	d505      	bpl.n	800d3fe <__sflush_r+0x46>
 800d3f2:	6863      	ldr	r3, [r4, #4]
 800d3f4:	1ac0      	subs	r0, r0, r3
 800d3f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3f8:	b10b      	cbz	r3, 800d3fe <__sflush_r+0x46>
 800d3fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3fc:	1ac0      	subs	r0, r0, r3
 800d3fe:	2300      	movs	r3, #0
 800d400:	4602      	mov	r2, r0
 800d402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d404:	6a21      	ldr	r1, [r4, #32]
 800d406:	4628      	mov	r0, r5
 800d408:	47b0      	blx	r6
 800d40a:	1c43      	adds	r3, r0, #1
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	d106      	bne.n	800d41e <__sflush_r+0x66>
 800d410:	6829      	ldr	r1, [r5, #0]
 800d412:	291d      	cmp	r1, #29
 800d414:	d82c      	bhi.n	800d470 <__sflush_r+0xb8>
 800d416:	4a2a      	ldr	r2, [pc, #168]	; (800d4c0 <__sflush_r+0x108>)
 800d418:	40ca      	lsrs	r2, r1
 800d41a:	07d6      	lsls	r6, r2, #31
 800d41c:	d528      	bpl.n	800d470 <__sflush_r+0xb8>
 800d41e:	2200      	movs	r2, #0
 800d420:	6062      	str	r2, [r4, #4]
 800d422:	04d9      	lsls	r1, r3, #19
 800d424:	6922      	ldr	r2, [r4, #16]
 800d426:	6022      	str	r2, [r4, #0]
 800d428:	d504      	bpl.n	800d434 <__sflush_r+0x7c>
 800d42a:	1c42      	adds	r2, r0, #1
 800d42c:	d101      	bne.n	800d432 <__sflush_r+0x7a>
 800d42e:	682b      	ldr	r3, [r5, #0]
 800d430:	b903      	cbnz	r3, 800d434 <__sflush_r+0x7c>
 800d432:	6560      	str	r0, [r4, #84]	; 0x54
 800d434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d436:	602f      	str	r7, [r5, #0]
 800d438:	2900      	cmp	r1, #0
 800d43a:	d0ca      	beq.n	800d3d2 <__sflush_r+0x1a>
 800d43c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d440:	4299      	cmp	r1, r3
 800d442:	d002      	beq.n	800d44a <__sflush_r+0x92>
 800d444:	4628      	mov	r0, r5
 800d446:	f7ff fa99 	bl	800c97c <_free_r>
 800d44a:	2000      	movs	r0, #0
 800d44c:	6360      	str	r0, [r4, #52]	; 0x34
 800d44e:	e7c1      	b.n	800d3d4 <__sflush_r+0x1c>
 800d450:	6a21      	ldr	r1, [r4, #32]
 800d452:	2301      	movs	r3, #1
 800d454:	4628      	mov	r0, r5
 800d456:	47b0      	blx	r6
 800d458:	1c41      	adds	r1, r0, #1
 800d45a:	d1c7      	bne.n	800d3ec <__sflush_r+0x34>
 800d45c:	682b      	ldr	r3, [r5, #0]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0c4      	beq.n	800d3ec <__sflush_r+0x34>
 800d462:	2b1d      	cmp	r3, #29
 800d464:	d001      	beq.n	800d46a <__sflush_r+0xb2>
 800d466:	2b16      	cmp	r3, #22
 800d468:	d101      	bne.n	800d46e <__sflush_r+0xb6>
 800d46a:	602f      	str	r7, [r5, #0]
 800d46c:	e7b1      	b.n	800d3d2 <__sflush_r+0x1a>
 800d46e:	89a3      	ldrh	r3, [r4, #12]
 800d470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d474:	81a3      	strh	r3, [r4, #12]
 800d476:	e7ad      	b.n	800d3d4 <__sflush_r+0x1c>
 800d478:	690f      	ldr	r7, [r1, #16]
 800d47a:	2f00      	cmp	r7, #0
 800d47c:	d0a9      	beq.n	800d3d2 <__sflush_r+0x1a>
 800d47e:	0793      	lsls	r3, r2, #30
 800d480:	680e      	ldr	r6, [r1, #0]
 800d482:	bf08      	it	eq
 800d484:	694b      	ldreq	r3, [r1, #20]
 800d486:	600f      	str	r7, [r1, #0]
 800d488:	bf18      	it	ne
 800d48a:	2300      	movne	r3, #0
 800d48c:	eba6 0807 	sub.w	r8, r6, r7
 800d490:	608b      	str	r3, [r1, #8]
 800d492:	f1b8 0f00 	cmp.w	r8, #0
 800d496:	dd9c      	ble.n	800d3d2 <__sflush_r+0x1a>
 800d498:	6a21      	ldr	r1, [r4, #32]
 800d49a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d49c:	4643      	mov	r3, r8
 800d49e:	463a      	mov	r2, r7
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	47b0      	blx	r6
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	dc06      	bgt.n	800d4b6 <__sflush_r+0xfe>
 800d4a8:	89a3      	ldrh	r3, [r4, #12]
 800d4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4ae:	81a3      	strh	r3, [r4, #12]
 800d4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b4:	e78e      	b.n	800d3d4 <__sflush_r+0x1c>
 800d4b6:	4407      	add	r7, r0
 800d4b8:	eba8 0800 	sub.w	r8, r8, r0
 800d4bc:	e7e9      	b.n	800d492 <__sflush_r+0xda>
 800d4be:	bf00      	nop
 800d4c0:	20400001 	.word	0x20400001

0800d4c4 <_fflush_r>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	690b      	ldr	r3, [r1, #16]
 800d4c8:	4605      	mov	r5, r0
 800d4ca:	460c      	mov	r4, r1
 800d4cc:	b913      	cbnz	r3, 800d4d4 <_fflush_r+0x10>
 800d4ce:	2500      	movs	r5, #0
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	bd38      	pop	{r3, r4, r5, pc}
 800d4d4:	b118      	cbz	r0, 800d4de <_fflush_r+0x1a>
 800d4d6:	6983      	ldr	r3, [r0, #24]
 800d4d8:	b90b      	cbnz	r3, 800d4de <_fflush_r+0x1a>
 800d4da:	f000 f887 	bl	800d5ec <__sinit>
 800d4de:	4b14      	ldr	r3, [pc, #80]	; (800d530 <_fflush_r+0x6c>)
 800d4e0:	429c      	cmp	r4, r3
 800d4e2:	d11b      	bne.n	800d51c <_fflush_r+0x58>
 800d4e4:	686c      	ldr	r4, [r5, #4]
 800d4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d0ef      	beq.n	800d4ce <_fflush_r+0xa>
 800d4ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4f0:	07d0      	lsls	r0, r2, #31
 800d4f2:	d404      	bmi.n	800d4fe <_fflush_r+0x3a>
 800d4f4:	0599      	lsls	r1, r3, #22
 800d4f6:	d402      	bmi.n	800d4fe <_fflush_r+0x3a>
 800d4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4fa:	f000 f915 	bl	800d728 <__retarget_lock_acquire_recursive>
 800d4fe:	4628      	mov	r0, r5
 800d500:	4621      	mov	r1, r4
 800d502:	f7ff ff59 	bl	800d3b8 <__sflush_r>
 800d506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d508:	07da      	lsls	r2, r3, #31
 800d50a:	4605      	mov	r5, r0
 800d50c:	d4e0      	bmi.n	800d4d0 <_fflush_r+0xc>
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	059b      	lsls	r3, r3, #22
 800d512:	d4dd      	bmi.n	800d4d0 <_fflush_r+0xc>
 800d514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d516:	f000 f908 	bl	800d72a <__retarget_lock_release_recursive>
 800d51a:	e7d9      	b.n	800d4d0 <_fflush_r+0xc>
 800d51c:	4b05      	ldr	r3, [pc, #20]	; (800d534 <_fflush_r+0x70>)
 800d51e:	429c      	cmp	r4, r3
 800d520:	d101      	bne.n	800d526 <_fflush_r+0x62>
 800d522:	68ac      	ldr	r4, [r5, #8]
 800d524:	e7df      	b.n	800d4e6 <_fflush_r+0x22>
 800d526:	4b04      	ldr	r3, [pc, #16]	; (800d538 <_fflush_r+0x74>)
 800d528:	429c      	cmp	r4, r3
 800d52a:	bf08      	it	eq
 800d52c:	68ec      	ldreq	r4, [r5, #12]
 800d52e:	e7da      	b.n	800d4e6 <_fflush_r+0x22>
 800d530:	0800e064 	.word	0x0800e064
 800d534:	0800e084 	.word	0x0800e084
 800d538:	0800e044 	.word	0x0800e044

0800d53c <std>:
 800d53c:	2300      	movs	r3, #0
 800d53e:	b510      	push	{r4, lr}
 800d540:	4604      	mov	r4, r0
 800d542:	e9c0 3300 	strd	r3, r3, [r0]
 800d546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d54a:	6083      	str	r3, [r0, #8]
 800d54c:	8181      	strh	r1, [r0, #12]
 800d54e:	6643      	str	r3, [r0, #100]	; 0x64
 800d550:	81c2      	strh	r2, [r0, #14]
 800d552:	6183      	str	r3, [r0, #24]
 800d554:	4619      	mov	r1, r3
 800d556:	2208      	movs	r2, #8
 800d558:	305c      	adds	r0, #92	; 0x5c
 800d55a:	f7fb fdcd 	bl	80090f8 <memset>
 800d55e:	4b05      	ldr	r3, [pc, #20]	; (800d574 <std+0x38>)
 800d560:	6263      	str	r3, [r4, #36]	; 0x24
 800d562:	4b05      	ldr	r3, [pc, #20]	; (800d578 <std+0x3c>)
 800d564:	62a3      	str	r3, [r4, #40]	; 0x28
 800d566:	4b05      	ldr	r3, [pc, #20]	; (800d57c <std+0x40>)
 800d568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d56a:	4b05      	ldr	r3, [pc, #20]	; (800d580 <std+0x44>)
 800d56c:	6224      	str	r4, [r4, #32]
 800d56e:	6323      	str	r3, [r4, #48]	; 0x30
 800d570:	bd10      	pop	{r4, pc}
 800d572:	bf00      	nop
 800d574:	0800d891 	.word	0x0800d891
 800d578:	0800d8b3 	.word	0x0800d8b3
 800d57c:	0800d8eb 	.word	0x0800d8eb
 800d580:	0800d90f 	.word	0x0800d90f

0800d584 <_cleanup_r>:
 800d584:	4901      	ldr	r1, [pc, #4]	; (800d58c <_cleanup_r+0x8>)
 800d586:	f000 b8af 	b.w	800d6e8 <_fwalk_reent>
 800d58a:	bf00      	nop
 800d58c:	0800d4c5 	.word	0x0800d4c5

0800d590 <__sfmoreglue>:
 800d590:	b570      	push	{r4, r5, r6, lr}
 800d592:	2268      	movs	r2, #104	; 0x68
 800d594:	1e4d      	subs	r5, r1, #1
 800d596:	4355      	muls	r5, r2
 800d598:	460e      	mov	r6, r1
 800d59a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d59e:	f7ff fa59 	bl	800ca54 <_malloc_r>
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	b140      	cbz	r0, 800d5b8 <__sfmoreglue+0x28>
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	e9c0 1600 	strd	r1, r6, [r0]
 800d5ac:	300c      	adds	r0, #12
 800d5ae:	60a0      	str	r0, [r4, #8]
 800d5b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5b4:	f7fb fda0 	bl	80090f8 <memset>
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	bd70      	pop	{r4, r5, r6, pc}

0800d5bc <__sfp_lock_acquire>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	; (800d5c4 <__sfp_lock_acquire+0x8>)
 800d5be:	f000 b8b3 	b.w	800d728 <__retarget_lock_acquire_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	200005d9 	.word	0x200005d9

0800d5c8 <__sfp_lock_release>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__sfp_lock_release+0x8>)
 800d5ca:	f000 b8ae 	b.w	800d72a <__retarget_lock_release_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	200005d9 	.word	0x200005d9

0800d5d4 <__sinit_lock_acquire>:
 800d5d4:	4801      	ldr	r0, [pc, #4]	; (800d5dc <__sinit_lock_acquire+0x8>)
 800d5d6:	f000 b8a7 	b.w	800d728 <__retarget_lock_acquire_recursive>
 800d5da:	bf00      	nop
 800d5dc:	200005da 	.word	0x200005da

0800d5e0 <__sinit_lock_release>:
 800d5e0:	4801      	ldr	r0, [pc, #4]	; (800d5e8 <__sinit_lock_release+0x8>)
 800d5e2:	f000 b8a2 	b.w	800d72a <__retarget_lock_release_recursive>
 800d5e6:	bf00      	nop
 800d5e8:	200005da 	.word	0x200005da

0800d5ec <__sinit>:
 800d5ec:	b510      	push	{r4, lr}
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	f7ff fff0 	bl	800d5d4 <__sinit_lock_acquire>
 800d5f4:	69a3      	ldr	r3, [r4, #24]
 800d5f6:	b11b      	cbz	r3, 800d600 <__sinit+0x14>
 800d5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5fc:	f7ff bff0 	b.w	800d5e0 <__sinit_lock_release>
 800d600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d604:	6523      	str	r3, [r4, #80]	; 0x50
 800d606:	4b13      	ldr	r3, [pc, #76]	; (800d654 <__sinit+0x68>)
 800d608:	4a13      	ldr	r2, [pc, #76]	; (800d658 <__sinit+0x6c>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d60e:	42a3      	cmp	r3, r4
 800d610:	bf04      	itt	eq
 800d612:	2301      	moveq	r3, #1
 800d614:	61a3      	streq	r3, [r4, #24]
 800d616:	4620      	mov	r0, r4
 800d618:	f000 f820 	bl	800d65c <__sfp>
 800d61c:	6060      	str	r0, [r4, #4]
 800d61e:	4620      	mov	r0, r4
 800d620:	f000 f81c 	bl	800d65c <__sfp>
 800d624:	60a0      	str	r0, [r4, #8]
 800d626:	4620      	mov	r0, r4
 800d628:	f000 f818 	bl	800d65c <__sfp>
 800d62c:	2200      	movs	r2, #0
 800d62e:	60e0      	str	r0, [r4, #12]
 800d630:	2104      	movs	r1, #4
 800d632:	6860      	ldr	r0, [r4, #4]
 800d634:	f7ff ff82 	bl	800d53c <std>
 800d638:	68a0      	ldr	r0, [r4, #8]
 800d63a:	2201      	movs	r2, #1
 800d63c:	2109      	movs	r1, #9
 800d63e:	f7ff ff7d 	bl	800d53c <std>
 800d642:	68e0      	ldr	r0, [r4, #12]
 800d644:	2202      	movs	r2, #2
 800d646:	2112      	movs	r1, #18
 800d648:	f7ff ff78 	bl	800d53c <std>
 800d64c:	2301      	movs	r3, #1
 800d64e:	61a3      	str	r3, [r4, #24]
 800d650:	e7d2      	b.n	800d5f8 <__sinit+0xc>
 800d652:	bf00      	nop
 800d654:	0800dc00 	.word	0x0800dc00
 800d658:	0800d585 	.word	0x0800d585

0800d65c <__sfp>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	4607      	mov	r7, r0
 800d660:	f7ff ffac 	bl	800d5bc <__sfp_lock_acquire>
 800d664:	4b1e      	ldr	r3, [pc, #120]	; (800d6e0 <__sfp+0x84>)
 800d666:	681e      	ldr	r6, [r3, #0]
 800d668:	69b3      	ldr	r3, [r6, #24]
 800d66a:	b913      	cbnz	r3, 800d672 <__sfp+0x16>
 800d66c:	4630      	mov	r0, r6
 800d66e:	f7ff ffbd 	bl	800d5ec <__sinit>
 800d672:	3648      	adds	r6, #72	; 0x48
 800d674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d678:	3b01      	subs	r3, #1
 800d67a:	d503      	bpl.n	800d684 <__sfp+0x28>
 800d67c:	6833      	ldr	r3, [r6, #0]
 800d67e:	b30b      	cbz	r3, 800d6c4 <__sfp+0x68>
 800d680:	6836      	ldr	r6, [r6, #0]
 800d682:	e7f7      	b.n	800d674 <__sfp+0x18>
 800d684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d688:	b9d5      	cbnz	r5, 800d6c0 <__sfp+0x64>
 800d68a:	4b16      	ldr	r3, [pc, #88]	; (800d6e4 <__sfp+0x88>)
 800d68c:	60e3      	str	r3, [r4, #12]
 800d68e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d692:	6665      	str	r5, [r4, #100]	; 0x64
 800d694:	f000 f847 	bl	800d726 <__retarget_lock_init_recursive>
 800d698:	f7ff ff96 	bl	800d5c8 <__sfp_lock_release>
 800d69c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6a4:	6025      	str	r5, [r4, #0]
 800d6a6:	61a5      	str	r5, [r4, #24]
 800d6a8:	2208      	movs	r2, #8
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6b0:	f7fb fd22 	bl	80090f8 <memset>
 800d6b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6bc:	4620      	mov	r0, r4
 800d6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6c0:	3468      	adds	r4, #104	; 0x68
 800d6c2:	e7d9      	b.n	800d678 <__sfp+0x1c>
 800d6c4:	2104      	movs	r1, #4
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	f7ff ff62 	bl	800d590 <__sfmoreglue>
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	6030      	str	r0, [r6, #0]
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d1d5      	bne.n	800d680 <__sfp+0x24>
 800d6d4:	f7ff ff78 	bl	800d5c8 <__sfp_lock_release>
 800d6d8:	230c      	movs	r3, #12
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	e7ee      	b.n	800d6bc <__sfp+0x60>
 800d6de:	bf00      	nop
 800d6e0:	0800dc00 	.word	0x0800dc00
 800d6e4:	ffff0001 	.word	0xffff0001

0800d6e8 <_fwalk_reent>:
 800d6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	4688      	mov	r8, r1
 800d6f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6f4:	2700      	movs	r7, #0
 800d6f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6fa:	f1b9 0901 	subs.w	r9, r9, #1
 800d6fe:	d505      	bpl.n	800d70c <_fwalk_reent+0x24>
 800d700:	6824      	ldr	r4, [r4, #0]
 800d702:	2c00      	cmp	r4, #0
 800d704:	d1f7      	bne.n	800d6f6 <_fwalk_reent+0xe>
 800d706:	4638      	mov	r0, r7
 800d708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d70c:	89ab      	ldrh	r3, [r5, #12]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d907      	bls.n	800d722 <_fwalk_reent+0x3a>
 800d712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d716:	3301      	adds	r3, #1
 800d718:	d003      	beq.n	800d722 <_fwalk_reent+0x3a>
 800d71a:	4629      	mov	r1, r5
 800d71c:	4630      	mov	r0, r6
 800d71e:	47c0      	blx	r8
 800d720:	4307      	orrs	r7, r0
 800d722:	3568      	adds	r5, #104	; 0x68
 800d724:	e7e9      	b.n	800d6fa <_fwalk_reent+0x12>

0800d726 <__retarget_lock_init_recursive>:
 800d726:	4770      	bx	lr

0800d728 <__retarget_lock_acquire_recursive>:
 800d728:	4770      	bx	lr

0800d72a <__retarget_lock_release_recursive>:
 800d72a:	4770      	bx	lr

0800d72c <__swhatbuf_r>:
 800d72c:	b570      	push	{r4, r5, r6, lr}
 800d72e:	460e      	mov	r6, r1
 800d730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d734:	2900      	cmp	r1, #0
 800d736:	b096      	sub	sp, #88	; 0x58
 800d738:	4614      	mov	r4, r2
 800d73a:	461d      	mov	r5, r3
 800d73c:	da08      	bge.n	800d750 <__swhatbuf_r+0x24>
 800d73e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	602a      	str	r2, [r5, #0]
 800d746:	061a      	lsls	r2, r3, #24
 800d748:	d410      	bmi.n	800d76c <__swhatbuf_r+0x40>
 800d74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d74e:	e00e      	b.n	800d76e <__swhatbuf_r+0x42>
 800d750:	466a      	mov	r2, sp
 800d752:	f000 f903 	bl	800d95c <_fstat_r>
 800d756:	2800      	cmp	r0, #0
 800d758:	dbf1      	blt.n	800d73e <__swhatbuf_r+0x12>
 800d75a:	9a01      	ldr	r2, [sp, #4]
 800d75c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d760:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d764:	425a      	negs	r2, r3
 800d766:	415a      	adcs	r2, r3
 800d768:	602a      	str	r2, [r5, #0]
 800d76a:	e7ee      	b.n	800d74a <__swhatbuf_r+0x1e>
 800d76c:	2340      	movs	r3, #64	; 0x40
 800d76e:	2000      	movs	r0, #0
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	b016      	add	sp, #88	; 0x58
 800d774:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d778 <__smakebuf_r>:
 800d778:	898b      	ldrh	r3, [r1, #12]
 800d77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d77c:	079d      	lsls	r5, r3, #30
 800d77e:	4606      	mov	r6, r0
 800d780:	460c      	mov	r4, r1
 800d782:	d507      	bpl.n	800d794 <__smakebuf_r+0x1c>
 800d784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	6123      	str	r3, [r4, #16]
 800d78c:	2301      	movs	r3, #1
 800d78e:	6163      	str	r3, [r4, #20]
 800d790:	b002      	add	sp, #8
 800d792:	bd70      	pop	{r4, r5, r6, pc}
 800d794:	ab01      	add	r3, sp, #4
 800d796:	466a      	mov	r2, sp
 800d798:	f7ff ffc8 	bl	800d72c <__swhatbuf_r>
 800d79c:	9900      	ldr	r1, [sp, #0]
 800d79e:	4605      	mov	r5, r0
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f7ff f957 	bl	800ca54 <_malloc_r>
 800d7a6:	b948      	cbnz	r0, 800d7bc <__smakebuf_r+0x44>
 800d7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7ac:	059a      	lsls	r2, r3, #22
 800d7ae:	d4ef      	bmi.n	800d790 <__smakebuf_r+0x18>
 800d7b0:	f023 0303 	bic.w	r3, r3, #3
 800d7b4:	f043 0302 	orr.w	r3, r3, #2
 800d7b8:	81a3      	strh	r3, [r4, #12]
 800d7ba:	e7e3      	b.n	800d784 <__smakebuf_r+0xc>
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <__smakebuf_r+0x7c>)
 800d7be:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	6020      	str	r0, [r4, #0]
 800d7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c8:	81a3      	strh	r3, [r4, #12]
 800d7ca:	9b00      	ldr	r3, [sp, #0]
 800d7cc:	6163      	str	r3, [r4, #20]
 800d7ce:	9b01      	ldr	r3, [sp, #4]
 800d7d0:	6120      	str	r0, [r4, #16]
 800d7d2:	b15b      	cbz	r3, 800d7ec <__smakebuf_r+0x74>
 800d7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f000 f8d1 	bl	800d980 <_isatty_r>
 800d7de:	b128      	cbz	r0, 800d7ec <__smakebuf_r+0x74>
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	f023 0303 	bic.w	r3, r3, #3
 800d7e6:	f043 0301 	orr.w	r3, r3, #1
 800d7ea:	81a3      	strh	r3, [r4, #12]
 800d7ec:	89a0      	ldrh	r0, [r4, #12]
 800d7ee:	4305      	orrs	r5, r0
 800d7f0:	81a5      	strh	r5, [r4, #12]
 800d7f2:	e7cd      	b.n	800d790 <__smakebuf_r+0x18>
 800d7f4:	0800d585 	.word	0x0800d585

0800d7f8 <_malloc_usable_size_r>:
 800d7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7fc:	1f18      	subs	r0, r3, #4
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bfbc      	itt	lt
 800d802:	580b      	ldrlt	r3, [r1, r0]
 800d804:	18c0      	addlt	r0, r0, r3
 800d806:	4770      	bx	lr

0800d808 <_raise_r>:
 800d808:	291f      	cmp	r1, #31
 800d80a:	b538      	push	{r3, r4, r5, lr}
 800d80c:	4604      	mov	r4, r0
 800d80e:	460d      	mov	r5, r1
 800d810:	d904      	bls.n	800d81c <_raise_r+0x14>
 800d812:	2316      	movs	r3, #22
 800d814:	6003      	str	r3, [r0, #0]
 800d816:	f04f 30ff 	mov.w	r0, #4294967295
 800d81a:	bd38      	pop	{r3, r4, r5, pc}
 800d81c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d81e:	b112      	cbz	r2, 800d826 <_raise_r+0x1e>
 800d820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d824:	b94b      	cbnz	r3, 800d83a <_raise_r+0x32>
 800d826:	4620      	mov	r0, r4
 800d828:	f000 f830 	bl	800d88c <_getpid_r>
 800d82c:	462a      	mov	r2, r5
 800d82e:	4601      	mov	r1, r0
 800d830:	4620      	mov	r0, r4
 800d832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d836:	f000 b817 	b.w	800d868 <_kill_r>
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d00a      	beq.n	800d854 <_raise_r+0x4c>
 800d83e:	1c59      	adds	r1, r3, #1
 800d840:	d103      	bne.n	800d84a <_raise_r+0x42>
 800d842:	2316      	movs	r3, #22
 800d844:	6003      	str	r3, [r0, #0]
 800d846:	2001      	movs	r0, #1
 800d848:	e7e7      	b.n	800d81a <_raise_r+0x12>
 800d84a:	2400      	movs	r4, #0
 800d84c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d850:	4628      	mov	r0, r5
 800d852:	4798      	blx	r3
 800d854:	2000      	movs	r0, #0
 800d856:	e7e0      	b.n	800d81a <_raise_r+0x12>

0800d858 <raise>:
 800d858:	4b02      	ldr	r3, [pc, #8]	; (800d864 <raise+0xc>)
 800d85a:	4601      	mov	r1, r0
 800d85c:	6818      	ldr	r0, [r3, #0]
 800d85e:	f7ff bfd3 	b.w	800d808 <_raise_r>
 800d862:	bf00      	nop
 800d864:	20000024 	.word	0x20000024

0800d868 <_kill_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d07      	ldr	r5, [pc, #28]	; (800d888 <_kill_r+0x20>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	4611      	mov	r1, r2
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	f7f7 ff21 	bl	80056bc <_kill>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	d102      	bne.n	800d884 <_kill_r+0x1c>
 800d87e:	682b      	ldr	r3, [r5, #0]
 800d880:	b103      	cbz	r3, 800d884 <_kill_r+0x1c>
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	bd38      	pop	{r3, r4, r5, pc}
 800d886:	bf00      	nop
 800d888:	200005d4 	.word	0x200005d4

0800d88c <_getpid_r>:
 800d88c:	f7f7 bf0e 	b.w	80056ac <_getpid>

0800d890 <__sread>:
 800d890:	b510      	push	{r4, lr}
 800d892:	460c      	mov	r4, r1
 800d894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d898:	f000 f894 	bl	800d9c4 <_read_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	bfab      	itete	ge
 800d8a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d8a4:	181b      	addge	r3, r3, r0
 800d8a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8aa:	bfac      	ite	ge
 800d8ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8ae:	81a3      	strhlt	r3, [r4, #12]
 800d8b0:	bd10      	pop	{r4, pc}

0800d8b2 <__swrite>:
 800d8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	898b      	ldrh	r3, [r1, #12]
 800d8ba:	05db      	lsls	r3, r3, #23
 800d8bc:	4605      	mov	r5, r0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	d505      	bpl.n	800d8d0 <__swrite+0x1e>
 800d8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f000 f868 	bl	800d9a0 <_lseek_r>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	463b      	mov	r3, r7
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e6:	f000 b817 	b.w	800d918 <_write_r>

0800d8ea <__sseek>:
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f2:	f000 f855 	bl	800d9a0 <_lseek_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	bf15      	itete	ne
 800d8fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d906:	81a3      	strheq	r3, [r4, #12]
 800d908:	bf18      	it	ne
 800d90a:	81a3      	strhne	r3, [r4, #12]
 800d90c:	bd10      	pop	{r4, pc}

0800d90e <__sclose>:
 800d90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d912:	f000 b813 	b.w	800d93c <_close_r>
	...

0800d918 <_write_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4d07      	ldr	r5, [pc, #28]	; (800d938 <_write_r+0x20>)
 800d91c:	4604      	mov	r4, r0
 800d91e:	4608      	mov	r0, r1
 800d920:	4611      	mov	r1, r2
 800d922:	2200      	movs	r2, #0
 800d924:	602a      	str	r2, [r5, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	f7f7 feff 	bl	800572a <_write>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_write_r+0x1e>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	b103      	cbz	r3, 800d936 <_write_r+0x1e>
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	200005d4 	.word	0x200005d4

0800d93c <_close_r>:
 800d93c:	b538      	push	{r3, r4, r5, lr}
 800d93e:	4d06      	ldr	r5, [pc, #24]	; (800d958 <_close_r+0x1c>)
 800d940:	2300      	movs	r3, #0
 800d942:	4604      	mov	r4, r0
 800d944:	4608      	mov	r0, r1
 800d946:	602b      	str	r3, [r5, #0]
 800d948:	f7f7 ff0b 	bl	8005762 <_close>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d102      	bne.n	800d956 <_close_r+0x1a>
 800d950:	682b      	ldr	r3, [r5, #0]
 800d952:	b103      	cbz	r3, 800d956 <_close_r+0x1a>
 800d954:	6023      	str	r3, [r4, #0]
 800d956:	bd38      	pop	{r3, r4, r5, pc}
 800d958:	200005d4 	.word	0x200005d4

0800d95c <_fstat_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4d07      	ldr	r5, [pc, #28]	; (800d97c <_fstat_r+0x20>)
 800d960:	2300      	movs	r3, #0
 800d962:	4604      	mov	r4, r0
 800d964:	4608      	mov	r0, r1
 800d966:	4611      	mov	r1, r2
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	f7f7 ff06 	bl	800577a <_fstat>
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	d102      	bne.n	800d978 <_fstat_r+0x1c>
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	b103      	cbz	r3, 800d978 <_fstat_r+0x1c>
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	bd38      	pop	{r3, r4, r5, pc}
 800d97a:	bf00      	nop
 800d97c:	200005d4 	.word	0x200005d4

0800d980 <_isatty_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4d06      	ldr	r5, [pc, #24]	; (800d99c <_isatty_r+0x1c>)
 800d984:	2300      	movs	r3, #0
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	f7f7 ff05 	bl	800579a <_isatty>
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d102      	bne.n	800d99a <_isatty_r+0x1a>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	b103      	cbz	r3, 800d99a <_isatty_r+0x1a>
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	200005d4 	.word	0x200005d4

0800d9a0 <_lseek_r>:
 800d9a0:	b538      	push	{r3, r4, r5, lr}
 800d9a2:	4d07      	ldr	r5, [pc, #28]	; (800d9c0 <_lseek_r+0x20>)
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	4608      	mov	r0, r1
 800d9a8:	4611      	mov	r1, r2
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	602a      	str	r2, [r5, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	f7f7 fefe 	bl	80057b0 <_lseek>
 800d9b4:	1c43      	adds	r3, r0, #1
 800d9b6:	d102      	bne.n	800d9be <_lseek_r+0x1e>
 800d9b8:	682b      	ldr	r3, [r5, #0]
 800d9ba:	b103      	cbz	r3, 800d9be <_lseek_r+0x1e>
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	200005d4 	.word	0x200005d4

0800d9c4 <_read_r>:
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4d07      	ldr	r5, [pc, #28]	; (800d9e4 <_read_r+0x20>)
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	4608      	mov	r0, r1
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	602a      	str	r2, [r5, #0]
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f7f7 fe8c 	bl	80056f0 <_read>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d102      	bne.n	800d9e2 <_read_r+0x1e>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	b103      	cbz	r3, 800d9e2 <_read_r+0x1e>
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	200005d4 	.word	0x200005d4

0800d9e8 <_init>:
 800d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ea:	bf00      	nop
 800d9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ee:	bc08      	pop	{r3}
 800d9f0:	469e      	mov	lr, r3
 800d9f2:	4770      	bx	lr

0800d9f4 <_fini>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	bf00      	nop
 800d9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fa:	bc08      	pop	{r3}
 800d9fc:	469e      	mov	lr, r3
 800d9fe:	4770      	bx	lr
